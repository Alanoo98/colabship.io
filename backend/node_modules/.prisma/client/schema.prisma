// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String // Store hashed password
  name              String?
  bio               String?
  avatarUrl         String?  @map("avatar_url")
  githubUrl         String?  @map("github_url")
  linkedinUrl       String?  @map("linkedin_url")
  portfolioUrl      String?  @map("portfolio_url")
  experienceLevel   String?  @map("experience_level")
  timezone          String?
  availabilityHours Int?     @map("availability_hours")
  workStyle         String?  @map("work_style")
  commsPref         String?  @map("comms_pref")
  values            String[]
  isOnboarded       Boolean  @default(false) @map("is_onboarded")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  offers             UserOffer[]
  needs              UserNeed[]
  matchPreferences   MatchPreferences?
  projectInterests   ProjectInterest[]
  collaborationPrefs CollaborationPreferences?
  matchesAsA         Match[]                   @relation("UserAMatches")
  matchesAsB         Match[]                   @relation("UserBMatches")
  matchInteractions  MatchInteraction[]
  badges             UserBadge[]
  feedbackGiven      CollaborationFeedback[]   @relation("FeedbackGiver")
  feedbackReceived   CollaborationFeedback[]   @relation("FeedbackReceiver")

  @@map("users")
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  category  String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  offers UserOffer[]
  needs  UserNeed[]

  @@map("skills")
}

model UserOffer {
  userId      String   @map("user_id")
  skillId     Int      @map("skill_id")
  proficiency Int
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_offers")
}

model UserNeed {
  userId    String   @map("user_id")
  skillId   Int      @map("skill_id")
  mustHave  Boolean  @default(false) @map("must_have")
  priority  Int      @default(3)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([userId, skillId])
  @@map("user_needs")
}

model MatchPreferences {
  userId             String   @id @map("user_id")
  skillWeight        Int      @default(25) @map("skill_weight")
  availabilityWeight Int      @default(20) @map("availability_weight")
  timezoneWeight     Int      @default(20) @map("timezone_weight")
  collabStyleWeight  Int      @default(15) @map("collab_style_weight")
  personalityWeight  Int      @default(20) @map("personality_weight")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("match_preferences")
}

model ProjectInterest {
  userId    String   @map("user_id")
  interest  String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, interest])
  @@map("project_interests")
}

model CollaborationPreferences {
  userId               String   @id @map("user_id")
  preferredTools       String[] @map("preferred_tools")
  projectStageInterest String[] @map("project_stage_interest")
  teamSizePreference   String?  @map("team_size_preference")
  commitmentLevel      String?  @map("commitment_level")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("collaboration_preferences")
}

model Match {
  id         String   @id @default(cuid())
  userAId    String   @map("user_a_id")
  userBId    String   @map("user_b_id")
  matchScore Decimal? @map("match_score") @db.Decimal(5, 2)
  status     String   @default("pending")
  userALiked Boolean  @default(false) @map("user_a_liked")
  userBLiked Boolean  @default(false) @map("user_b_liked")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  userA        User                    @relation("UserAMatches", fields: [userAId], references: [id], onDelete: Cascade)
  userB        User                    @relation("UserBMatches", fields: [userBId], references: [id], onDelete: Cascade)
  interactions MatchInteraction[]
  feedback     CollaborationFeedback[]

  @@unique([userAId, userBId])
  @@map("matches")
}

model MatchInteraction {
  id        String   @id @default(cuid())
  matchId   String   @map("match_id")
  userId    String   @map("user_id")
  action    String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("match_interactions")
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  criteria    String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  users UserBadge[]

  @@map("badges")
}

model UserBadge {
  userId   String   @map("user_id")
  badgeId  Int      @map("badge_id")
  earnedAt DateTime @default(now()) @map("earned_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@id([userId, badgeId])
  @@map("user_badges")
}

model CollaborationFeedback {
  id                    String   @id @default(cuid())
  matchId               String   @map("match_id")
  reviewerId            String   @map("reviewer_id")
  reviewedId            String   @map("reviewed_id")
  rating                Int
  feedback              String?
  collaborationQuality  Int      @map("collaboration_quality")
  communicationQuality  Int      @map("communication_quality")
  skillMatchQuality     Int      @map("skill_match_quality")
  wouldCollaborateAgain Boolean? @map("would_collaborate_again")
  createdAt             DateTime @default(now()) @map("created_at")

  // Relations
  match    Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  reviewer User  @relation("FeedbackGiver", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewed User  @relation("FeedbackReceiver", fields: [reviewedId], references: [id], onDelete: Cascade)

  @@unique([matchId, reviewerId])
  @@map("collaboration_feedback")
}
