
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Skill
 * 
 */
export type Skill = $Result.DefaultSelection<Prisma.$SkillPayload>
/**
 * Model UserOffer
 * 
 */
export type UserOffer = $Result.DefaultSelection<Prisma.$UserOfferPayload>
/**
 * Model UserNeed
 * 
 */
export type UserNeed = $Result.DefaultSelection<Prisma.$UserNeedPayload>
/**
 * Model MatchPreferences
 * 
 */
export type MatchPreferences = $Result.DefaultSelection<Prisma.$MatchPreferencesPayload>
/**
 * Model ProjectInterest
 * 
 */
export type ProjectInterest = $Result.DefaultSelection<Prisma.$ProjectInterestPayload>
/**
 * Model CollaborationPreferences
 * 
 */
export type CollaborationPreferences = $Result.DefaultSelection<Prisma.$CollaborationPreferencesPayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model MatchInteraction
 * 
 */
export type MatchInteraction = $Result.DefaultSelection<Prisma.$MatchInteractionPayload>
/**
 * Model Badge
 * 
 */
export type Badge = $Result.DefaultSelection<Prisma.$BadgePayload>
/**
 * Model UserBadge
 * 
 */
export type UserBadge = $Result.DefaultSelection<Prisma.$UserBadgePayload>
/**
 * Model CollaborationFeedback
 * 
 */
export type CollaborationFeedback = $Result.DefaultSelection<Prisma.$CollaborationFeedbackPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.skill`: Exposes CRUD operations for the **Skill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skill.findMany()
    * ```
    */
  get skill(): Prisma.SkillDelegate<ExtArgs>;

  /**
   * `prisma.userOffer`: Exposes CRUD operations for the **UserOffer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserOffers
    * const userOffers = await prisma.userOffer.findMany()
    * ```
    */
  get userOffer(): Prisma.UserOfferDelegate<ExtArgs>;

  /**
   * `prisma.userNeed`: Exposes CRUD operations for the **UserNeed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserNeeds
    * const userNeeds = await prisma.userNeed.findMany()
    * ```
    */
  get userNeed(): Prisma.UserNeedDelegate<ExtArgs>;

  /**
   * `prisma.matchPreferences`: Exposes CRUD operations for the **MatchPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchPreferences
    * const matchPreferences = await prisma.matchPreferences.findMany()
    * ```
    */
  get matchPreferences(): Prisma.MatchPreferencesDelegate<ExtArgs>;

  /**
   * `prisma.projectInterest`: Exposes CRUD operations for the **ProjectInterest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectInterests
    * const projectInterests = await prisma.projectInterest.findMany()
    * ```
    */
  get projectInterest(): Prisma.ProjectInterestDelegate<ExtArgs>;

  /**
   * `prisma.collaborationPreferences`: Exposes CRUD operations for the **CollaborationPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollaborationPreferences
    * const collaborationPreferences = await prisma.collaborationPreferences.findMany()
    * ```
    */
  get collaborationPreferences(): Prisma.CollaborationPreferencesDelegate<ExtArgs>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs>;

  /**
   * `prisma.matchInteraction`: Exposes CRUD operations for the **MatchInteraction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchInteractions
    * const matchInteractions = await prisma.matchInteraction.findMany()
    * ```
    */
  get matchInteraction(): Prisma.MatchInteractionDelegate<ExtArgs>;

  /**
   * `prisma.badge`: Exposes CRUD operations for the **Badge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Badges
    * const badges = await prisma.badge.findMany()
    * ```
    */
  get badge(): Prisma.BadgeDelegate<ExtArgs>;

  /**
   * `prisma.userBadge`: Exposes CRUD operations for the **UserBadge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBadges
    * const userBadges = await prisma.userBadge.findMany()
    * ```
    */
  get userBadge(): Prisma.UserBadgeDelegate<ExtArgs>;

  /**
   * `prisma.collaborationFeedback`: Exposes CRUD operations for the **CollaborationFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CollaborationFeedbacks
    * const collaborationFeedbacks = await prisma.collaborationFeedback.findMany()
    * ```
    */
  get collaborationFeedback(): Prisma.CollaborationFeedbackDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Skill: 'Skill',
    UserOffer: 'UserOffer',
    UserNeed: 'UserNeed',
    MatchPreferences: 'MatchPreferences',
    ProjectInterest: 'ProjectInterest',
    CollaborationPreferences: 'CollaborationPreferences',
    Match: 'Match',
    MatchInteraction: 'MatchInteraction',
    Badge: 'Badge',
    UserBadge: 'UserBadge',
    CollaborationFeedback: 'CollaborationFeedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "skill" | "userOffer" | "userNeed" | "matchPreferences" | "projectInterest" | "collaborationPreferences" | "match" | "matchInteraction" | "badge" | "userBadge" | "collaborationFeedback"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Skill: {
        payload: Prisma.$SkillPayload<ExtArgs>
        fields: Prisma.SkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findFirst: {
            args: Prisma.SkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          findMany: {
            args: Prisma.SkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          create: {
            args: Prisma.SkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          createMany: {
            args: Prisma.SkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SkillCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>[]
          }
          delete: {
            args: Prisma.SkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          update: {
            args: Prisma.SkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          deleteMany: {
            args: Prisma.SkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillPayload>
          }
          aggregate: {
            args: Prisma.SkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkill>
          }
          groupBy: {
            args: Prisma.SkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillCountArgs<ExtArgs>
            result: $Utils.Optional<SkillCountAggregateOutputType> | number
          }
        }
      }
      UserOffer: {
        payload: Prisma.$UserOfferPayload<ExtArgs>
        fields: Prisma.UserOfferFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserOfferFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserOfferFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>
          }
          findFirst: {
            args: Prisma.UserOfferFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserOfferFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>
          }
          findMany: {
            args: Prisma.UserOfferFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>[]
          }
          create: {
            args: Prisma.UserOfferCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>
          }
          createMany: {
            args: Prisma.UserOfferCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserOfferCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>[]
          }
          delete: {
            args: Prisma.UserOfferDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>
          }
          update: {
            args: Prisma.UserOfferUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>
          }
          deleteMany: {
            args: Prisma.UserOfferDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserOfferUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserOfferUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserOfferPayload>
          }
          aggregate: {
            args: Prisma.UserOfferAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserOffer>
          }
          groupBy: {
            args: Prisma.UserOfferGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserOfferGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserOfferCountArgs<ExtArgs>
            result: $Utils.Optional<UserOfferCountAggregateOutputType> | number
          }
        }
      }
      UserNeed: {
        payload: Prisma.$UserNeedPayload<ExtArgs>
        fields: Prisma.UserNeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserNeedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserNeedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>
          }
          findFirst: {
            args: Prisma.UserNeedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserNeedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>
          }
          findMany: {
            args: Prisma.UserNeedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>[]
          }
          create: {
            args: Prisma.UserNeedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>
          }
          createMany: {
            args: Prisma.UserNeedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserNeedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>[]
          }
          delete: {
            args: Prisma.UserNeedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>
          }
          update: {
            args: Prisma.UserNeedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>
          }
          deleteMany: {
            args: Prisma.UserNeedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserNeedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserNeedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserNeedPayload>
          }
          aggregate: {
            args: Prisma.UserNeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserNeed>
          }
          groupBy: {
            args: Prisma.UserNeedGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserNeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserNeedCountArgs<ExtArgs>
            result: $Utils.Optional<UserNeedCountAggregateOutputType> | number
          }
        }
      }
      MatchPreferences: {
        payload: Prisma.$MatchPreferencesPayload<ExtArgs>
        fields: Prisma.MatchPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>
          }
          findFirst: {
            args: Prisma.MatchPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>
          }
          findMany: {
            args: Prisma.MatchPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>[]
          }
          create: {
            args: Prisma.MatchPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>
          }
          createMany: {
            args: Prisma.MatchPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>[]
          }
          delete: {
            args: Prisma.MatchPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>
          }
          update: {
            args: Prisma.MatchPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.MatchPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPreferencesPayload>
          }
          aggregate: {
            args: Prisma.MatchPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchPreferences>
          }
          groupBy: {
            args: Prisma.MatchPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<MatchPreferencesCountAggregateOutputType> | number
          }
        }
      }
      ProjectInterest: {
        payload: Prisma.$ProjectInterestPayload<ExtArgs>
        fields: Prisma.ProjectInterestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectInterestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectInterestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>
          }
          findFirst: {
            args: Prisma.ProjectInterestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectInterestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>
          }
          findMany: {
            args: Prisma.ProjectInterestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>[]
          }
          create: {
            args: Prisma.ProjectInterestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>
          }
          createMany: {
            args: Prisma.ProjectInterestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectInterestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>[]
          }
          delete: {
            args: Prisma.ProjectInterestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>
          }
          update: {
            args: Prisma.ProjectInterestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>
          }
          deleteMany: {
            args: Prisma.ProjectInterestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectInterestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectInterestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectInterestPayload>
          }
          aggregate: {
            args: Prisma.ProjectInterestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectInterest>
          }
          groupBy: {
            args: Prisma.ProjectInterestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectInterestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectInterestCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectInterestCountAggregateOutputType> | number
          }
        }
      }
      CollaborationPreferences: {
        payload: Prisma.$CollaborationPreferencesPayload<ExtArgs>
        fields: Prisma.CollaborationPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollaborationPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollaborationPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>
          }
          findFirst: {
            args: Prisma.CollaborationPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollaborationPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>
          }
          findMany: {
            args: Prisma.CollaborationPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>[]
          }
          create: {
            args: Prisma.CollaborationPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>
          }
          createMany: {
            args: Prisma.CollaborationPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollaborationPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>[]
          }
          delete: {
            args: Prisma.CollaborationPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>
          }
          update: {
            args: Prisma.CollaborationPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.CollaborationPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollaborationPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollaborationPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationPreferencesPayload>
          }
          aggregate: {
            args: Prisma.CollaborationPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollaborationPreferences>
          }
          groupBy: {
            args: Prisma.CollaborationPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollaborationPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollaborationPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<CollaborationPreferencesCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      MatchInteraction: {
        payload: Prisma.$MatchInteractionPayload<ExtArgs>
        fields: Prisma.MatchInteractionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchInteractionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchInteractionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>
          }
          findFirst: {
            args: Prisma.MatchInteractionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchInteractionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>
          }
          findMany: {
            args: Prisma.MatchInteractionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>[]
          }
          create: {
            args: Prisma.MatchInteractionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>
          }
          createMany: {
            args: Prisma.MatchInteractionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchInteractionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>[]
          }
          delete: {
            args: Prisma.MatchInteractionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>
          }
          update: {
            args: Prisma.MatchInteractionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>
          }
          deleteMany: {
            args: Prisma.MatchInteractionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchInteractionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MatchInteractionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchInteractionPayload>
          }
          aggregate: {
            args: Prisma.MatchInteractionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatchInteraction>
          }
          groupBy: {
            args: Prisma.MatchInteractionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchInteractionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchInteractionCountArgs<ExtArgs>
            result: $Utils.Optional<MatchInteractionCountAggregateOutputType> | number
          }
        }
      }
      Badge: {
        payload: Prisma.$BadgePayload<ExtArgs>
        fields: Prisma.BadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findFirst: {
            args: Prisma.BadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          findMany: {
            args: Prisma.BadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          create: {
            args: Prisma.BadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          createMany: {
            args: Prisma.BadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>[]
          }
          delete: {
            args: Prisma.BadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          update: {
            args: Prisma.BadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          deleteMany: {
            args: Prisma.BadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BadgePayload>
          }
          aggregate: {
            args: Prisma.BadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBadge>
          }
          groupBy: {
            args: Prisma.BadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BadgeCountArgs<ExtArgs>
            result: $Utils.Optional<BadgeCountAggregateOutputType> | number
          }
        }
      }
      UserBadge: {
        payload: Prisma.$UserBadgePayload<ExtArgs>
        fields: Prisma.UserBadgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserBadgeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserBadgeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findFirst: {
            args: Prisma.UserBadgeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserBadgeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          findMany: {
            args: Prisma.UserBadgeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          create: {
            args: Prisma.UserBadgeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          createMany: {
            args: Prisma.UserBadgeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserBadgeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>[]
          }
          delete: {
            args: Prisma.UserBadgeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          update: {
            args: Prisma.UserBadgeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          deleteMany: {
            args: Prisma.UserBadgeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserBadgeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserBadgeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserBadgePayload>
          }
          aggregate: {
            args: Prisma.UserBadgeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserBadge>
          }
          groupBy: {
            args: Prisma.UserBadgeGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserBadgeCountArgs<ExtArgs>
            result: $Utils.Optional<UserBadgeCountAggregateOutputType> | number
          }
        }
      }
      CollaborationFeedback: {
        payload: Prisma.$CollaborationFeedbackPayload<ExtArgs>
        fields: Prisma.CollaborationFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollaborationFeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollaborationFeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>
          }
          findFirst: {
            args: Prisma.CollaborationFeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollaborationFeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>
          }
          findMany: {
            args: Prisma.CollaborationFeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>[]
          }
          create: {
            args: Prisma.CollaborationFeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>
          }
          createMany: {
            args: Prisma.CollaborationFeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollaborationFeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>[]
          }
          delete: {
            args: Prisma.CollaborationFeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>
          }
          update: {
            args: Prisma.CollaborationFeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.CollaborationFeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollaborationFeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollaborationFeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollaborationFeedbackPayload>
          }
          aggregate: {
            args: Prisma.CollaborationFeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollaborationFeedback>
          }
          groupBy: {
            args: Prisma.CollaborationFeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollaborationFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollaborationFeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<CollaborationFeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    offers: number
    needs: number
    projectInterests: number
    matchesAsA: number
    matchesAsB: number
    matchInteractions: number
    badges: number
    feedbackGiven: number
    feedbackReceived: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offers?: boolean | UserCountOutputTypeCountOffersArgs
    needs?: boolean | UserCountOutputTypeCountNeedsArgs
    projectInterests?: boolean | UserCountOutputTypeCountProjectInterestsArgs
    matchesAsA?: boolean | UserCountOutputTypeCountMatchesAsAArgs
    matchesAsB?: boolean | UserCountOutputTypeCountMatchesAsBArgs
    matchInteractions?: boolean | UserCountOutputTypeCountMatchInteractionsArgs
    badges?: boolean | UserCountOutputTypeCountBadgesArgs
    feedbackGiven?: boolean | UserCountOutputTypeCountFeedbackGivenArgs
    feedbackReceived?: boolean | UserCountOutputTypeCountFeedbackReceivedArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserOfferWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNeedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProjectInterestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectInterestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchesAsAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchesAsBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMatchInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchInteractionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBadgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationFeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbackReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationFeedbackWhereInput
  }


  /**
   * Count Type SkillCountOutputType
   */

  export type SkillCountOutputType = {
    offers: number
    needs: number
  }

  export type SkillCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offers?: boolean | SkillCountOutputTypeCountOffersArgs
    needs?: boolean | SkillCountOutputTypeCountNeedsArgs
  }

  // Custom InputTypes
  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillCountOutputType
     */
    select?: SkillCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountOffersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserOfferWhereInput
  }

  /**
   * SkillCountOutputType without action
   */
  export type SkillCountOutputTypeCountNeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNeedWhereInput
  }


  /**
   * Count Type MatchCountOutputType
   */

  export type MatchCountOutputType = {
    interactions: number
    feedback: number
  }

  export type MatchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interactions?: boolean | MatchCountOutputTypeCountInteractionsArgs
    feedback?: boolean | MatchCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes
  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchCountOutputType
     */
    select?: MatchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchInteractionWhereInput
  }

  /**
   * MatchCountOutputType without action
   */
  export type MatchCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationFeedbackWhereInput
  }


  /**
   * Count Type BadgeCountOutputType
   */

  export type BadgeCountOutputType = {
    users: number
  }

  export type BadgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | BadgeCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BadgeCountOutputType
     */
    select?: BadgeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BadgeCountOutputType without action
   */
  export type BadgeCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    availabilityHours: number | null
  }

  export type UserSumAggregateOutputType = {
    availabilityHours: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    bio: string | null
    avatarUrl: string | null
    githubUrl: string | null
    linkedinUrl: string | null
    portfolioUrl: string | null
    experienceLevel: string | null
    timezone: string | null
    availabilityHours: number | null
    workStyle: string | null
    commsPref: string | null
    isOnboarded: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    bio: string | null
    avatarUrl: string | null
    githubUrl: string | null
    linkedinUrl: string | null
    portfolioUrl: string | null
    experienceLevel: string | null
    timezone: string | null
    availabilityHours: number | null
    workStyle: string | null
    commsPref: string | null
    isOnboarded: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    bio: number
    avatarUrl: number
    githubUrl: number
    linkedinUrl: number
    portfolioUrl: number
    experienceLevel: number
    timezone: number
    availabilityHours: number
    workStyle: number
    commsPref: number
    values: number
    isOnboarded: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    availabilityHours?: true
  }

  export type UserSumAggregateInputType = {
    availabilityHours?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    bio?: true
    avatarUrl?: true
    githubUrl?: true
    linkedinUrl?: true
    portfolioUrl?: true
    experienceLevel?: true
    timezone?: true
    availabilityHours?: true
    workStyle?: true
    commsPref?: true
    isOnboarded?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    bio?: true
    avatarUrl?: true
    githubUrl?: true
    linkedinUrl?: true
    portfolioUrl?: true
    experienceLevel?: true
    timezone?: true
    availabilityHours?: true
    workStyle?: true
    commsPref?: true
    isOnboarded?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    bio?: true
    avatarUrl?: true
    githubUrl?: true
    linkedinUrl?: true
    portfolioUrl?: true
    experienceLevel?: true
    timezone?: true
    availabilityHours?: true
    workStyle?: true
    commsPref?: true
    values?: true
    isOnboarded?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string | null
    bio: string | null
    avatarUrl: string | null
    githubUrl: string | null
    linkedinUrl: string | null
    portfolioUrl: string | null
    experienceLevel: string | null
    timezone: string | null
    availabilityHours: number | null
    workStyle: string | null
    commsPref: string | null
    values: string[]
    isOnboarded: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    bio?: boolean
    avatarUrl?: boolean
    githubUrl?: boolean
    linkedinUrl?: boolean
    portfolioUrl?: boolean
    experienceLevel?: boolean
    timezone?: boolean
    availabilityHours?: boolean
    workStyle?: boolean
    commsPref?: boolean
    values?: boolean
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    offers?: boolean | User$offersArgs<ExtArgs>
    needs?: boolean | User$needsArgs<ExtArgs>
    matchPreferences?: boolean | User$matchPreferencesArgs<ExtArgs>
    projectInterests?: boolean | User$projectInterestsArgs<ExtArgs>
    collaborationPrefs?: boolean | User$collaborationPrefsArgs<ExtArgs>
    matchesAsA?: boolean | User$matchesAsAArgs<ExtArgs>
    matchesAsB?: boolean | User$matchesAsBArgs<ExtArgs>
    matchInteractions?: boolean | User$matchInteractionsArgs<ExtArgs>
    badges?: boolean | User$badgesArgs<ExtArgs>
    feedbackGiven?: boolean | User$feedbackGivenArgs<ExtArgs>
    feedbackReceived?: boolean | User$feedbackReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    bio?: boolean
    avatarUrl?: boolean
    githubUrl?: boolean
    linkedinUrl?: boolean
    portfolioUrl?: boolean
    experienceLevel?: boolean
    timezone?: boolean
    availabilityHours?: boolean
    workStyle?: boolean
    commsPref?: boolean
    values?: boolean
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    bio?: boolean
    avatarUrl?: boolean
    githubUrl?: boolean
    linkedinUrl?: boolean
    portfolioUrl?: boolean
    experienceLevel?: boolean
    timezone?: boolean
    availabilityHours?: boolean
    workStyle?: boolean
    commsPref?: boolean
    values?: boolean
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offers?: boolean | User$offersArgs<ExtArgs>
    needs?: boolean | User$needsArgs<ExtArgs>
    matchPreferences?: boolean | User$matchPreferencesArgs<ExtArgs>
    projectInterests?: boolean | User$projectInterestsArgs<ExtArgs>
    collaborationPrefs?: boolean | User$collaborationPrefsArgs<ExtArgs>
    matchesAsA?: boolean | User$matchesAsAArgs<ExtArgs>
    matchesAsB?: boolean | User$matchesAsBArgs<ExtArgs>
    matchInteractions?: boolean | User$matchInteractionsArgs<ExtArgs>
    badges?: boolean | User$badgesArgs<ExtArgs>
    feedbackGiven?: boolean | User$feedbackGivenArgs<ExtArgs>
    feedbackReceived?: boolean | User$feedbackReceivedArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      offers: Prisma.$UserOfferPayload<ExtArgs>[]
      needs: Prisma.$UserNeedPayload<ExtArgs>[]
      matchPreferences: Prisma.$MatchPreferencesPayload<ExtArgs> | null
      projectInterests: Prisma.$ProjectInterestPayload<ExtArgs>[]
      collaborationPrefs: Prisma.$CollaborationPreferencesPayload<ExtArgs> | null
      matchesAsA: Prisma.$MatchPayload<ExtArgs>[]
      matchesAsB: Prisma.$MatchPayload<ExtArgs>[]
      matchInteractions: Prisma.$MatchInteractionPayload<ExtArgs>[]
      badges: Prisma.$UserBadgePayload<ExtArgs>[]
      feedbackGiven: Prisma.$CollaborationFeedbackPayload<ExtArgs>[]
      feedbackReceived: Prisma.$CollaborationFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string | null
      bio: string | null
      avatarUrl: string | null
      githubUrl: string | null
      linkedinUrl: string | null
      portfolioUrl: string | null
      experienceLevel: string | null
      timezone: string | null
      availabilityHours: number | null
      workStyle: string | null
      commsPref: string | null
      values: string[]
      isOnboarded: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    offers<T extends User$offersArgs<ExtArgs> = {}>(args?: Subset<T, User$offersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findMany"> | Null>
    needs<T extends User$needsArgs<ExtArgs> = {}>(args?: Subset<T, User$needsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findMany"> | Null>
    matchPreferences<T extends User$matchPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$matchPreferencesArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    projectInterests<T extends User$projectInterestsArgs<ExtArgs> = {}>(args?: Subset<T, User$projectInterestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "findMany"> | Null>
    collaborationPrefs<T extends User$collaborationPrefsArgs<ExtArgs> = {}>(args?: Subset<T, User$collaborationPrefsArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    matchesAsA<T extends User$matchesAsAArgs<ExtArgs> = {}>(args?: Subset<T, User$matchesAsAArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    matchesAsB<T extends User$matchesAsBArgs<ExtArgs> = {}>(args?: Subset<T, User$matchesAsBArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany"> | Null>
    matchInteractions<T extends User$matchInteractionsArgs<ExtArgs> = {}>(args?: Subset<T, User$matchInteractionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findMany"> | Null>
    badges<T extends User$badgesArgs<ExtArgs> = {}>(args?: Subset<T, User$badgesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany"> | Null>
    feedbackGiven<T extends User$feedbackGivenArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackGivenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    feedbackReceived<T extends User$feedbackReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbackReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly githubUrl: FieldRef<"User", 'String'>
    readonly linkedinUrl: FieldRef<"User", 'String'>
    readonly portfolioUrl: FieldRef<"User", 'String'>
    readonly experienceLevel: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly availabilityHours: FieldRef<"User", 'Int'>
    readonly workStyle: FieldRef<"User", 'String'>
    readonly commsPref: FieldRef<"User", 'String'>
    readonly values: FieldRef<"User", 'String[]'>
    readonly isOnboarded: FieldRef<"User", 'Boolean'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.offers
   */
  export type User$offersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    where?: UserOfferWhereInput
    orderBy?: UserOfferOrderByWithRelationInput | UserOfferOrderByWithRelationInput[]
    cursor?: UserOfferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserOfferScalarFieldEnum | UserOfferScalarFieldEnum[]
  }

  /**
   * User.needs
   */
  export type User$needsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    where?: UserNeedWhereInput
    orderBy?: UserNeedOrderByWithRelationInput | UserNeedOrderByWithRelationInput[]
    cursor?: UserNeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNeedScalarFieldEnum | UserNeedScalarFieldEnum[]
  }

  /**
   * User.matchPreferences
   */
  export type User$matchPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    where?: MatchPreferencesWhereInput
  }

  /**
   * User.projectInterests
   */
  export type User$projectInterestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    where?: ProjectInterestWhereInput
    orderBy?: ProjectInterestOrderByWithRelationInput | ProjectInterestOrderByWithRelationInput[]
    cursor?: ProjectInterestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectInterestScalarFieldEnum | ProjectInterestScalarFieldEnum[]
  }

  /**
   * User.collaborationPrefs
   */
  export type User$collaborationPrefsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    where?: CollaborationPreferencesWhereInput
  }

  /**
   * User.matchesAsA
   */
  export type User$matchesAsAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.matchesAsB
   */
  export type User$matchesAsBArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * User.matchInteractions
   */
  export type User$matchInteractionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    where?: MatchInteractionWhereInput
    orderBy?: MatchInteractionOrderByWithRelationInput | MatchInteractionOrderByWithRelationInput[]
    cursor?: MatchInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchInteractionScalarFieldEnum | MatchInteractionScalarFieldEnum[]
  }

  /**
   * User.badges
   */
  export type User$badgesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * User.feedbackGiven
   */
  export type User$feedbackGivenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    where?: CollaborationFeedbackWhereInput
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    cursor?: CollaborationFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollaborationFeedbackScalarFieldEnum | CollaborationFeedbackScalarFieldEnum[]
  }

  /**
   * User.feedbackReceived
   */
  export type User$feedbackReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    where?: CollaborationFeedbackWhereInput
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    cursor?: CollaborationFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollaborationFeedbackScalarFieldEnum | CollaborationFeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Skill
   */

  export type AggregateSkill = {
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  export type SkillAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillSumAggregateOutputType = {
    id: number | null
  }

  export type SkillMinAggregateOutputType = {
    id: number | null
    name: string | null
    category: string | null
    createdAt: Date | null
  }

  export type SkillMaxAggregateOutputType = {
    id: number | null
    name: string | null
    category: string | null
    createdAt: Date | null
  }

  export type SkillCountAggregateOutputType = {
    id: number
    name: number
    category: number
    createdAt: number
    _all: number
  }


  export type SkillAvgAggregateInputType = {
    id?: true
  }

  export type SkillSumAggregateInputType = {
    id?: true
  }

  export type SkillMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    createdAt?: true
  }

  export type SkillMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    createdAt?: true
  }

  export type SkillCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    createdAt?: true
    _all?: true
  }

  export type SkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skill to aggregate.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMaxAggregateInputType
  }

  export type GetSkillAggregateType<T extends SkillAggregateArgs> = {
        [P in keyof T & keyof AggregateSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkill[P]>
      : GetScalarType<T[P], AggregateSkill[P]>
  }




  export type SkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillWhereInput
    orderBy?: SkillOrderByWithAggregationInput | SkillOrderByWithAggregationInput[]
    by: SkillScalarFieldEnum[] | SkillScalarFieldEnum
    having?: SkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillCountAggregateInputType | true
    _avg?: SkillAvgAggregateInputType
    _sum?: SkillSumAggregateInputType
    _min?: SkillMinAggregateInputType
    _max?: SkillMaxAggregateInputType
  }

  export type SkillGroupByOutputType = {
    id: number
    name: string
    category: string
    createdAt: Date
    _count: SkillCountAggregateOutputType | null
    _avg: SkillAvgAggregateOutputType | null
    _sum: SkillSumAggregateOutputType | null
    _min: SkillMinAggregateOutputType | null
    _max: SkillMaxAggregateOutputType | null
  }

  type GetSkillGroupByPayload<T extends SkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillGroupByOutputType[P]>
            : GetScalarType<T[P], SkillGroupByOutputType[P]>
        }
      >
    >


  export type SkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    createdAt?: boolean
    offers?: boolean | Skill$offersArgs<ExtArgs>
    needs?: boolean | Skill$needsArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["skill"]>

  export type SkillSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    createdAt?: boolean
  }

  export type SkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    offers?: boolean | Skill$offersArgs<ExtArgs>
    needs?: boolean | Skill$needsArgs<ExtArgs>
    _count?: boolean | SkillCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SkillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Skill"
    objects: {
      offers: Prisma.$UserOfferPayload<ExtArgs>[]
      needs: Prisma.$UserNeedPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      category: string
      createdAt: Date
    }, ExtArgs["result"]["skill"]>
    composites: {}
  }

  type SkillGetPayload<S extends boolean | null | undefined | SkillDefaultArgs> = $Result.GetResult<Prisma.$SkillPayload, S>

  type SkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SkillFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SkillCountAggregateInputType | true
    }

  export interface SkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skill'], meta: { name: 'Skill' } }
    /**
     * Find zero or one Skill that matches the filter.
     * @param {SkillFindUniqueArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillFindUniqueArgs>(args: SelectSubset<T, SkillFindUniqueArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Skill that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SkillFindUniqueOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Skill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillFindFirstArgs>(args?: SelectSubset<T, SkillFindFirstArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Skill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindFirstOrThrowArgs} args - Arguments to find a Skill
     * @example
     * // Get one Skill
     * const skill = await prisma.skill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skill.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillWithIdOnly = await prisma.skill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillFindManyArgs>(args?: SelectSubset<T, SkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Skill.
     * @param {SkillCreateArgs} args - Arguments to create a Skill.
     * @example
     * // Create one Skill
     * const Skill = await prisma.skill.create({
     *   data: {
     *     // ... data to create a Skill
     *   }
     * })
     * 
     */
    create<T extends SkillCreateArgs>(args: SelectSubset<T, SkillCreateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Skills.
     * @param {SkillCreateManyArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillCreateManyArgs>(args?: SelectSubset<T, SkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Skills and returns the data saved in the database.
     * @param {SkillCreateManyAndReturnArgs} args - Arguments to create many Skills.
     * @example
     * // Create many Skills
     * const skill = await prisma.skill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Skills and only return the `id`
     * const skillWithIdOnly = await prisma.skill.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SkillCreateManyAndReturnArgs>(args?: SelectSubset<T, SkillCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Skill.
     * @param {SkillDeleteArgs} args - Arguments to delete one Skill.
     * @example
     * // Delete one Skill
     * const Skill = await prisma.skill.delete({
     *   where: {
     *     // ... filter to delete one Skill
     *   }
     * })
     * 
     */
    delete<T extends SkillDeleteArgs>(args: SelectSubset<T, SkillDeleteArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Skill.
     * @param {SkillUpdateArgs} args - Arguments to update one Skill.
     * @example
     * // Update one Skill
     * const skill = await prisma.skill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillUpdateArgs>(args: SelectSubset<T, SkillUpdateArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Skills.
     * @param {SkillDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDeleteManyArgs>(args?: SelectSubset<T, SkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skill = await prisma.skill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillUpdateManyArgs>(args: SelectSubset<T, SkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Skill.
     * @param {SkillUpsertArgs} args - Arguments to update or create a Skill.
     * @example
     * // Update or create a Skill
     * const skill = await prisma.skill.upsert({
     *   create: {
     *     // ... data to create a Skill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skill we want to update
     *   }
     * })
     */
    upsert<T extends SkillUpsertArgs>(args: SelectSubset<T, SkillUpsertArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skill.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillCountArgs>(
      args?: Subset<T, SkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillAggregateArgs>(args: Subset<T, SkillAggregateArgs>): Prisma.PrismaPromise<GetSkillAggregateType<T>>

    /**
     * Group by Skill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillGroupByArgs['orderBy'] }
        : { orderBy?: SkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Skill model
   */
  readonly fields: SkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    offers<T extends Skill$offersArgs<ExtArgs> = {}>(args?: Subset<T, Skill$offersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findMany"> | Null>
    needs<T extends Skill$needsArgs<ExtArgs> = {}>(args?: Subset<T, Skill$needsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Skill model
   */ 
  interface SkillFieldRefs {
    readonly id: FieldRef<"Skill", 'Int'>
    readonly name: FieldRef<"Skill", 'String'>
    readonly category: FieldRef<"Skill", 'String'>
    readonly createdAt: FieldRef<"Skill", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Skill findUnique
   */
  export type SkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findUniqueOrThrow
   */
  export type SkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill findFirst
   */
  export type SkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findFirstOrThrow
   */
  export type SkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skill to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     */
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill findMany
   */
  export type SkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter, which Skills to fetch.
     */
    where?: SkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     */
    orderBy?: SkillOrderByWithRelationInput | SkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     */
    cursor?: SkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     */
    skip?: number
    distinct?: SkillScalarFieldEnum | SkillScalarFieldEnum[]
  }

  /**
   * Skill create
   */
  export type SkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to create a Skill.
     */
    data: XOR<SkillCreateInput, SkillUncheckedCreateInput>
  }

  /**
   * Skill createMany
   */
  export type SkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill createManyAndReturn
   */
  export type SkillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Skills.
     */
    data: SkillCreateManyInput | SkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Skill update
   */
  export type SkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The data needed to update a Skill.
     */
    data: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
    /**
     * Choose, which Skill to update.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill updateMany
   */
  export type SkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Skills.
     */
    data: XOR<SkillUpdateManyMutationInput, SkillUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     */
    where?: SkillWhereInput
  }

  /**
   * Skill upsert
   */
  export type SkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * The filter to search for the Skill to update in case it exists.
     */
    where: SkillWhereUniqueInput
    /**
     * In case the Skill found by the `where` argument doesn't exist, create a new Skill with this data.
     */
    create: XOR<SkillCreateInput, SkillUncheckedCreateInput>
    /**
     * In case the Skill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillUpdateInput, SkillUncheckedUpdateInput>
  }

  /**
   * Skill delete
   */
  export type SkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
    /**
     * Filter which Skill to delete.
     */
    where: SkillWhereUniqueInput
  }

  /**
   * Skill deleteMany
   */
  export type SkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Skills to delete
     */
    where?: SkillWhereInput
  }

  /**
   * Skill.offers
   */
  export type Skill$offersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    where?: UserOfferWhereInput
    orderBy?: UserOfferOrderByWithRelationInput | UserOfferOrderByWithRelationInput[]
    cursor?: UserOfferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserOfferScalarFieldEnum | UserOfferScalarFieldEnum[]
  }

  /**
   * Skill.needs
   */
  export type Skill$needsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    where?: UserNeedWhereInput
    orderBy?: UserNeedOrderByWithRelationInput | UserNeedOrderByWithRelationInput[]
    cursor?: UserNeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserNeedScalarFieldEnum | UserNeedScalarFieldEnum[]
  }

  /**
   * Skill without action
   */
  export type SkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Skill
     */
    select?: SkillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillInclude<ExtArgs> | null
  }


  /**
   * Model UserOffer
   */

  export type AggregateUserOffer = {
    _count: UserOfferCountAggregateOutputType | null
    _avg: UserOfferAvgAggregateOutputType | null
    _sum: UserOfferSumAggregateOutputType | null
    _min: UserOfferMinAggregateOutputType | null
    _max: UserOfferMaxAggregateOutputType | null
  }

  export type UserOfferAvgAggregateOutputType = {
    skillId: number | null
    proficiency: number | null
  }

  export type UserOfferSumAggregateOutputType = {
    skillId: number | null
    proficiency: number | null
  }

  export type UserOfferMinAggregateOutputType = {
    userId: string | null
    skillId: number | null
    proficiency: number | null
    createdAt: Date | null
  }

  export type UserOfferMaxAggregateOutputType = {
    userId: string | null
    skillId: number | null
    proficiency: number | null
    createdAt: Date | null
  }

  export type UserOfferCountAggregateOutputType = {
    userId: number
    skillId: number
    proficiency: number
    createdAt: number
    _all: number
  }


  export type UserOfferAvgAggregateInputType = {
    skillId?: true
    proficiency?: true
  }

  export type UserOfferSumAggregateInputType = {
    skillId?: true
    proficiency?: true
  }

  export type UserOfferMinAggregateInputType = {
    userId?: true
    skillId?: true
    proficiency?: true
    createdAt?: true
  }

  export type UserOfferMaxAggregateInputType = {
    userId?: true
    skillId?: true
    proficiency?: true
    createdAt?: true
  }

  export type UserOfferCountAggregateInputType = {
    userId?: true
    skillId?: true
    proficiency?: true
    createdAt?: true
    _all?: true
  }

  export type UserOfferAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserOffer to aggregate.
     */
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
     */
    orderBy?: UserOfferOrderByWithRelationInput | UserOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserOffers
    **/
    _count?: true | UserOfferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserOfferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserOfferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserOfferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserOfferMaxAggregateInputType
  }

  export type GetUserOfferAggregateType<T extends UserOfferAggregateArgs> = {
        [P in keyof T & keyof AggregateUserOffer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserOffer[P]>
      : GetScalarType<T[P], AggregateUserOffer[P]>
  }




  export type UserOfferGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserOfferWhereInput
    orderBy?: UserOfferOrderByWithAggregationInput | UserOfferOrderByWithAggregationInput[]
    by: UserOfferScalarFieldEnum[] | UserOfferScalarFieldEnum
    having?: UserOfferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserOfferCountAggregateInputType | true
    _avg?: UserOfferAvgAggregateInputType
    _sum?: UserOfferSumAggregateInputType
    _min?: UserOfferMinAggregateInputType
    _max?: UserOfferMaxAggregateInputType
  }

  export type UserOfferGroupByOutputType = {
    userId: string
    skillId: number
    proficiency: number
    createdAt: Date
    _count: UserOfferCountAggregateOutputType | null
    _avg: UserOfferAvgAggregateOutputType | null
    _sum: UserOfferSumAggregateOutputType | null
    _min: UserOfferMinAggregateOutputType | null
    _max: UserOfferMaxAggregateOutputType | null
  }

  type GetUserOfferGroupByPayload<T extends UserOfferGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserOfferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserOfferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserOfferGroupByOutputType[P]>
            : GetScalarType<T[P], UserOfferGroupByOutputType[P]>
        }
      >
    >


  export type UserOfferSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    skillId?: boolean
    proficiency?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userOffer"]>

  export type UserOfferSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    skillId?: boolean
    proficiency?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userOffer"]>

  export type UserOfferSelectScalar = {
    userId?: boolean
    skillId?: boolean
    proficiency?: boolean
    createdAt?: boolean
  }

  export type UserOfferInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type UserOfferIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }

  export type $UserOfferPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserOffer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      skill: Prisma.$SkillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      skillId: number
      proficiency: number
      createdAt: Date
    }, ExtArgs["result"]["userOffer"]>
    composites: {}
  }

  type UserOfferGetPayload<S extends boolean | null | undefined | UserOfferDefaultArgs> = $Result.GetResult<Prisma.$UserOfferPayload, S>

  type UserOfferCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserOfferFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserOfferCountAggregateInputType | true
    }

  export interface UserOfferDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserOffer'], meta: { name: 'UserOffer' } }
    /**
     * Find zero or one UserOffer that matches the filter.
     * @param {UserOfferFindUniqueArgs} args - Arguments to find a UserOffer
     * @example
     * // Get one UserOffer
     * const userOffer = await prisma.userOffer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserOfferFindUniqueArgs>(args: SelectSubset<T, UserOfferFindUniqueArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserOffer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserOfferFindUniqueOrThrowArgs} args - Arguments to find a UserOffer
     * @example
     * // Get one UserOffer
     * const userOffer = await prisma.userOffer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserOfferFindUniqueOrThrowArgs>(args: SelectSubset<T, UserOfferFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserOffer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferFindFirstArgs} args - Arguments to find a UserOffer
     * @example
     * // Get one UserOffer
     * const userOffer = await prisma.userOffer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserOfferFindFirstArgs>(args?: SelectSubset<T, UserOfferFindFirstArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserOffer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferFindFirstOrThrowArgs} args - Arguments to find a UserOffer
     * @example
     * // Get one UserOffer
     * const userOffer = await prisma.userOffer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserOfferFindFirstOrThrowArgs>(args?: SelectSubset<T, UserOfferFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserOffers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserOffers
     * const userOffers = await prisma.userOffer.findMany()
     * 
     * // Get first 10 UserOffers
     * const userOffers = await prisma.userOffer.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userOfferWithUserIdOnly = await prisma.userOffer.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserOfferFindManyArgs>(args?: SelectSubset<T, UserOfferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserOffer.
     * @param {UserOfferCreateArgs} args - Arguments to create a UserOffer.
     * @example
     * // Create one UserOffer
     * const UserOffer = await prisma.userOffer.create({
     *   data: {
     *     // ... data to create a UserOffer
     *   }
     * })
     * 
     */
    create<T extends UserOfferCreateArgs>(args: SelectSubset<T, UserOfferCreateArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserOffers.
     * @param {UserOfferCreateManyArgs} args - Arguments to create many UserOffers.
     * @example
     * // Create many UserOffers
     * const userOffer = await prisma.userOffer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserOfferCreateManyArgs>(args?: SelectSubset<T, UserOfferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserOffers and returns the data saved in the database.
     * @param {UserOfferCreateManyAndReturnArgs} args - Arguments to create many UserOffers.
     * @example
     * // Create many UserOffers
     * const userOffer = await prisma.userOffer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserOffers and only return the `userId`
     * const userOfferWithUserIdOnly = await prisma.userOffer.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserOfferCreateManyAndReturnArgs>(args?: SelectSubset<T, UserOfferCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserOffer.
     * @param {UserOfferDeleteArgs} args - Arguments to delete one UserOffer.
     * @example
     * // Delete one UserOffer
     * const UserOffer = await prisma.userOffer.delete({
     *   where: {
     *     // ... filter to delete one UserOffer
     *   }
     * })
     * 
     */
    delete<T extends UserOfferDeleteArgs>(args: SelectSubset<T, UserOfferDeleteArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserOffer.
     * @param {UserOfferUpdateArgs} args - Arguments to update one UserOffer.
     * @example
     * // Update one UserOffer
     * const userOffer = await prisma.userOffer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserOfferUpdateArgs>(args: SelectSubset<T, UserOfferUpdateArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserOffers.
     * @param {UserOfferDeleteManyArgs} args - Arguments to filter UserOffers to delete.
     * @example
     * // Delete a few UserOffers
     * const { count } = await prisma.userOffer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserOfferDeleteManyArgs>(args?: SelectSubset<T, UserOfferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserOffers
     * const userOffer = await prisma.userOffer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserOfferUpdateManyArgs>(args: SelectSubset<T, UserOfferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserOffer.
     * @param {UserOfferUpsertArgs} args - Arguments to update or create a UserOffer.
     * @example
     * // Update or create a UserOffer
     * const userOffer = await prisma.userOffer.upsert({
     *   create: {
     *     // ... data to create a UserOffer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserOffer we want to update
     *   }
     * })
     */
    upsert<T extends UserOfferUpsertArgs>(args: SelectSubset<T, UserOfferUpsertArgs<ExtArgs>>): Prisma__UserOfferClient<$Result.GetResult<Prisma.$UserOfferPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserOffers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferCountArgs} args - Arguments to filter UserOffers to count.
     * @example
     * // Count the number of UserOffers
     * const count = await prisma.userOffer.count({
     *   where: {
     *     // ... the filter for the UserOffers we want to count
     *   }
     * })
    **/
    count<T extends UserOfferCountArgs>(
      args?: Subset<T, UserOfferCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserOfferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserOffer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserOfferAggregateArgs>(args: Subset<T, UserOfferAggregateArgs>): Prisma.PrismaPromise<GetUserOfferAggregateType<T>>

    /**
     * Group by UserOffer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOfferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserOfferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserOfferGroupByArgs['orderBy'] }
        : { orderBy?: UserOfferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserOfferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserOfferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserOffer model
   */
  readonly fields: UserOfferFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserOffer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserOfferClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    skill<T extends SkillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillDefaultArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserOffer model
   */ 
  interface UserOfferFieldRefs {
    readonly userId: FieldRef<"UserOffer", 'String'>
    readonly skillId: FieldRef<"UserOffer", 'Int'>
    readonly proficiency: FieldRef<"UserOffer", 'Int'>
    readonly createdAt: FieldRef<"UserOffer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserOffer findUnique
   */
  export type UserOfferFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * Filter, which UserOffer to fetch.
     */
    where: UserOfferWhereUniqueInput
  }

  /**
   * UserOffer findUniqueOrThrow
   */
  export type UserOfferFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * Filter, which UserOffer to fetch.
     */
    where: UserOfferWhereUniqueInput
  }

  /**
   * UserOffer findFirst
   */
  export type UserOfferFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * Filter, which UserOffer to fetch.
     */
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
     */
    orderBy?: UserOfferOrderByWithRelationInput | UserOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserOffers.
     */
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserOffers.
     */
    distinct?: UserOfferScalarFieldEnum | UserOfferScalarFieldEnum[]
  }

  /**
   * UserOffer findFirstOrThrow
   */
  export type UserOfferFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * Filter, which UserOffer to fetch.
     */
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
     */
    orderBy?: UserOfferOrderByWithRelationInput | UserOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserOffers.
     */
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserOffers.
     */
    distinct?: UserOfferScalarFieldEnum | UserOfferScalarFieldEnum[]
  }

  /**
   * UserOffer findMany
   */
  export type UserOfferFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * Filter, which UserOffers to fetch.
     */
    where?: UserOfferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserOffers to fetch.
     */
    orderBy?: UserOfferOrderByWithRelationInput | UserOfferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserOffers.
     */
    cursor?: UserOfferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserOffers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserOffers.
     */
    skip?: number
    distinct?: UserOfferScalarFieldEnum | UserOfferScalarFieldEnum[]
  }

  /**
   * UserOffer create
   */
  export type UserOfferCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * The data needed to create a UserOffer.
     */
    data: XOR<UserOfferCreateInput, UserOfferUncheckedCreateInput>
  }

  /**
   * UserOffer createMany
   */
  export type UserOfferCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserOffers.
     */
    data: UserOfferCreateManyInput | UserOfferCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserOffer createManyAndReturn
   */
  export type UserOfferCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserOffers.
     */
    data: UserOfferCreateManyInput | UserOfferCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserOffer update
   */
  export type UserOfferUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * The data needed to update a UserOffer.
     */
    data: XOR<UserOfferUpdateInput, UserOfferUncheckedUpdateInput>
    /**
     * Choose, which UserOffer to update.
     */
    where: UserOfferWhereUniqueInput
  }

  /**
   * UserOffer updateMany
   */
  export type UserOfferUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserOffers.
     */
    data: XOR<UserOfferUpdateManyMutationInput, UserOfferUncheckedUpdateManyInput>
    /**
     * Filter which UserOffers to update
     */
    where?: UserOfferWhereInput
  }

  /**
   * UserOffer upsert
   */
  export type UserOfferUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * The filter to search for the UserOffer to update in case it exists.
     */
    where: UserOfferWhereUniqueInput
    /**
     * In case the UserOffer found by the `where` argument doesn't exist, create a new UserOffer with this data.
     */
    create: XOR<UserOfferCreateInput, UserOfferUncheckedCreateInput>
    /**
     * In case the UserOffer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserOfferUpdateInput, UserOfferUncheckedUpdateInput>
  }

  /**
   * UserOffer delete
   */
  export type UserOfferDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
    /**
     * Filter which UserOffer to delete.
     */
    where: UserOfferWhereUniqueInput
  }

  /**
   * UserOffer deleteMany
   */
  export type UserOfferDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserOffers to delete
     */
    where?: UserOfferWhereInput
  }

  /**
   * UserOffer without action
   */
  export type UserOfferDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserOffer
     */
    select?: UserOfferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserOfferInclude<ExtArgs> | null
  }


  /**
   * Model UserNeed
   */

  export type AggregateUserNeed = {
    _count: UserNeedCountAggregateOutputType | null
    _avg: UserNeedAvgAggregateOutputType | null
    _sum: UserNeedSumAggregateOutputType | null
    _min: UserNeedMinAggregateOutputType | null
    _max: UserNeedMaxAggregateOutputType | null
  }

  export type UserNeedAvgAggregateOutputType = {
    skillId: number | null
    priority: number | null
  }

  export type UserNeedSumAggregateOutputType = {
    skillId: number | null
    priority: number | null
  }

  export type UserNeedMinAggregateOutputType = {
    userId: string | null
    skillId: number | null
    mustHave: boolean | null
    priority: number | null
    createdAt: Date | null
  }

  export type UserNeedMaxAggregateOutputType = {
    userId: string | null
    skillId: number | null
    mustHave: boolean | null
    priority: number | null
    createdAt: Date | null
  }

  export type UserNeedCountAggregateOutputType = {
    userId: number
    skillId: number
    mustHave: number
    priority: number
    createdAt: number
    _all: number
  }


  export type UserNeedAvgAggregateInputType = {
    skillId?: true
    priority?: true
  }

  export type UserNeedSumAggregateInputType = {
    skillId?: true
    priority?: true
  }

  export type UserNeedMinAggregateInputType = {
    userId?: true
    skillId?: true
    mustHave?: true
    priority?: true
    createdAt?: true
  }

  export type UserNeedMaxAggregateInputType = {
    userId?: true
    skillId?: true
    mustHave?: true
    priority?: true
    createdAt?: true
  }

  export type UserNeedCountAggregateInputType = {
    userId?: true
    skillId?: true
    mustHave?: true
    priority?: true
    createdAt?: true
    _all?: true
  }

  export type UserNeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNeed to aggregate.
     */
    where?: UserNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNeeds to fetch.
     */
    orderBy?: UserNeedOrderByWithRelationInput | UserNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserNeeds
    **/
    _count?: true | UserNeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserNeedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserNeedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserNeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserNeedMaxAggregateInputType
  }

  export type GetUserNeedAggregateType<T extends UserNeedAggregateArgs> = {
        [P in keyof T & keyof AggregateUserNeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserNeed[P]>
      : GetScalarType<T[P], AggregateUserNeed[P]>
  }




  export type UserNeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserNeedWhereInput
    orderBy?: UserNeedOrderByWithAggregationInput | UserNeedOrderByWithAggregationInput[]
    by: UserNeedScalarFieldEnum[] | UserNeedScalarFieldEnum
    having?: UserNeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserNeedCountAggregateInputType | true
    _avg?: UserNeedAvgAggregateInputType
    _sum?: UserNeedSumAggregateInputType
    _min?: UserNeedMinAggregateInputType
    _max?: UserNeedMaxAggregateInputType
  }

  export type UserNeedGroupByOutputType = {
    userId: string
    skillId: number
    mustHave: boolean
    priority: number
    createdAt: Date
    _count: UserNeedCountAggregateOutputType | null
    _avg: UserNeedAvgAggregateOutputType | null
    _sum: UserNeedSumAggregateOutputType | null
    _min: UserNeedMinAggregateOutputType | null
    _max: UserNeedMaxAggregateOutputType | null
  }

  type GetUserNeedGroupByPayload<T extends UserNeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserNeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserNeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserNeedGroupByOutputType[P]>
            : GetScalarType<T[P], UserNeedGroupByOutputType[P]>
        }
      >
    >


  export type UserNeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    skillId?: boolean
    mustHave?: boolean
    priority?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNeed"]>

  export type UserNeedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    skillId?: boolean
    mustHave?: boolean
    priority?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userNeed"]>

  export type UserNeedSelectScalar = {
    userId?: boolean
    skillId?: boolean
    mustHave?: boolean
    priority?: boolean
    createdAt?: boolean
  }

  export type UserNeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }
  export type UserNeedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    skill?: boolean | SkillDefaultArgs<ExtArgs>
  }

  export type $UserNeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserNeed"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      skill: Prisma.$SkillPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      skillId: number
      mustHave: boolean
      priority: number
      createdAt: Date
    }, ExtArgs["result"]["userNeed"]>
    composites: {}
  }

  type UserNeedGetPayload<S extends boolean | null | undefined | UserNeedDefaultArgs> = $Result.GetResult<Prisma.$UserNeedPayload, S>

  type UserNeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserNeedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserNeedCountAggregateInputType | true
    }

  export interface UserNeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserNeed'], meta: { name: 'UserNeed' } }
    /**
     * Find zero or one UserNeed that matches the filter.
     * @param {UserNeedFindUniqueArgs} args - Arguments to find a UserNeed
     * @example
     * // Get one UserNeed
     * const userNeed = await prisma.userNeed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserNeedFindUniqueArgs>(args: SelectSubset<T, UserNeedFindUniqueArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserNeed that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserNeedFindUniqueOrThrowArgs} args - Arguments to find a UserNeed
     * @example
     * // Get one UserNeed
     * const userNeed = await prisma.userNeed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserNeedFindUniqueOrThrowArgs>(args: SelectSubset<T, UserNeedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserNeed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedFindFirstArgs} args - Arguments to find a UserNeed
     * @example
     * // Get one UserNeed
     * const userNeed = await prisma.userNeed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserNeedFindFirstArgs>(args?: SelectSubset<T, UserNeedFindFirstArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserNeed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedFindFirstOrThrowArgs} args - Arguments to find a UserNeed
     * @example
     * // Get one UserNeed
     * const userNeed = await prisma.userNeed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserNeedFindFirstOrThrowArgs>(args?: SelectSubset<T, UserNeedFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserNeeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserNeeds
     * const userNeeds = await prisma.userNeed.findMany()
     * 
     * // Get first 10 UserNeeds
     * const userNeeds = await prisma.userNeed.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userNeedWithUserIdOnly = await prisma.userNeed.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserNeedFindManyArgs>(args?: SelectSubset<T, UserNeedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserNeed.
     * @param {UserNeedCreateArgs} args - Arguments to create a UserNeed.
     * @example
     * // Create one UserNeed
     * const UserNeed = await prisma.userNeed.create({
     *   data: {
     *     // ... data to create a UserNeed
     *   }
     * })
     * 
     */
    create<T extends UserNeedCreateArgs>(args: SelectSubset<T, UserNeedCreateArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserNeeds.
     * @param {UserNeedCreateManyArgs} args - Arguments to create many UserNeeds.
     * @example
     * // Create many UserNeeds
     * const userNeed = await prisma.userNeed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserNeedCreateManyArgs>(args?: SelectSubset<T, UserNeedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserNeeds and returns the data saved in the database.
     * @param {UserNeedCreateManyAndReturnArgs} args - Arguments to create many UserNeeds.
     * @example
     * // Create many UserNeeds
     * const userNeed = await prisma.userNeed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserNeeds and only return the `userId`
     * const userNeedWithUserIdOnly = await prisma.userNeed.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserNeedCreateManyAndReturnArgs>(args?: SelectSubset<T, UserNeedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserNeed.
     * @param {UserNeedDeleteArgs} args - Arguments to delete one UserNeed.
     * @example
     * // Delete one UserNeed
     * const UserNeed = await prisma.userNeed.delete({
     *   where: {
     *     // ... filter to delete one UserNeed
     *   }
     * })
     * 
     */
    delete<T extends UserNeedDeleteArgs>(args: SelectSubset<T, UserNeedDeleteArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserNeed.
     * @param {UserNeedUpdateArgs} args - Arguments to update one UserNeed.
     * @example
     * // Update one UserNeed
     * const userNeed = await prisma.userNeed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserNeedUpdateArgs>(args: SelectSubset<T, UserNeedUpdateArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserNeeds.
     * @param {UserNeedDeleteManyArgs} args - Arguments to filter UserNeeds to delete.
     * @example
     * // Delete a few UserNeeds
     * const { count } = await prisma.userNeed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserNeedDeleteManyArgs>(args?: SelectSubset<T, UserNeedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserNeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserNeeds
     * const userNeed = await prisma.userNeed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserNeedUpdateManyArgs>(args: SelectSubset<T, UserNeedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserNeed.
     * @param {UserNeedUpsertArgs} args - Arguments to update or create a UserNeed.
     * @example
     * // Update or create a UserNeed
     * const userNeed = await prisma.userNeed.upsert({
     *   create: {
     *     // ... data to create a UserNeed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserNeed we want to update
     *   }
     * })
     */
    upsert<T extends UserNeedUpsertArgs>(args: SelectSubset<T, UserNeedUpsertArgs<ExtArgs>>): Prisma__UserNeedClient<$Result.GetResult<Prisma.$UserNeedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserNeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedCountArgs} args - Arguments to filter UserNeeds to count.
     * @example
     * // Count the number of UserNeeds
     * const count = await prisma.userNeed.count({
     *   where: {
     *     // ... the filter for the UserNeeds we want to count
     *   }
     * })
    **/
    count<T extends UserNeedCountArgs>(
      args?: Subset<T, UserNeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserNeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserNeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserNeedAggregateArgs>(args: Subset<T, UserNeedAggregateArgs>): Prisma.PrismaPromise<GetUserNeedAggregateType<T>>

    /**
     * Group by UserNeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserNeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserNeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserNeedGroupByArgs['orderBy'] }
        : { orderBy?: UserNeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserNeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserNeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserNeed model
   */
  readonly fields: UserNeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserNeed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserNeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    skill<T extends SkillDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillDefaultArgs<ExtArgs>>): Prisma__SkillClient<$Result.GetResult<Prisma.$SkillPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserNeed model
   */ 
  interface UserNeedFieldRefs {
    readonly userId: FieldRef<"UserNeed", 'String'>
    readonly skillId: FieldRef<"UserNeed", 'Int'>
    readonly mustHave: FieldRef<"UserNeed", 'Boolean'>
    readonly priority: FieldRef<"UserNeed", 'Int'>
    readonly createdAt: FieldRef<"UserNeed", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserNeed findUnique
   */
  export type UserNeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * Filter, which UserNeed to fetch.
     */
    where: UserNeedWhereUniqueInput
  }

  /**
   * UserNeed findUniqueOrThrow
   */
  export type UserNeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * Filter, which UserNeed to fetch.
     */
    where: UserNeedWhereUniqueInput
  }

  /**
   * UserNeed findFirst
   */
  export type UserNeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * Filter, which UserNeed to fetch.
     */
    where?: UserNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNeeds to fetch.
     */
    orderBy?: UserNeedOrderByWithRelationInput | UserNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNeeds.
     */
    cursor?: UserNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNeeds.
     */
    distinct?: UserNeedScalarFieldEnum | UserNeedScalarFieldEnum[]
  }

  /**
   * UserNeed findFirstOrThrow
   */
  export type UserNeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * Filter, which UserNeed to fetch.
     */
    where?: UserNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNeeds to fetch.
     */
    orderBy?: UserNeedOrderByWithRelationInput | UserNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserNeeds.
     */
    cursor?: UserNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserNeeds.
     */
    distinct?: UserNeedScalarFieldEnum | UserNeedScalarFieldEnum[]
  }

  /**
   * UserNeed findMany
   */
  export type UserNeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * Filter, which UserNeeds to fetch.
     */
    where?: UserNeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserNeeds to fetch.
     */
    orderBy?: UserNeedOrderByWithRelationInput | UserNeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserNeeds.
     */
    cursor?: UserNeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserNeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserNeeds.
     */
    skip?: number
    distinct?: UserNeedScalarFieldEnum | UserNeedScalarFieldEnum[]
  }

  /**
   * UserNeed create
   */
  export type UserNeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * The data needed to create a UserNeed.
     */
    data: XOR<UserNeedCreateInput, UserNeedUncheckedCreateInput>
  }

  /**
   * UserNeed createMany
   */
  export type UserNeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserNeeds.
     */
    data: UserNeedCreateManyInput | UserNeedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserNeed createManyAndReturn
   */
  export type UserNeedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserNeeds.
     */
    data: UserNeedCreateManyInput | UserNeedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserNeed update
   */
  export type UserNeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * The data needed to update a UserNeed.
     */
    data: XOR<UserNeedUpdateInput, UserNeedUncheckedUpdateInput>
    /**
     * Choose, which UserNeed to update.
     */
    where: UserNeedWhereUniqueInput
  }

  /**
   * UserNeed updateMany
   */
  export type UserNeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserNeeds.
     */
    data: XOR<UserNeedUpdateManyMutationInput, UserNeedUncheckedUpdateManyInput>
    /**
     * Filter which UserNeeds to update
     */
    where?: UserNeedWhereInput
  }

  /**
   * UserNeed upsert
   */
  export type UserNeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * The filter to search for the UserNeed to update in case it exists.
     */
    where: UserNeedWhereUniqueInput
    /**
     * In case the UserNeed found by the `where` argument doesn't exist, create a new UserNeed with this data.
     */
    create: XOR<UserNeedCreateInput, UserNeedUncheckedCreateInput>
    /**
     * In case the UserNeed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserNeedUpdateInput, UserNeedUncheckedUpdateInput>
  }

  /**
   * UserNeed delete
   */
  export type UserNeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
    /**
     * Filter which UserNeed to delete.
     */
    where: UserNeedWhereUniqueInput
  }

  /**
   * UserNeed deleteMany
   */
  export type UserNeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserNeeds to delete
     */
    where?: UserNeedWhereInput
  }

  /**
   * UserNeed without action
   */
  export type UserNeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserNeed
     */
    select?: UserNeedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserNeedInclude<ExtArgs> | null
  }


  /**
   * Model MatchPreferences
   */

  export type AggregateMatchPreferences = {
    _count: MatchPreferencesCountAggregateOutputType | null
    _avg: MatchPreferencesAvgAggregateOutputType | null
    _sum: MatchPreferencesSumAggregateOutputType | null
    _min: MatchPreferencesMinAggregateOutputType | null
    _max: MatchPreferencesMaxAggregateOutputType | null
  }

  export type MatchPreferencesAvgAggregateOutputType = {
    skillWeight: number | null
    availabilityWeight: number | null
    timezoneWeight: number | null
    collabStyleWeight: number | null
    personalityWeight: number | null
  }

  export type MatchPreferencesSumAggregateOutputType = {
    skillWeight: number | null
    availabilityWeight: number | null
    timezoneWeight: number | null
    collabStyleWeight: number | null
    personalityWeight: number | null
  }

  export type MatchPreferencesMinAggregateOutputType = {
    userId: string | null
    skillWeight: number | null
    availabilityWeight: number | null
    timezoneWeight: number | null
    collabStyleWeight: number | null
    personalityWeight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchPreferencesMaxAggregateOutputType = {
    userId: string | null
    skillWeight: number | null
    availabilityWeight: number | null
    timezoneWeight: number | null
    collabStyleWeight: number | null
    personalityWeight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchPreferencesCountAggregateOutputType = {
    userId: number
    skillWeight: number
    availabilityWeight: number
    timezoneWeight: number
    collabStyleWeight: number
    personalityWeight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchPreferencesAvgAggregateInputType = {
    skillWeight?: true
    availabilityWeight?: true
    timezoneWeight?: true
    collabStyleWeight?: true
    personalityWeight?: true
  }

  export type MatchPreferencesSumAggregateInputType = {
    skillWeight?: true
    availabilityWeight?: true
    timezoneWeight?: true
    collabStyleWeight?: true
    personalityWeight?: true
  }

  export type MatchPreferencesMinAggregateInputType = {
    userId?: true
    skillWeight?: true
    availabilityWeight?: true
    timezoneWeight?: true
    collabStyleWeight?: true
    personalityWeight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchPreferencesMaxAggregateInputType = {
    userId?: true
    skillWeight?: true
    availabilityWeight?: true
    timezoneWeight?: true
    collabStyleWeight?: true
    personalityWeight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchPreferencesCountAggregateInputType = {
    userId?: true
    skillWeight?: true
    availabilityWeight?: true
    timezoneWeight?: true
    collabStyleWeight?: true
    personalityWeight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchPreferences to aggregate.
     */
    where?: MatchPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchPreferences to fetch.
     */
    orderBy?: MatchPreferencesOrderByWithRelationInput | MatchPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchPreferences
    **/
    _count?: true | MatchPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchPreferencesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchPreferencesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchPreferencesMaxAggregateInputType
  }

  export type GetMatchPreferencesAggregateType<T extends MatchPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchPreferences[P]>
      : GetScalarType<T[P], AggregateMatchPreferences[P]>
  }




  export type MatchPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchPreferencesWhereInput
    orderBy?: MatchPreferencesOrderByWithAggregationInput | MatchPreferencesOrderByWithAggregationInput[]
    by: MatchPreferencesScalarFieldEnum[] | MatchPreferencesScalarFieldEnum
    having?: MatchPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchPreferencesCountAggregateInputType | true
    _avg?: MatchPreferencesAvgAggregateInputType
    _sum?: MatchPreferencesSumAggregateInputType
    _min?: MatchPreferencesMinAggregateInputType
    _max?: MatchPreferencesMaxAggregateInputType
  }

  export type MatchPreferencesGroupByOutputType = {
    userId: string
    skillWeight: number
    availabilityWeight: number
    timezoneWeight: number
    collabStyleWeight: number
    personalityWeight: number
    createdAt: Date
    updatedAt: Date
    _count: MatchPreferencesCountAggregateOutputType | null
    _avg: MatchPreferencesAvgAggregateOutputType | null
    _sum: MatchPreferencesSumAggregateOutputType | null
    _min: MatchPreferencesMinAggregateOutputType | null
    _max: MatchPreferencesMaxAggregateOutputType | null
  }

  type GetMatchPreferencesGroupByPayload<T extends MatchPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], MatchPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type MatchPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    skillWeight?: boolean
    availabilityWeight?: boolean
    timezoneWeight?: boolean
    collabStyleWeight?: boolean
    personalityWeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchPreferences"]>

  export type MatchPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    skillWeight?: boolean
    availabilityWeight?: boolean
    timezoneWeight?: boolean
    collabStyleWeight?: boolean
    personalityWeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchPreferences"]>

  export type MatchPreferencesSelectScalar = {
    userId?: boolean
    skillWeight?: boolean
    availabilityWeight?: boolean
    timezoneWeight?: boolean
    collabStyleWeight?: boolean
    personalityWeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchPreferences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      skillWeight: number
      availabilityWeight: number
      timezoneWeight: number
      collabStyleWeight: number
      personalityWeight: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["matchPreferences"]>
    composites: {}
  }

  type MatchPreferencesGetPayload<S extends boolean | null | undefined | MatchPreferencesDefaultArgs> = $Result.GetResult<Prisma.$MatchPreferencesPayload, S>

  type MatchPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchPreferencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchPreferencesCountAggregateInputType | true
    }

  export interface MatchPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchPreferences'], meta: { name: 'MatchPreferences' } }
    /**
     * Find zero or one MatchPreferences that matches the filter.
     * @param {MatchPreferencesFindUniqueArgs} args - Arguments to find a MatchPreferences
     * @example
     * // Get one MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchPreferencesFindUniqueArgs>(args: SelectSubset<T, MatchPreferencesFindUniqueArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MatchPreferences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchPreferencesFindUniqueOrThrowArgs} args - Arguments to find a MatchPreferences
     * @example
     * // Get one MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MatchPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesFindFirstArgs} args - Arguments to find a MatchPreferences
     * @example
     * // Get one MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchPreferencesFindFirstArgs>(args?: SelectSubset<T, MatchPreferencesFindFirstArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MatchPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesFindFirstOrThrowArgs} args - Arguments to find a MatchPreferences
     * @example
     * // Get one MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MatchPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.findMany()
     * 
     * // Get first 10 MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const matchPreferencesWithUserIdOnly = await prisma.matchPreferences.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends MatchPreferencesFindManyArgs>(args?: SelectSubset<T, MatchPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MatchPreferences.
     * @param {MatchPreferencesCreateArgs} args - Arguments to create a MatchPreferences.
     * @example
     * // Create one MatchPreferences
     * const MatchPreferences = await prisma.matchPreferences.create({
     *   data: {
     *     // ... data to create a MatchPreferences
     *   }
     * })
     * 
     */
    create<T extends MatchPreferencesCreateArgs>(args: SelectSubset<T, MatchPreferencesCreateArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MatchPreferences.
     * @param {MatchPreferencesCreateManyArgs} args - Arguments to create many MatchPreferences.
     * @example
     * // Create many MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchPreferencesCreateManyArgs>(args?: SelectSubset<T, MatchPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchPreferences and returns the data saved in the database.
     * @param {MatchPreferencesCreateManyAndReturnArgs} args - Arguments to create many MatchPreferences.
     * @example
     * // Create many MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchPreferences and only return the `userId`
     * const matchPreferencesWithUserIdOnly = await prisma.matchPreferences.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MatchPreferences.
     * @param {MatchPreferencesDeleteArgs} args - Arguments to delete one MatchPreferences.
     * @example
     * // Delete one MatchPreferences
     * const MatchPreferences = await prisma.matchPreferences.delete({
     *   where: {
     *     // ... filter to delete one MatchPreferences
     *   }
     * })
     * 
     */
    delete<T extends MatchPreferencesDeleteArgs>(args: SelectSubset<T, MatchPreferencesDeleteArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MatchPreferences.
     * @param {MatchPreferencesUpdateArgs} args - Arguments to update one MatchPreferences.
     * @example
     * // Update one MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchPreferencesUpdateArgs>(args: SelectSubset<T, MatchPreferencesUpdateArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MatchPreferences.
     * @param {MatchPreferencesDeleteManyArgs} args - Arguments to filter MatchPreferences to delete.
     * @example
     * // Delete a few MatchPreferences
     * const { count } = await prisma.matchPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchPreferencesDeleteManyArgs>(args?: SelectSubset<T, MatchPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchPreferencesUpdateManyArgs>(args: SelectSubset<T, MatchPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchPreferences.
     * @param {MatchPreferencesUpsertArgs} args - Arguments to update or create a MatchPreferences.
     * @example
     * // Update or create a MatchPreferences
     * const matchPreferences = await prisma.matchPreferences.upsert({
     *   create: {
     *     // ... data to create a MatchPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchPreferences we want to update
     *   }
     * })
     */
    upsert<T extends MatchPreferencesUpsertArgs>(args: SelectSubset<T, MatchPreferencesUpsertArgs<ExtArgs>>): Prisma__MatchPreferencesClient<$Result.GetResult<Prisma.$MatchPreferencesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MatchPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesCountArgs} args - Arguments to filter MatchPreferences to count.
     * @example
     * // Count the number of MatchPreferences
     * const count = await prisma.matchPreferences.count({
     *   where: {
     *     // ... the filter for the MatchPreferences we want to count
     *   }
     * })
    **/
    count<T extends MatchPreferencesCountArgs>(
      args?: Subset<T, MatchPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchPreferencesAggregateArgs>(args: Subset<T, MatchPreferencesAggregateArgs>): Prisma.PrismaPromise<GetMatchPreferencesAggregateType<T>>

    /**
     * Group by MatchPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: MatchPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchPreferences model
   */
  readonly fields: MatchPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchPreferences model
   */ 
  interface MatchPreferencesFieldRefs {
    readonly userId: FieldRef<"MatchPreferences", 'String'>
    readonly skillWeight: FieldRef<"MatchPreferences", 'Int'>
    readonly availabilityWeight: FieldRef<"MatchPreferences", 'Int'>
    readonly timezoneWeight: FieldRef<"MatchPreferences", 'Int'>
    readonly collabStyleWeight: FieldRef<"MatchPreferences", 'Int'>
    readonly personalityWeight: FieldRef<"MatchPreferences", 'Int'>
    readonly createdAt: FieldRef<"MatchPreferences", 'DateTime'>
    readonly updatedAt: FieldRef<"MatchPreferences", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchPreferences findUnique
   */
  export type MatchPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which MatchPreferences to fetch.
     */
    where: MatchPreferencesWhereUniqueInput
  }

  /**
   * MatchPreferences findUniqueOrThrow
   */
  export type MatchPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which MatchPreferences to fetch.
     */
    where: MatchPreferencesWhereUniqueInput
  }

  /**
   * MatchPreferences findFirst
   */
  export type MatchPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which MatchPreferences to fetch.
     */
    where?: MatchPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchPreferences to fetch.
     */
    orderBy?: MatchPreferencesOrderByWithRelationInput | MatchPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchPreferences.
     */
    cursor?: MatchPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchPreferences.
     */
    distinct?: MatchPreferencesScalarFieldEnum | MatchPreferencesScalarFieldEnum[]
  }

  /**
   * MatchPreferences findFirstOrThrow
   */
  export type MatchPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which MatchPreferences to fetch.
     */
    where?: MatchPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchPreferences to fetch.
     */
    orderBy?: MatchPreferencesOrderByWithRelationInput | MatchPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchPreferences.
     */
    cursor?: MatchPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchPreferences.
     */
    distinct?: MatchPreferencesScalarFieldEnum | MatchPreferencesScalarFieldEnum[]
  }

  /**
   * MatchPreferences findMany
   */
  export type MatchPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which MatchPreferences to fetch.
     */
    where?: MatchPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchPreferences to fetch.
     */
    orderBy?: MatchPreferencesOrderByWithRelationInput | MatchPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchPreferences.
     */
    cursor?: MatchPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchPreferences.
     */
    skip?: number
    distinct?: MatchPreferencesScalarFieldEnum | MatchPreferencesScalarFieldEnum[]
  }

  /**
   * MatchPreferences create
   */
  export type MatchPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchPreferences.
     */
    data: XOR<MatchPreferencesCreateInput, MatchPreferencesUncheckedCreateInput>
  }

  /**
   * MatchPreferences createMany
   */
  export type MatchPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchPreferences.
     */
    data: MatchPreferencesCreateManyInput | MatchPreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchPreferences createManyAndReturn
   */
  export type MatchPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MatchPreferences.
     */
    data: MatchPreferencesCreateManyInput | MatchPreferencesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchPreferences update
   */
  export type MatchPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchPreferences.
     */
    data: XOR<MatchPreferencesUpdateInput, MatchPreferencesUncheckedUpdateInput>
    /**
     * Choose, which MatchPreferences to update.
     */
    where: MatchPreferencesWhereUniqueInput
  }

  /**
   * MatchPreferences updateMany
   */
  export type MatchPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchPreferences.
     */
    data: XOR<MatchPreferencesUpdateManyMutationInput, MatchPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which MatchPreferences to update
     */
    where?: MatchPreferencesWhereInput
  }

  /**
   * MatchPreferences upsert
   */
  export type MatchPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchPreferences to update in case it exists.
     */
    where: MatchPreferencesWhereUniqueInput
    /**
     * In case the MatchPreferences found by the `where` argument doesn't exist, create a new MatchPreferences with this data.
     */
    create: XOR<MatchPreferencesCreateInput, MatchPreferencesUncheckedCreateInput>
    /**
     * In case the MatchPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchPreferencesUpdateInput, MatchPreferencesUncheckedUpdateInput>
  }

  /**
   * MatchPreferences delete
   */
  export type MatchPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
    /**
     * Filter which MatchPreferences to delete.
     */
    where: MatchPreferencesWhereUniqueInput
  }

  /**
   * MatchPreferences deleteMany
   */
  export type MatchPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchPreferences to delete
     */
    where?: MatchPreferencesWhereInput
  }

  /**
   * MatchPreferences without action
   */
  export type MatchPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchPreferences
     */
    select?: MatchPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchPreferencesInclude<ExtArgs> | null
  }


  /**
   * Model ProjectInterest
   */

  export type AggregateProjectInterest = {
    _count: ProjectInterestCountAggregateOutputType | null
    _min: ProjectInterestMinAggregateOutputType | null
    _max: ProjectInterestMaxAggregateOutputType | null
  }

  export type ProjectInterestMinAggregateOutputType = {
    userId: string | null
    interest: string | null
    createdAt: Date | null
  }

  export type ProjectInterestMaxAggregateOutputType = {
    userId: string | null
    interest: string | null
    createdAt: Date | null
  }

  export type ProjectInterestCountAggregateOutputType = {
    userId: number
    interest: number
    createdAt: number
    _all: number
  }


  export type ProjectInterestMinAggregateInputType = {
    userId?: true
    interest?: true
    createdAt?: true
  }

  export type ProjectInterestMaxAggregateInputType = {
    userId?: true
    interest?: true
    createdAt?: true
  }

  export type ProjectInterestCountAggregateInputType = {
    userId?: true
    interest?: true
    createdAt?: true
    _all?: true
  }

  export type ProjectInterestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectInterest to aggregate.
     */
    where?: ProjectInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInterests to fetch.
     */
    orderBy?: ProjectInterestOrderByWithRelationInput | ProjectInterestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectInterests
    **/
    _count?: true | ProjectInterestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectInterestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectInterestMaxAggregateInputType
  }

  export type GetProjectInterestAggregateType<T extends ProjectInterestAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectInterest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectInterest[P]>
      : GetScalarType<T[P], AggregateProjectInterest[P]>
  }




  export type ProjectInterestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectInterestWhereInput
    orderBy?: ProjectInterestOrderByWithAggregationInput | ProjectInterestOrderByWithAggregationInput[]
    by: ProjectInterestScalarFieldEnum[] | ProjectInterestScalarFieldEnum
    having?: ProjectInterestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectInterestCountAggregateInputType | true
    _min?: ProjectInterestMinAggregateInputType
    _max?: ProjectInterestMaxAggregateInputType
  }

  export type ProjectInterestGroupByOutputType = {
    userId: string
    interest: string
    createdAt: Date
    _count: ProjectInterestCountAggregateOutputType | null
    _min: ProjectInterestMinAggregateOutputType | null
    _max: ProjectInterestMaxAggregateOutputType | null
  }

  type GetProjectInterestGroupByPayload<T extends ProjectInterestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectInterestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectInterestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectInterestGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectInterestGroupByOutputType[P]>
        }
      >
    >


  export type ProjectInterestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    interest?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectInterest"]>

  export type ProjectInterestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    interest?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectInterest"]>

  export type ProjectInterestSelectScalar = {
    userId?: boolean
    interest?: boolean
    createdAt?: boolean
  }

  export type ProjectInterestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProjectInterestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectInterestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectInterest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      interest: string
      createdAt: Date
    }, ExtArgs["result"]["projectInterest"]>
    composites: {}
  }

  type ProjectInterestGetPayload<S extends boolean | null | undefined | ProjectInterestDefaultArgs> = $Result.GetResult<Prisma.$ProjectInterestPayload, S>

  type ProjectInterestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectInterestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectInterestCountAggregateInputType | true
    }

  export interface ProjectInterestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectInterest'], meta: { name: 'ProjectInterest' } }
    /**
     * Find zero or one ProjectInterest that matches the filter.
     * @param {ProjectInterestFindUniqueArgs} args - Arguments to find a ProjectInterest
     * @example
     * // Get one ProjectInterest
     * const projectInterest = await prisma.projectInterest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectInterestFindUniqueArgs>(args: SelectSubset<T, ProjectInterestFindUniqueArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectInterest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectInterestFindUniqueOrThrowArgs} args - Arguments to find a ProjectInterest
     * @example
     * // Get one ProjectInterest
     * const projectInterest = await prisma.projectInterest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectInterestFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectInterestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectInterest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestFindFirstArgs} args - Arguments to find a ProjectInterest
     * @example
     * // Get one ProjectInterest
     * const projectInterest = await prisma.projectInterest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectInterestFindFirstArgs>(args?: SelectSubset<T, ProjectInterestFindFirstArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectInterest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestFindFirstOrThrowArgs} args - Arguments to find a ProjectInterest
     * @example
     * // Get one ProjectInterest
     * const projectInterest = await prisma.projectInterest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectInterestFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectInterestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectInterests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectInterests
     * const projectInterests = await prisma.projectInterest.findMany()
     * 
     * // Get first 10 ProjectInterests
     * const projectInterests = await prisma.projectInterest.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const projectInterestWithUserIdOnly = await prisma.projectInterest.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends ProjectInterestFindManyArgs>(args?: SelectSubset<T, ProjectInterestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectInterest.
     * @param {ProjectInterestCreateArgs} args - Arguments to create a ProjectInterest.
     * @example
     * // Create one ProjectInterest
     * const ProjectInterest = await prisma.projectInterest.create({
     *   data: {
     *     // ... data to create a ProjectInterest
     *   }
     * })
     * 
     */
    create<T extends ProjectInterestCreateArgs>(args: SelectSubset<T, ProjectInterestCreateArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectInterests.
     * @param {ProjectInterestCreateManyArgs} args - Arguments to create many ProjectInterests.
     * @example
     * // Create many ProjectInterests
     * const projectInterest = await prisma.projectInterest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectInterestCreateManyArgs>(args?: SelectSubset<T, ProjectInterestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectInterests and returns the data saved in the database.
     * @param {ProjectInterestCreateManyAndReturnArgs} args - Arguments to create many ProjectInterests.
     * @example
     * // Create many ProjectInterests
     * const projectInterest = await prisma.projectInterest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectInterests and only return the `userId`
     * const projectInterestWithUserIdOnly = await prisma.projectInterest.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectInterestCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectInterestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectInterest.
     * @param {ProjectInterestDeleteArgs} args - Arguments to delete one ProjectInterest.
     * @example
     * // Delete one ProjectInterest
     * const ProjectInterest = await prisma.projectInterest.delete({
     *   where: {
     *     // ... filter to delete one ProjectInterest
     *   }
     * })
     * 
     */
    delete<T extends ProjectInterestDeleteArgs>(args: SelectSubset<T, ProjectInterestDeleteArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectInterest.
     * @param {ProjectInterestUpdateArgs} args - Arguments to update one ProjectInterest.
     * @example
     * // Update one ProjectInterest
     * const projectInterest = await prisma.projectInterest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectInterestUpdateArgs>(args: SelectSubset<T, ProjectInterestUpdateArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectInterests.
     * @param {ProjectInterestDeleteManyArgs} args - Arguments to filter ProjectInterests to delete.
     * @example
     * // Delete a few ProjectInterests
     * const { count } = await prisma.projectInterest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectInterestDeleteManyArgs>(args?: SelectSubset<T, ProjectInterestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectInterests
     * const projectInterest = await prisma.projectInterest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectInterestUpdateManyArgs>(args: SelectSubset<T, ProjectInterestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectInterest.
     * @param {ProjectInterestUpsertArgs} args - Arguments to update or create a ProjectInterest.
     * @example
     * // Update or create a ProjectInterest
     * const projectInterest = await prisma.projectInterest.upsert({
     *   create: {
     *     // ... data to create a ProjectInterest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectInterest we want to update
     *   }
     * })
     */
    upsert<T extends ProjectInterestUpsertArgs>(args: SelectSubset<T, ProjectInterestUpsertArgs<ExtArgs>>): Prisma__ProjectInterestClient<$Result.GetResult<Prisma.$ProjectInterestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectInterests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestCountArgs} args - Arguments to filter ProjectInterests to count.
     * @example
     * // Count the number of ProjectInterests
     * const count = await prisma.projectInterest.count({
     *   where: {
     *     // ... the filter for the ProjectInterests we want to count
     *   }
     * })
    **/
    count<T extends ProjectInterestCountArgs>(
      args?: Subset<T, ProjectInterestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectInterestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectInterestAggregateArgs>(args: Subset<T, ProjectInterestAggregateArgs>): Prisma.PrismaPromise<GetProjectInterestAggregateType<T>>

    /**
     * Group by ProjectInterest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectInterestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectInterestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectInterestGroupByArgs['orderBy'] }
        : { orderBy?: ProjectInterestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectInterestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectInterestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectInterest model
   */
  readonly fields: ProjectInterestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectInterest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectInterestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectInterest model
   */ 
  interface ProjectInterestFieldRefs {
    readonly userId: FieldRef<"ProjectInterest", 'String'>
    readonly interest: FieldRef<"ProjectInterest", 'String'>
    readonly createdAt: FieldRef<"ProjectInterest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectInterest findUnique
   */
  export type ProjectInterestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInterest to fetch.
     */
    where: ProjectInterestWhereUniqueInput
  }

  /**
   * ProjectInterest findUniqueOrThrow
   */
  export type ProjectInterestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInterest to fetch.
     */
    where: ProjectInterestWhereUniqueInput
  }

  /**
   * ProjectInterest findFirst
   */
  export type ProjectInterestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInterest to fetch.
     */
    where?: ProjectInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInterests to fetch.
     */
    orderBy?: ProjectInterestOrderByWithRelationInput | ProjectInterestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectInterests.
     */
    cursor?: ProjectInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectInterests.
     */
    distinct?: ProjectInterestScalarFieldEnum | ProjectInterestScalarFieldEnum[]
  }

  /**
   * ProjectInterest findFirstOrThrow
   */
  export type ProjectInterestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInterest to fetch.
     */
    where?: ProjectInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInterests to fetch.
     */
    orderBy?: ProjectInterestOrderByWithRelationInput | ProjectInterestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectInterests.
     */
    cursor?: ProjectInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInterests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectInterests.
     */
    distinct?: ProjectInterestScalarFieldEnum | ProjectInterestScalarFieldEnum[]
  }

  /**
   * ProjectInterest findMany
   */
  export type ProjectInterestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * Filter, which ProjectInterests to fetch.
     */
    where?: ProjectInterestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectInterests to fetch.
     */
    orderBy?: ProjectInterestOrderByWithRelationInput | ProjectInterestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectInterests.
     */
    cursor?: ProjectInterestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectInterests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectInterests.
     */
    skip?: number
    distinct?: ProjectInterestScalarFieldEnum | ProjectInterestScalarFieldEnum[]
  }

  /**
   * ProjectInterest create
   */
  export type ProjectInterestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectInterest.
     */
    data: XOR<ProjectInterestCreateInput, ProjectInterestUncheckedCreateInput>
  }

  /**
   * ProjectInterest createMany
   */
  export type ProjectInterestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectInterests.
     */
    data: ProjectInterestCreateManyInput | ProjectInterestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectInterest createManyAndReturn
   */
  export type ProjectInterestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectInterests.
     */
    data: ProjectInterestCreateManyInput | ProjectInterestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectInterest update
   */
  export type ProjectInterestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectInterest.
     */
    data: XOR<ProjectInterestUpdateInput, ProjectInterestUncheckedUpdateInput>
    /**
     * Choose, which ProjectInterest to update.
     */
    where: ProjectInterestWhereUniqueInput
  }

  /**
   * ProjectInterest updateMany
   */
  export type ProjectInterestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectInterests.
     */
    data: XOR<ProjectInterestUpdateManyMutationInput, ProjectInterestUncheckedUpdateManyInput>
    /**
     * Filter which ProjectInterests to update
     */
    where?: ProjectInterestWhereInput
  }

  /**
   * ProjectInterest upsert
   */
  export type ProjectInterestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectInterest to update in case it exists.
     */
    where: ProjectInterestWhereUniqueInput
    /**
     * In case the ProjectInterest found by the `where` argument doesn't exist, create a new ProjectInterest with this data.
     */
    create: XOR<ProjectInterestCreateInput, ProjectInterestUncheckedCreateInput>
    /**
     * In case the ProjectInterest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectInterestUpdateInput, ProjectInterestUncheckedUpdateInput>
  }

  /**
   * ProjectInterest delete
   */
  export type ProjectInterestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
    /**
     * Filter which ProjectInterest to delete.
     */
    where: ProjectInterestWhereUniqueInput
  }

  /**
   * ProjectInterest deleteMany
   */
  export type ProjectInterestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectInterests to delete
     */
    where?: ProjectInterestWhereInput
  }

  /**
   * ProjectInterest without action
   */
  export type ProjectInterestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectInterest
     */
    select?: ProjectInterestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInterestInclude<ExtArgs> | null
  }


  /**
   * Model CollaborationPreferences
   */

  export type AggregateCollaborationPreferences = {
    _count: CollaborationPreferencesCountAggregateOutputType | null
    _min: CollaborationPreferencesMinAggregateOutputType | null
    _max: CollaborationPreferencesMaxAggregateOutputType | null
  }

  export type CollaborationPreferencesMinAggregateOutputType = {
    userId: string | null
    teamSizePreference: string | null
    commitmentLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollaborationPreferencesMaxAggregateOutputType = {
    userId: string | null
    teamSizePreference: string | null
    commitmentLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CollaborationPreferencesCountAggregateOutputType = {
    userId: number
    preferredTools: number
    projectStageInterest: number
    teamSizePreference: number
    commitmentLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CollaborationPreferencesMinAggregateInputType = {
    userId?: true
    teamSizePreference?: true
    commitmentLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollaborationPreferencesMaxAggregateInputType = {
    userId?: true
    teamSizePreference?: true
    commitmentLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CollaborationPreferencesCountAggregateInputType = {
    userId?: true
    preferredTools?: true
    projectStageInterest?: true
    teamSizePreference?: true
    commitmentLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CollaborationPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationPreferences to aggregate.
     */
    where?: CollaborationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationPreferences to fetch.
     */
    orderBy?: CollaborationPreferencesOrderByWithRelationInput | CollaborationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollaborationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollaborationPreferences
    **/
    _count?: true | CollaborationPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollaborationPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollaborationPreferencesMaxAggregateInputType
  }

  export type GetCollaborationPreferencesAggregateType<T extends CollaborationPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateCollaborationPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollaborationPreferences[P]>
      : GetScalarType<T[P], AggregateCollaborationPreferences[P]>
  }




  export type CollaborationPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationPreferencesWhereInput
    orderBy?: CollaborationPreferencesOrderByWithAggregationInput | CollaborationPreferencesOrderByWithAggregationInput[]
    by: CollaborationPreferencesScalarFieldEnum[] | CollaborationPreferencesScalarFieldEnum
    having?: CollaborationPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollaborationPreferencesCountAggregateInputType | true
    _min?: CollaborationPreferencesMinAggregateInputType
    _max?: CollaborationPreferencesMaxAggregateInputType
  }

  export type CollaborationPreferencesGroupByOutputType = {
    userId: string
    preferredTools: string[]
    projectStageInterest: string[]
    teamSizePreference: string | null
    commitmentLevel: string | null
    createdAt: Date
    updatedAt: Date
    _count: CollaborationPreferencesCountAggregateOutputType | null
    _min: CollaborationPreferencesMinAggregateOutputType | null
    _max: CollaborationPreferencesMaxAggregateOutputType | null
  }

  type GetCollaborationPreferencesGroupByPayload<T extends CollaborationPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollaborationPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollaborationPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollaborationPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], CollaborationPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type CollaborationPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    preferredTools?: boolean
    projectStageInterest?: boolean
    teamSizePreference?: boolean
    commitmentLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationPreferences"]>

  export type CollaborationPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    preferredTools?: boolean
    projectStageInterest?: boolean
    teamSizePreference?: boolean
    commitmentLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationPreferences"]>

  export type CollaborationPreferencesSelectScalar = {
    userId?: boolean
    preferredTools?: boolean
    projectStageInterest?: boolean
    teamSizePreference?: boolean
    commitmentLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CollaborationPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CollaborationPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CollaborationPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollaborationPreferences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      preferredTools: string[]
      projectStageInterest: string[]
      teamSizePreference: string | null
      commitmentLevel: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["collaborationPreferences"]>
    composites: {}
  }

  type CollaborationPreferencesGetPayload<S extends boolean | null | undefined | CollaborationPreferencesDefaultArgs> = $Result.GetResult<Prisma.$CollaborationPreferencesPayload, S>

  type CollaborationPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollaborationPreferencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollaborationPreferencesCountAggregateInputType | true
    }

  export interface CollaborationPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollaborationPreferences'], meta: { name: 'CollaborationPreferences' } }
    /**
     * Find zero or one CollaborationPreferences that matches the filter.
     * @param {CollaborationPreferencesFindUniqueArgs} args - Arguments to find a CollaborationPreferences
     * @example
     * // Get one CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollaborationPreferencesFindUniqueArgs>(args: SelectSubset<T, CollaborationPreferencesFindUniqueArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollaborationPreferences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollaborationPreferencesFindUniqueOrThrowArgs} args - Arguments to find a CollaborationPreferences
     * @example
     * // Get one CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollaborationPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, CollaborationPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollaborationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesFindFirstArgs} args - Arguments to find a CollaborationPreferences
     * @example
     * // Get one CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollaborationPreferencesFindFirstArgs>(args?: SelectSubset<T, CollaborationPreferencesFindFirstArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollaborationPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesFindFirstOrThrowArgs} args - Arguments to find a CollaborationPreferences
     * @example
     * // Get one CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollaborationPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, CollaborationPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollaborationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.findMany()
     * 
     * // Get first 10 CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const collaborationPreferencesWithUserIdOnly = await prisma.collaborationPreferences.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends CollaborationPreferencesFindManyArgs>(args?: SelectSubset<T, CollaborationPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollaborationPreferences.
     * @param {CollaborationPreferencesCreateArgs} args - Arguments to create a CollaborationPreferences.
     * @example
     * // Create one CollaborationPreferences
     * const CollaborationPreferences = await prisma.collaborationPreferences.create({
     *   data: {
     *     // ... data to create a CollaborationPreferences
     *   }
     * })
     * 
     */
    create<T extends CollaborationPreferencesCreateArgs>(args: SelectSubset<T, CollaborationPreferencesCreateArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollaborationPreferences.
     * @param {CollaborationPreferencesCreateManyArgs} args - Arguments to create many CollaborationPreferences.
     * @example
     * // Create many CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollaborationPreferencesCreateManyArgs>(args?: SelectSubset<T, CollaborationPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollaborationPreferences and returns the data saved in the database.
     * @param {CollaborationPreferencesCreateManyAndReturnArgs} args - Arguments to create many CollaborationPreferences.
     * @example
     * // Create many CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollaborationPreferences and only return the `userId`
     * const collaborationPreferencesWithUserIdOnly = await prisma.collaborationPreferences.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollaborationPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, CollaborationPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollaborationPreferences.
     * @param {CollaborationPreferencesDeleteArgs} args - Arguments to delete one CollaborationPreferences.
     * @example
     * // Delete one CollaborationPreferences
     * const CollaborationPreferences = await prisma.collaborationPreferences.delete({
     *   where: {
     *     // ... filter to delete one CollaborationPreferences
     *   }
     * })
     * 
     */
    delete<T extends CollaborationPreferencesDeleteArgs>(args: SelectSubset<T, CollaborationPreferencesDeleteArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollaborationPreferences.
     * @param {CollaborationPreferencesUpdateArgs} args - Arguments to update one CollaborationPreferences.
     * @example
     * // Update one CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollaborationPreferencesUpdateArgs>(args: SelectSubset<T, CollaborationPreferencesUpdateArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollaborationPreferences.
     * @param {CollaborationPreferencesDeleteManyArgs} args - Arguments to filter CollaborationPreferences to delete.
     * @example
     * // Delete a few CollaborationPreferences
     * const { count } = await prisma.collaborationPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollaborationPreferencesDeleteManyArgs>(args?: SelectSubset<T, CollaborationPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollaborationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollaborationPreferencesUpdateManyArgs>(args: SelectSubset<T, CollaborationPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollaborationPreferences.
     * @param {CollaborationPreferencesUpsertArgs} args - Arguments to update or create a CollaborationPreferences.
     * @example
     * // Update or create a CollaborationPreferences
     * const collaborationPreferences = await prisma.collaborationPreferences.upsert({
     *   create: {
     *     // ... data to create a CollaborationPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollaborationPreferences we want to update
     *   }
     * })
     */
    upsert<T extends CollaborationPreferencesUpsertArgs>(args: SelectSubset<T, CollaborationPreferencesUpsertArgs<ExtArgs>>): Prisma__CollaborationPreferencesClient<$Result.GetResult<Prisma.$CollaborationPreferencesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollaborationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesCountArgs} args - Arguments to filter CollaborationPreferences to count.
     * @example
     * // Count the number of CollaborationPreferences
     * const count = await prisma.collaborationPreferences.count({
     *   where: {
     *     // ... the filter for the CollaborationPreferences we want to count
     *   }
     * })
    **/
    count<T extends CollaborationPreferencesCountArgs>(
      args?: Subset<T, CollaborationPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollaborationPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollaborationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollaborationPreferencesAggregateArgs>(args: Subset<T, CollaborationPreferencesAggregateArgs>): Prisma.PrismaPromise<GetCollaborationPreferencesAggregateType<T>>

    /**
     * Group by CollaborationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollaborationPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollaborationPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: CollaborationPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollaborationPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollaborationPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollaborationPreferences model
   */
  readonly fields: CollaborationPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollaborationPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollaborationPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollaborationPreferences model
   */ 
  interface CollaborationPreferencesFieldRefs {
    readonly userId: FieldRef<"CollaborationPreferences", 'String'>
    readonly preferredTools: FieldRef<"CollaborationPreferences", 'String[]'>
    readonly projectStageInterest: FieldRef<"CollaborationPreferences", 'String[]'>
    readonly teamSizePreference: FieldRef<"CollaborationPreferences", 'String'>
    readonly commitmentLevel: FieldRef<"CollaborationPreferences", 'String'>
    readonly createdAt: FieldRef<"CollaborationPreferences", 'DateTime'>
    readonly updatedAt: FieldRef<"CollaborationPreferences", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CollaborationPreferences findUnique
   */
  export type CollaborationPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationPreferences to fetch.
     */
    where: CollaborationPreferencesWhereUniqueInput
  }

  /**
   * CollaborationPreferences findUniqueOrThrow
   */
  export type CollaborationPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationPreferences to fetch.
     */
    where: CollaborationPreferencesWhereUniqueInput
  }

  /**
   * CollaborationPreferences findFirst
   */
  export type CollaborationPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationPreferences to fetch.
     */
    where?: CollaborationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationPreferences to fetch.
     */
    orderBy?: CollaborationPreferencesOrderByWithRelationInput | CollaborationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationPreferences.
     */
    cursor?: CollaborationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationPreferences.
     */
    distinct?: CollaborationPreferencesScalarFieldEnum | CollaborationPreferencesScalarFieldEnum[]
  }

  /**
   * CollaborationPreferences findFirstOrThrow
   */
  export type CollaborationPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationPreferences to fetch.
     */
    where?: CollaborationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationPreferences to fetch.
     */
    orderBy?: CollaborationPreferencesOrderByWithRelationInput | CollaborationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationPreferences.
     */
    cursor?: CollaborationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationPreferences.
     */
    distinct?: CollaborationPreferencesScalarFieldEnum | CollaborationPreferencesScalarFieldEnum[]
  }

  /**
   * CollaborationPreferences findMany
   */
  export type CollaborationPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationPreferences to fetch.
     */
    where?: CollaborationPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationPreferences to fetch.
     */
    orderBy?: CollaborationPreferencesOrderByWithRelationInput | CollaborationPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollaborationPreferences.
     */
    cursor?: CollaborationPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationPreferences.
     */
    skip?: number
    distinct?: CollaborationPreferencesScalarFieldEnum | CollaborationPreferencesScalarFieldEnum[]
  }

  /**
   * CollaborationPreferences create
   */
  export type CollaborationPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a CollaborationPreferences.
     */
    data: XOR<CollaborationPreferencesCreateInput, CollaborationPreferencesUncheckedCreateInput>
  }

  /**
   * CollaborationPreferences createMany
   */
  export type CollaborationPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollaborationPreferences.
     */
    data: CollaborationPreferencesCreateManyInput | CollaborationPreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollaborationPreferences createManyAndReturn
   */
  export type CollaborationPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollaborationPreferences.
     */
    data: CollaborationPreferencesCreateManyInput | CollaborationPreferencesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollaborationPreferences update
   */
  export type CollaborationPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a CollaborationPreferences.
     */
    data: XOR<CollaborationPreferencesUpdateInput, CollaborationPreferencesUncheckedUpdateInput>
    /**
     * Choose, which CollaborationPreferences to update.
     */
    where: CollaborationPreferencesWhereUniqueInput
  }

  /**
   * CollaborationPreferences updateMany
   */
  export type CollaborationPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollaborationPreferences.
     */
    data: XOR<CollaborationPreferencesUpdateManyMutationInput, CollaborationPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which CollaborationPreferences to update
     */
    where?: CollaborationPreferencesWhereInput
  }

  /**
   * CollaborationPreferences upsert
   */
  export type CollaborationPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the CollaborationPreferences to update in case it exists.
     */
    where: CollaborationPreferencesWhereUniqueInput
    /**
     * In case the CollaborationPreferences found by the `where` argument doesn't exist, create a new CollaborationPreferences with this data.
     */
    create: XOR<CollaborationPreferencesCreateInput, CollaborationPreferencesUncheckedCreateInput>
    /**
     * In case the CollaborationPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollaborationPreferencesUpdateInput, CollaborationPreferencesUncheckedUpdateInput>
  }

  /**
   * CollaborationPreferences delete
   */
  export type CollaborationPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
    /**
     * Filter which CollaborationPreferences to delete.
     */
    where: CollaborationPreferencesWhereUniqueInput
  }

  /**
   * CollaborationPreferences deleteMany
   */
  export type CollaborationPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationPreferences to delete
     */
    where?: CollaborationPreferencesWhereInput
  }

  /**
   * CollaborationPreferences without action
   */
  export type CollaborationPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationPreferences
     */
    select?: CollaborationPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationPreferencesInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchAvgAggregateOutputType = {
    matchScore: Decimal | null
  }

  export type MatchSumAggregateOutputType = {
    matchScore: Decimal | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    userAId: string | null
    userBId: string | null
    matchScore: Decimal | null
    status: string | null
    userALiked: boolean | null
    userBLiked: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    userAId: string | null
    userBId: string | null
    matchScore: Decimal | null
    status: string | null
    userALiked: boolean | null
    userBLiked: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    userAId: number
    userBId: number
    matchScore: number
    status: number
    userALiked: number
    userBLiked: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MatchAvgAggregateInputType = {
    matchScore?: true
  }

  export type MatchSumAggregateInputType = {
    matchScore?: true
  }

  export type MatchMinAggregateInputType = {
    id?: true
    userAId?: true
    userBId?: true
    matchScore?: true
    status?: true
    userALiked?: true
    userBLiked?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    userAId?: true
    userBId?: true
    matchScore?: true
    status?: true
    userALiked?: true
    userBLiked?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    userAId?: true
    userBId?: true
    matchScore?: true
    status?: true
    userALiked?: true
    userBLiked?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _avg?: MatchAvgAggregateInputType
    _sum?: MatchSumAggregateInputType
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    userAId: string
    userBId: string
    matchScore: Decimal | null
    status: string
    userALiked: boolean
    userBLiked: boolean
    createdAt: Date
    updatedAt: Date
    _count: MatchCountAggregateOutputType | null
    _avg: MatchAvgAggregateOutputType | null
    _sum: MatchSumAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userAId?: boolean
    userBId?: boolean
    matchScore?: boolean
    status?: boolean
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userA?: boolean | UserDefaultArgs<ExtArgs>
    userB?: boolean | UserDefaultArgs<ExtArgs>
    interactions?: boolean | Match$interactionsArgs<ExtArgs>
    feedback?: boolean | Match$feedbackArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userAId?: boolean
    userBId?: boolean
    matchScore?: boolean
    status?: boolean
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userA?: boolean | UserDefaultArgs<ExtArgs>
    userB?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    userAId?: boolean
    userBId?: boolean
    matchScore?: boolean
    status?: boolean
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userA?: boolean | UserDefaultArgs<ExtArgs>
    userB?: boolean | UserDefaultArgs<ExtArgs>
    interactions?: boolean | Match$interactionsArgs<ExtArgs>
    feedback?: boolean | Match$feedbackArgs<ExtArgs>
    _count?: boolean | MatchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userA?: boolean | UserDefaultArgs<ExtArgs>
    userB?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      userA: Prisma.$UserPayload<ExtArgs>
      userB: Prisma.$UserPayload<ExtArgs>
      interactions: Prisma.$MatchInteractionPayload<ExtArgs>[]
      feedback: Prisma.$CollaborationFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userAId: string
      userBId: string
      matchScore: Prisma.Decimal | null
      status: string
      userALiked: boolean
      userBLiked: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userA<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    userB<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    interactions<T extends Match$interactionsArgs<ExtArgs> = {}>(args?: Subset<T, Match$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findMany"> | Null>
    feedback<T extends Match$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, Match$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly userAId: FieldRef<"Match", 'String'>
    readonly userBId: FieldRef<"Match", 'String'>
    readonly matchScore: FieldRef<"Match", 'Decimal'>
    readonly status: FieldRef<"Match", 'String'>
    readonly userALiked: FieldRef<"Match", 'Boolean'>
    readonly userBLiked: FieldRef<"Match", 'Boolean'>
    readonly createdAt: FieldRef<"Match", 'DateTime'>
    readonly updatedAt: FieldRef<"Match", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
  }

  /**
   * Match.interactions
   */
  export type Match$interactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    where?: MatchInteractionWhereInput
    orderBy?: MatchInteractionOrderByWithRelationInput | MatchInteractionOrderByWithRelationInput[]
    cursor?: MatchInteractionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchInteractionScalarFieldEnum | MatchInteractionScalarFieldEnum[]
  }

  /**
   * Match.feedback
   */
  export type Match$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    where?: CollaborationFeedbackWhereInput
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    cursor?: CollaborationFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CollaborationFeedbackScalarFieldEnum | CollaborationFeedbackScalarFieldEnum[]
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model MatchInteraction
   */

  export type AggregateMatchInteraction = {
    _count: MatchInteractionCountAggregateOutputType | null
    _min: MatchInteractionMinAggregateOutputType | null
    _max: MatchInteractionMaxAggregateOutputType | null
  }

  export type MatchInteractionMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    userId: string | null
    action: string | null
    createdAt: Date | null
  }

  export type MatchInteractionMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    userId: string | null
    action: string | null
    createdAt: Date | null
  }

  export type MatchInteractionCountAggregateOutputType = {
    id: number
    matchId: number
    userId: number
    action: number
    createdAt: number
    _all: number
  }


  export type MatchInteractionMinAggregateInputType = {
    id?: true
    matchId?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type MatchInteractionMaxAggregateInputType = {
    id?: true
    matchId?: true
    userId?: true
    action?: true
    createdAt?: true
  }

  export type MatchInteractionCountAggregateInputType = {
    id?: true
    matchId?: true
    userId?: true
    action?: true
    createdAt?: true
    _all?: true
  }

  export type MatchInteractionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchInteraction to aggregate.
     */
    where?: MatchInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchInteractions to fetch.
     */
    orderBy?: MatchInteractionOrderByWithRelationInput | MatchInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchInteractions
    **/
    _count?: true | MatchInteractionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchInteractionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchInteractionMaxAggregateInputType
  }

  export type GetMatchInteractionAggregateType<T extends MatchInteractionAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchInteraction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchInteraction[P]>
      : GetScalarType<T[P], AggregateMatchInteraction[P]>
  }




  export type MatchInteractionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchInteractionWhereInput
    orderBy?: MatchInteractionOrderByWithAggregationInput | MatchInteractionOrderByWithAggregationInput[]
    by: MatchInteractionScalarFieldEnum[] | MatchInteractionScalarFieldEnum
    having?: MatchInteractionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchInteractionCountAggregateInputType | true
    _min?: MatchInteractionMinAggregateInputType
    _max?: MatchInteractionMaxAggregateInputType
  }

  export type MatchInteractionGroupByOutputType = {
    id: string
    matchId: string
    userId: string
    action: string
    createdAt: Date
    _count: MatchInteractionCountAggregateOutputType | null
    _min: MatchInteractionMinAggregateOutputType | null
    _max: MatchInteractionMaxAggregateOutputType | null
  }

  type GetMatchInteractionGroupByPayload<T extends MatchInteractionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchInteractionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchInteractionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchInteractionGroupByOutputType[P]>
            : GetScalarType<T[P], MatchInteractionGroupByOutputType[P]>
        }
      >
    >


  export type MatchInteractionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    userId?: boolean
    action?: boolean
    createdAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchInteraction"]>

  export type MatchInteractionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    userId?: boolean
    action?: boolean
    createdAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["matchInteraction"]>

  export type MatchInteractionSelectScalar = {
    id?: boolean
    matchId?: boolean
    userId?: boolean
    action?: boolean
    createdAt?: boolean
  }

  export type MatchInteractionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MatchInteractionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MatchInteractionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MatchInteraction"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchId: string
      userId: string
      action: string
      createdAt: Date
    }, ExtArgs["result"]["matchInteraction"]>
    composites: {}
  }

  type MatchInteractionGetPayload<S extends boolean | null | undefined | MatchInteractionDefaultArgs> = $Result.GetResult<Prisma.$MatchInteractionPayload, S>

  type MatchInteractionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MatchInteractionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MatchInteractionCountAggregateInputType | true
    }

  export interface MatchInteractionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MatchInteraction'], meta: { name: 'MatchInteraction' } }
    /**
     * Find zero or one MatchInteraction that matches the filter.
     * @param {MatchInteractionFindUniqueArgs} args - Arguments to find a MatchInteraction
     * @example
     * // Get one MatchInteraction
     * const matchInteraction = await prisma.matchInteraction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchInteractionFindUniqueArgs>(args: SelectSubset<T, MatchInteractionFindUniqueArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MatchInteraction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MatchInteractionFindUniqueOrThrowArgs} args - Arguments to find a MatchInteraction
     * @example
     * // Get one MatchInteraction
     * const matchInteraction = await prisma.matchInteraction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchInteractionFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchInteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MatchInteraction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionFindFirstArgs} args - Arguments to find a MatchInteraction
     * @example
     * // Get one MatchInteraction
     * const matchInteraction = await prisma.matchInteraction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchInteractionFindFirstArgs>(args?: SelectSubset<T, MatchInteractionFindFirstArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MatchInteraction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionFindFirstOrThrowArgs} args - Arguments to find a MatchInteraction
     * @example
     * // Get one MatchInteraction
     * const matchInteraction = await prisma.matchInteraction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchInteractionFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchInteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MatchInteractions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchInteractions
     * const matchInteractions = await prisma.matchInteraction.findMany()
     * 
     * // Get first 10 MatchInteractions
     * const matchInteractions = await prisma.matchInteraction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchInteractionWithIdOnly = await prisma.matchInteraction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchInteractionFindManyArgs>(args?: SelectSubset<T, MatchInteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MatchInteraction.
     * @param {MatchInteractionCreateArgs} args - Arguments to create a MatchInteraction.
     * @example
     * // Create one MatchInteraction
     * const MatchInteraction = await prisma.matchInteraction.create({
     *   data: {
     *     // ... data to create a MatchInteraction
     *   }
     * })
     * 
     */
    create<T extends MatchInteractionCreateArgs>(args: SelectSubset<T, MatchInteractionCreateArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MatchInteractions.
     * @param {MatchInteractionCreateManyArgs} args - Arguments to create many MatchInteractions.
     * @example
     * // Create many MatchInteractions
     * const matchInteraction = await prisma.matchInteraction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchInteractionCreateManyArgs>(args?: SelectSubset<T, MatchInteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MatchInteractions and returns the data saved in the database.
     * @param {MatchInteractionCreateManyAndReturnArgs} args - Arguments to create many MatchInteractions.
     * @example
     * // Create many MatchInteractions
     * const matchInteraction = await prisma.matchInteraction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MatchInteractions and only return the `id`
     * const matchInteractionWithIdOnly = await prisma.matchInteraction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchInteractionCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchInteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MatchInteraction.
     * @param {MatchInteractionDeleteArgs} args - Arguments to delete one MatchInteraction.
     * @example
     * // Delete one MatchInteraction
     * const MatchInteraction = await prisma.matchInteraction.delete({
     *   where: {
     *     // ... filter to delete one MatchInteraction
     *   }
     * })
     * 
     */
    delete<T extends MatchInteractionDeleteArgs>(args: SelectSubset<T, MatchInteractionDeleteArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MatchInteraction.
     * @param {MatchInteractionUpdateArgs} args - Arguments to update one MatchInteraction.
     * @example
     * // Update one MatchInteraction
     * const matchInteraction = await prisma.matchInteraction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchInteractionUpdateArgs>(args: SelectSubset<T, MatchInteractionUpdateArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MatchInteractions.
     * @param {MatchInteractionDeleteManyArgs} args - Arguments to filter MatchInteractions to delete.
     * @example
     * // Delete a few MatchInteractions
     * const { count } = await prisma.matchInteraction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchInteractionDeleteManyArgs>(args?: SelectSubset<T, MatchInteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchInteractions
     * const matchInteraction = await prisma.matchInteraction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchInteractionUpdateManyArgs>(args: SelectSubset<T, MatchInteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchInteraction.
     * @param {MatchInteractionUpsertArgs} args - Arguments to update or create a MatchInteraction.
     * @example
     * // Update or create a MatchInteraction
     * const matchInteraction = await prisma.matchInteraction.upsert({
     *   create: {
     *     // ... data to create a MatchInteraction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchInteraction we want to update
     *   }
     * })
     */
    upsert<T extends MatchInteractionUpsertArgs>(args: SelectSubset<T, MatchInteractionUpsertArgs<ExtArgs>>): Prisma__MatchInteractionClient<$Result.GetResult<Prisma.$MatchInteractionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MatchInteractions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionCountArgs} args - Arguments to filter MatchInteractions to count.
     * @example
     * // Count the number of MatchInteractions
     * const count = await prisma.matchInteraction.count({
     *   where: {
     *     // ... the filter for the MatchInteractions we want to count
     *   }
     * })
    **/
    count<T extends MatchInteractionCountArgs>(
      args?: Subset<T, MatchInteractionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchInteractionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchInteractionAggregateArgs>(args: Subset<T, MatchInteractionAggregateArgs>): Prisma.PrismaPromise<GetMatchInteractionAggregateType<T>>

    /**
     * Group by MatchInteraction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchInteractionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchInteractionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchInteractionGroupByArgs['orderBy'] }
        : { orderBy?: MatchInteractionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchInteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MatchInteraction model
   */
  readonly fields: MatchInteractionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchInteraction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchInteractionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MatchInteraction model
   */ 
  interface MatchInteractionFieldRefs {
    readonly id: FieldRef<"MatchInteraction", 'String'>
    readonly matchId: FieldRef<"MatchInteraction", 'String'>
    readonly userId: FieldRef<"MatchInteraction", 'String'>
    readonly action: FieldRef<"MatchInteraction", 'String'>
    readonly createdAt: FieldRef<"MatchInteraction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MatchInteraction findUnique
   */
  export type MatchInteractionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * Filter, which MatchInteraction to fetch.
     */
    where: MatchInteractionWhereUniqueInput
  }

  /**
   * MatchInteraction findUniqueOrThrow
   */
  export type MatchInteractionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * Filter, which MatchInteraction to fetch.
     */
    where: MatchInteractionWhereUniqueInput
  }

  /**
   * MatchInteraction findFirst
   */
  export type MatchInteractionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * Filter, which MatchInteraction to fetch.
     */
    where?: MatchInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchInteractions to fetch.
     */
    orderBy?: MatchInteractionOrderByWithRelationInput | MatchInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchInteractions.
     */
    cursor?: MatchInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchInteractions.
     */
    distinct?: MatchInteractionScalarFieldEnum | MatchInteractionScalarFieldEnum[]
  }

  /**
   * MatchInteraction findFirstOrThrow
   */
  export type MatchInteractionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * Filter, which MatchInteraction to fetch.
     */
    where?: MatchInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchInteractions to fetch.
     */
    orderBy?: MatchInteractionOrderByWithRelationInput | MatchInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchInteractions.
     */
    cursor?: MatchInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchInteractions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchInteractions.
     */
    distinct?: MatchInteractionScalarFieldEnum | MatchInteractionScalarFieldEnum[]
  }

  /**
   * MatchInteraction findMany
   */
  export type MatchInteractionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * Filter, which MatchInteractions to fetch.
     */
    where?: MatchInteractionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchInteractions to fetch.
     */
    orderBy?: MatchInteractionOrderByWithRelationInput | MatchInteractionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchInteractions.
     */
    cursor?: MatchInteractionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchInteractions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchInteractions.
     */
    skip?: number
    distinct?: MatchInteractionScalarFieldEnum | MatchInteractionScalarFieldEnum[]
  }

  /**
   * MatchInteraction create
   */
  export type MatchInteractionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * The data needed to create a MatchInteraction.
     */
    data: XOR<MatchInteractionCreateInput, MatchInteractionUncheckedCreateInput>
  }

  /**
   * MatchInteraction createMany
   */
  export type MatchInteractionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MatchInteractions.
     */
    data: MatchInteractionCreateManyInput | MatchInteractionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MatchInteraction createManyAndReturn
   */
  export type MatchInteractionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MatchInteractions.
     */
    data: MatchInteractionCreateManyInput | MatchInteractionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MatchInteraction update
   */
  export type MatchInteractionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * The data needed to update a MatchInteraction.
     */
    data: XOR<MatchInteractionUpdateInput, MatchInteractionUncheckedUpdateInput>
    /**
     * Choose, which MatchInteraction to update.
     */
    where: MatchInteractionWhereUniqueInput
  }

  /**
   * MatchInteraction updateMany
   */
  export type MatchInteractionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MatchInteractions.
     */
    data: XOR<MatchInteractionUpdateManyMutationInput, MatchInteractionUncheckedUpdateManyInput>
    /**
     * Filter which MatchInteractions to update
     */
    where?: MatchInteractionWhereInput
  }

  /**
   * MatchInteraction upsert
   */
  export type MatchInteractionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * The filter to search for the MatchInteraction to update in case it exists.
     */
    where: MatchInteractionWhereUniqueInput
    /**
     * In case the MatchInteraction found by the `where` argument doesn't exist, create a new MatchInteraction with this data.
     */
    create: XOR<MatchInteractionCreateInput, MatchInteractionUncheckedCreateInput>
    /**
     * In case the MatchInteraction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchInteractionUpdateInput, MatchInteractionUncheckedUpdateInput>
  }

  /**
   * MatchInteraction delete
   */
  export type MatchInteractionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
    /**
     * Filter which MatchInteraction to delete.
     */
    where: MatchInteractionWhereUniqueInput
  }

  /**
   * MatchInteraction deleteMany
   */
  export type MatchInteractionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MatchInteractions to delete
     */
    where?: MatchInteractionWhereInput
  }

  /**
   * MatchInteraction without action
   */
  export type MatchInteractionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MatchInteraction
     */
    select?: MatchInteractionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInteractionInclude<ExtArgs> | null
  }


  /**
   * Model Badge
   */

  export type AggregateBadge = {
    _count: BadgeCountAggregateOutputType | null
    _avg: BadgeAvgAggregateOutputType | null
    _sum: BadgeSumAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  export type BadgeAvgAggregateOutputType = {
    id: number | null
  }

  export type BadgeSumAggregateOutputType = {
    id: number | null
  }

  export type BadgeMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    icon: string | null
    criteria: string | null
    createdAt: Date | null
  }

  export type BadgeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    icon: string | null
    criteria: string | null
    createdAt: Date | null
  }

  export type BadgeCountAggregateOutputType = {
    id: number
    name: number
    description: number
    icon: number
    criteria: number
    createdAt: number
    _all: number
  }


  export type BadgeAvgAggregateInputType = {
    id?: true
  }

  export type BadgeSumAggregateInputType = {
    id?: true
  }

  export type BadgeMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    criteria?: true
    createdAt?: true
  }

  export type BadgeMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    criteria?: true
    createdAt?: true
  }

  export type BadgeCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    icon?: true
    criteria?: true
    createdAt?: true
    _all?: true
  }

  export type BadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badge to aggregate.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Badges
    **/
    _count?: true | BadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BadgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BadgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BadgeMaxAggregateInputType
  }

  export type GetBadgeAggregateType<T extends BadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBadge[P]>
      : GetScalarType<T[P], AggregateBadge[P]>
  }




  export type BadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BadgeWhereInput
    orderBy?: BadgeOrderByWithAggregationInput | BadgeOrderByWithAggregationInput[]
    by: BadgeScalarFieldEnum[] | BadgeScalarFieldEnum
    having?: BadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BadgeCountAggregateInputType | true
    _avg?: BadgeAvgAggregateInputType
    _sum?: BadgeSumAggregateInputType
    _min?: BadgeMinAggregateInputType
    _max?: BadgeMaxAggregateInputType
  }

  export type BadgeGroupByOutputType = {
    id: number
    name: string
    description: string | null
    icon: string | null
    criteria: string | null
    createdAt: Date
    _count: BadgeCountAggregateOutputType | null
    _avg: BadgeAvgAggregateOutputType | null
    _sum: BadgeSumAggregateOutputType | null
    _min: BadgeMinAggregateOutputType | null
    _max: BadgeMaxAggregateOutputType | null
  }

  type GetBadgeGroupByPayload<T extends BadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BadgeGroupByOutputType[P]>
            : GetScalarType<T[P], BadgeGroupByOutputType[P]>
        }
      >
    >


  export type BadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    criteria?: boolean
    createdAt?: boolean
    users?: boolean | Badge$usersArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    criteria?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["badge"]>

  export type BadgeSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    icon?: boolean
    criteria?: boolean
    createdAt?: boolean
  }

  export type BadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Badge$usersArgs<ExtArgs>
    _count?: boolean | BadgeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Badge"
    objects: {
      users: Prisma.$UserBadgePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      icon: string | null
      criteria: string | null
      createdAt: Date
    }, ExtArgs["result"]["badge"]>
    composites: {}
  }

  type BadgeGetPayload<S extends boolean | null | undefined | BadgeDefaultArgs> = $Result.GetResult<Prisma.$BadgePayload, S>

  type BadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BadgeCountAggregateInputType | true
    }

  export interface BadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Badge'], meta: { name: 'Badge' } }
    /**
     * Find zero or one Badge that matches the filter.
     * @param {BadgeFindUniqueArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BadgeFindUniqueArgs>(args: SelectSubset<T, BadgeFindUniqueArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Badge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BadgeFindUniqueOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, BadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Badge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BadgeFindFirstArgs>(args?: SelectSubset<T, BadgeFindFirstArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Badge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindFirstOrThrowArgs} args - Arguments to find a Badge
     * @example
     * // Get one Badge
     * const badge = await prisma.badge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, BadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Badges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Badges
     * const badges = await prisma.badge.findMany()
     * 
     * // Get first 10 Badges
     * const badges = await prisma.badge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const badgeWithIdOnly = await prisma.badge.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BadgeFindManyArgs>(args?: SelectSubset<T, BadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Badge.
     * @param {BadgeCreateArgs} args - Arguments to create a Badge.
     * @example
     * // Create one Badge
     * const Badge = await prisma.badge.create({
     *   data: {
     *     // ... data to create a Badge
     *   }
     * })
     * 
     */
    create<T extends BadgeCreateArgs>(args: SelectSubset<T, BadgeCreateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Badges.
     * @param {BadgeCreateManyArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BadgeCreateManyArgs>(args?: SelectSubset<T, BadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Badges and returns the data saved in the database.
     * @param {BadgeCreateManyAndReturnArgs} args - Arguments to create many Badges.
     * @example
     * // Create many Badges
     * const badge = await prisma.badge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Badges and only return the `id`
     * const badgeWithIdOnly = await prisma.badge.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, BadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Badge.
     * @param {BadgeDeleteArgs} args - Arguments to delete one Badge.
     * @example
     * // Delete one Badge
     * const Badge = await prisma.badge.delete({
     *   where: {
     *     // ... filter to delete one Badge
     *   }
     * })
     * 
     */
    delete<T extends BadgeDeleteArgs>(args: SelectSubset<T, BadgeDeleteArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Badge.
     * @param {BadgeUpdateArgs} args - Arguments to update one Badge.
     * @example
     * // Update one Badge
     * const badge = await prisma.badge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BadgeUpdateArgs>(args: SelectSubset<T, BadgeUpdateArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Badges.
     * @param {BadgeDeleteManyArgs} args - Arguments to filter Badges to delete.
     * @example
     * // Delete a few Badges
     * const { count } = await prisma.badge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BadgeDeleteManyArgs>(args?: SelectSubset<T, BadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Badges
     * const badge = await prisma.badge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BadgeUpdateManyArgs>(args: SelectSubset<T, BadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Badge.
     * @param {BadgeUpsertArgs} args - Arguments to update or create a Badge.
     * @example
     * // Update or create a Badge
     * const badge = await prisma.badge.upsert({
     *   create: {
     *     // ... data to create a Badge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Badge we want to update
     *   }
     * })
     */
    upsert<T extends BadgeUpsertArgs>(args: SelectSubset<T, BadgeUpsertArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Badges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeCountArgs} args - Arguments to filter Badges to count.
     * @example
     * // Count the number of Badges
     * const count = await prisma.badge.count({
     *   where: {
     *     // ... the filter for the Badges we want to count
     *   }
     * })
    **/
    count<T extends BadgeCountArgs>(
      args?: Subset<T, BadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BadgeAggregateArgs>(args: Subset<T, BadgeAggregateArgs>): Prisma.PrismaPromise<GetBadgeAggregateType<T>>

    /**
     * Group by Badge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BadgeGroupByArgs['orderBy'] }
        : { orderBy?: BadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Badge model
   */
  readonly fields: BadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Badge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Badge$usersArgs<ExtArgs> = {}>(args?: Subset<T, Badge$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Badge model
   */ 
  interface BadgeFieldRefs {
    readonly id: FieldRef<"Badge", 'Int'>
    readonly name: FieldRef<"Badge", 'String'>
    readonly description: FieldRef<"Badge", 'String'>
    readonly icon: FieldRef<"Badge", 'String'>
    readonly criteria: FieldRef<"Badge", 'String'>
    readonly createdAt: FieldRef<"Badge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Badge findUnique
   */
  export type BadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findUniqueOrThrow
   */
  export type BadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge findFirst
   */
  export type BadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findFirstOrThrow
   */
  export type BadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badge to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Badges.
     */
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge findMany
   */
  export type BadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter, which Badges to fetch.
     */
    where?: BadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Badges to fetch.
     */
    orderBy?: BadgeOrderByWithRelationInput | BadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Badges.
     */
    cursor?: BadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Badges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Badges.
     */
    skip?: number
    distinct?: BadgeScalarFieldEnum | BadgeScalarFieldEnum[]
  }

  /**
   * Badge create
   */
  export type BadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Badge.
     */
    data: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
  }

  /**
   * Badge createMany
   */
  export type BadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge createManyAndReturn
   */
  export type BadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Badges.
     */
    data: BadgeCreateManyInput | BadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Badge update
   */
  export type BadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Badge.
     */
    data: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
    /**
     * Choose, which Badge to update.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge updateMany
   */
  export type BadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Badges.
     */
    data: XOR<BadgeUpdateManyMutationInput, BadgeUncheckedUpdateManyInput>
    /**
     * Filter which Badges to update
     */
    where?: BadgeWhereInput
  }

  /**
   * Badge upsert
   */
  export type BadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Badge to update in case it exists.
     */
    where: BadgeWhereUniqueInput
    /**
     * In case the Badge found by the `where` argument doesn't exist, create a new Badge with this data.
     */
    create: XOR<BadgeCreateInput, BadgeUncheckedCreateInput>
    /**
     * In case the Badge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BadgeUpdateInput, BadgeUncheckedUpdateInput>
  }

  /**
   * Badge delete
   */
  export type BadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
    /**
     * Filter which Badge to delete.
     */
    where: BadgeWhereUniqueInput
  }

  /**
   * Badge deleteMany
   */
  export type BadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Badges to delete
     */
    where?: BadgeWhereInput
  }

  /**
   * Badge.users
   */
  export type Badge$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    cursor?: UserBadgeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * Badge without action
   */
  export type BadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Badge
     */
    select?: BadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BadgeInclude<ExtArgs> | null
  }


  /**
   * Model UserBadge
   */

  export type AggregateUserBadge = {
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  export type UserBadgeAvgAggregateOutputType = {
    badgeId: number | null
  }

  export type UserBadgeSumAggregateOutputType = {
    badgeId: number | null
  }

  export type UserBadgeMinAggregateOutputType = {
    userId: string | null
    badgeId: number | null
    earnedAt: Date | null
  }

  export type UserBadgeMaxAggregateOutputType = {
    userId: string | null
    badgeId: number | null
    earnedAt: Date | null
  }

  export type UserBadgeCountAggregateOutputType = {
    userId: number
    badgeId: number
    earnedAt: number
    _all: number
  }


  export type UserBadgeAvgAggregateInputType = {
    badgeId?: true
  }

  export type UserBadgeSumAggregateInputType = {
    badgeId?: true
  }

  export type UserBadgeMinAggregateInputType = {
    userId?: true
    badgeId?: true
    earnedAt?: true
  }

  export type UserBadgeMaxAggregateInputType = {
    userId?: true
    badgeId?: true
    earnedAt?: true
  }

  export type UserBadgeCountAggregateInputType = {
    userId?: true
    badgeId?: true
    earnedAt?: true
    _all?: true
  }

  export type UserBadgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadge to aggregate.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBadges
    **/
    _count?: true | UserBadgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBadgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBadgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBadgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBadgeMaxAggregateInputType
  }

  export type GetUserBadgeAggregateType<T extends UserBadgeAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBadge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBadge[P]>
      : GetScalarType<T[P], AggregateUserBadge[P]>
  }




  export type UserBadgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserBadgeWhereInput
    orderBy?: UserBadgeOrderByWithAggregationInput | UserBadgeOrderByWithAggregationInput[]
    by: UserBadgeScalarFieldEnum[] | UserBadgeScalarFieldEnum
    having?: UserBadgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBadgeCountAggregateInputType | true
    _avg?: UserBadgeAvgAggregateInputType
    _sum?: UserBadgeSumAggregateInputType
    _min?: UserBadgeMinAggregateInputType
    _max?: UserBadgeMaxAggregateInputType
  }

  export type UserBadgeGroupByOutputType = {
    userId: string
    badgeId: number
    earnedAt: Date
    _count: UserBadgeCountAggregateOutputType | null
    _avg: UserBadgeAvgAggregateOutputType | null
    _sum: UserBadgeSumAggregateOutputType | null
    _min: UserBadgeMinAggregateOutputType | null
    _max: UserBadgeMaxAggregateOutputType | null
  }

  type GetUserBadgeGroupByPayload<T extends UserBadgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserBadgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBadgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
            : GetScalarType<T[P], UserBadgeGroupByOutputType[P]>
        }
      >
    >


  export type UserBadgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userBadge"]>

  export type UserBadgeSelectScalar = {
    userId?: boolean
    badgeId?: boolean
    earnedAt?: boolean
  }

  export type UserBadgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }
  export type UserBadgeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    badge?: boolean | BadgeDefaultArgs<ExtArgs>
  }

  export type $UserBadgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserBadge"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      badge: Prisma.$BadgePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      badgeId: number
      earnedAt: Date
    }, ExtArgs["result"]["userBadge"]>
    composites: {}
  }

  type UserBadgeGetPayload<S extends boolean | null | undefined | UserBadgeDefaultArgs> = $Result.GetResult<Prisma.$UserBadgePayload, S>

  type UserBadgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserBadgeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserBadgeCountAggregateInputType | true
    }

  export interface UserBadgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserBadge'], meta: { name: 'UserBadge' } }
    /**
     * Find zero or one UserBadge that matches the filter.
     * @param {UserBadgeFindUniqueArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserBadgeFindUniqueArgs>(args: SelectSubset<T, UserBadgeFindUniqueArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserBadge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserBadgeFindUniqueOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserBadgeFindUniqueOrThrowArgs>(args: SelectSubset<T, UserBadgeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserBadgeFindFirstArgs>(args?: SelectSubset<T, UserBadgeFindFirstArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserBadge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindFirstOrThrowArgs} args - Arguments to find a UserBadge
     * @example
     * // Get one UserBadge
     * const userBadge = await prisma.userBadge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserBadgeFindFirstOrThrowArgs>(args?: SelectSubset<T, UserBadgeFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserBadges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBadges
     * const userBadges = await prisma.userBadge.findMany()
     * 
     * // Get first 10 UserBadges
     * const userBadges = await prisma.userBadge.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userBadgeWithUserIdOnly = await prisma.userBadge.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserBadgeFindManyArgs>(args?: SelectSubset<T, UserBadgeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserBadge.
     * @param {UserBadgeCreateArgs} args - Arguments to create a UserBadge.
     * @example
     * // Create one UserBadge
     * const UserBadge = await prisma.userBadge.create({
     *   data: {
     *     // ... data to create a UserBadge
     *   }
     * })
     * 
     */
    create<T extends UserBadgeCreateArgs>(args: SelectSubset<T, UserBadgeCreateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserBadges.
     * @param {UserBadgeCreateManyArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserBadgeCreateManyArgs>(args?: SelectSubset<T, UserBadgeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserBadges and returns the data saved in the database.
     * @param {UserBadgeCreateManyAndReturnArgs} args - Arguments to create many UserBadges.
     * @example
     * // Create many UserBadges
     * const userBadge = await prisma.userBadge.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserBadges and only return the `userId`
     * const userBadgeWithUserIdOnly = await prisma.userBadge.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserBadgeCreateManyAndReturnArgs>(args?: SelectSubset<T, UserBadgeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserBadge.
     * @param {UserBadgeDeleteArgs} args - Arguments to delete one UserBadge.
     * @example
     * // Delete one UserBadge
     * const UserBadge = await prisma.userBadge.delete({
     *   where: {
     *     // ... filter to delete one UserBadge
     *   }
     * })
     * 
     */
    delete<T extends UserBadgeDeleteArgs>(args: SelectSubset<T, UserBadgeDeleteArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserBadge.
     * @param {UserBadgeUpdateArgs} args - Arguments to update one UserBadge.
     * @example
     * // Update one UserBadge
     * const userBadge = await prisma.userBadge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserBadgeUpdateArgs>(args: SelectSubset<T, UserBadgeUpdateArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserBadges.
     * @param {UserBadgeDeleteManyArgs} args - Arguments to filter UserBadges to delete.
     * @example
     * // Delete a few UserBadges
     * const { count } = await prisma.userBadge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserBadgeDeleteManyArgs>(args?: SelectSubset<T, UserBadgeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBadges
     * const userBadge = await prisma.userBadge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserBadgeUpdateManyArgs>(args: SelectSubset<T, UserBadgeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBadge.
     * @param {UserBadgeUpsertArgs} args - Arguments to update or create a UserBadge.
     * @example
     * // Update or create a UserBadge
     * const userBadge = await prisma.userBadge.upsert({
     *   create: {
     *     // ... data to create a UserBadge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBadge we want to update
     *   }
     * })
     */
    upsert<T extends UserBadgeUpsertArgs>(args: SelectSubset<T, UserBadgeUpsertArgs<ExtArgs>>): Prisma__UserBadgeClient<$Result.GetResult<Prisma.$UserBadgePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserBadges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeCountArgs} args - Arguments to filter UserBadges to count.
     * @example
     * // Count the number of UserBadges
     * const count = await prisma.userBadge.count({
     *   where: {
     *     // ... the filter for the UserBadges we want to count
     *   }
     * })
    **/
    count<T extends UserBadgeCountArgs>(
      args?: Subset<T, UserBadgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBadgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBadgeAggregateArgs>(args: Subset<T, UserBadgeAggregateArgs>): Prisma.PrismaPromise<GetUserBadgeAggregateType<T>>

    /**
     * Group by UserBadge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBadgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBadgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBadgeGroupByArgs['orderBy'] }
        : { orderBy?: UserBadgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBadgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBadgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserBadge model
   */
  readonly fields: UserBadgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBadge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserBadgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    badge<T extends BadgeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BadgeDefaultArgs<ExtArgs>>): Prisma__BadgeClient<$Result.GetResult<Prisma.$BadgePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserBadge model
   */ 
  interface UserBadgeFieldRefs {
    readonly userId: FieldRef<"UserBadge", 'String'>
    readonly badgeId: FieldRef<"UserBadge", 'Int'>
    readonly earnedAt: FieldRef<"UserBadge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserBadge findUnique
   */
  export type UserBadgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findUniqueOrThrow
   */
  export type UserBadgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge findFirst
   */
  export type UserBadgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findFirstOrThrow
   */
  export type UserBadgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadge to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBadges.
     */
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge findMany
   */
  export type UserBadgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter, which UserBadges to fetch.
     */
    where?: UserBadgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBadges to fetch.
     */
    orderBy?: UserBadgeOrderByWithRelationInput | UserBadgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBadges.
     */
    cursor?: UserBadgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBadges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBadges.
     */
    skip?: number
    distinct?: UserBadgeScalarFieldEnum | UserBadgeScalarFieldEnum[]
  }

  /**
   * UserBadge create
   */
  export type UserBadgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to create a UserBadge.
     */
    data: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
  }

  /**
   * UserBadge createMany
   */
  export type UserBadgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserBadge createManyAndReturn
   */
  export type UserBadgeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserBadges.
     */
    data: UserBadgeCreateManyInput | UserBadgeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserBadge update
   */
  export type UserBadgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The data needed to update a UserBadge.
     */
    data: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
    /**
     * Choose, which UserBadge to update.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge updateMany
   */
  export type UserBadgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserBadges.
     */
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyInput>
    /**
     * Filter which UserBadges to update
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge upsert
   */
  export type UserBadgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * The filter to search for the UserBadge to update in case it exists.
     */
    where: UserBadgeWhereUniqueInput
    /**
     * In case the UserBadge found by the `where` argument doesn't exist, create a new UserBadge with this data.
     */
    create: XOR<UserBadgeCreateInput, UserBadgeUncheckedCreateInput>
    /**
     * In case the UserBadge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBadgeUpdateInput, UserBadgeUncheckedUpdateInput>
  }

  /**
   * UserBadge delete
   */
  export type UserBadgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
    /**
     * Filter which UserBadge to delete.
     */
    where: UserBadgeWhereUniqueInput
  }

  /**
   * UserBadge deleteMany
   */
  export type UserBadgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserBadges to delete
     */
    where?: UserBadgeWhereInput
  }

  /**
   * UserBadge without action
   */
  export type UserBadgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserBadge
     */
    select?: UserBadgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserBadgeInclude<ExtArgs> | null
  }


  /**
   * Model CollaborationFeedback
   */

  export type AggregateCollaborationFeedback = {
    _count: CollaborationFeedbackCountAggregateOutputType | null
    _avg: CollaborationFeedbackAvgAggregateOutputType | null
    _sum: CollaborationFeedbackSumAggregateOutputType | null
    _min: CollaborationFeedbackMinAggregateOutputType | null
    _max: CollaborationFeedbackMaxAggregateOutputType | null
  }

  export type CollaborationFeedbackAvgAggregateOutputType = {
    rating: number | null
    collaborationQuality: number | null
    communicationQuality: number | null
    skillMatchQuality: number | null
  }

  export type CollaborationFeedbackSumAggregateOutputType = {
    rating: number | null
    collaborationQuality: number | null
    communicationQuality: number | null
    skillMatchQuality: number | null
  }

  export type CollaborationFeedbackMinAggregateOutputType = {
    id: string | null
    matchId: string | null
    reviewerId: string | null
    reviewedId: string | null
    rating: number | null
    feedback: string | null
    collaborationQuality: number | null
    communicationQuality: number | null
    skillMatchQuality: number | null
    wouldCollaborateAgain: boolean | null
    createdAt: Date | null
  }

  export type CollaborationFeedbackMaxAggregateOutputType = {
    id: string | null
    matchId: string | null
    reviewerId: string | null
    reviewedId: string | null
    rating: number | null
    feedback: string | null
    collaborationQuality: number | null
    communicationQuality: number | null
    skillMatchQuality: number | null
    wouldCollaborateAgain: boolean | null
    createdAt: Date | null
  }

  export type CollaborationFeedbackCountAggregateOutputType = {
    id: number
    matchId: number
    reviewerId: number
    reviewedId: number
    rating: number
    feedback: number
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain: number
    createdAt: number
    _all: number
  }


  export type CollaborationFeedbackAvgAggregateInputType = {
    rating?: true
    collaborationQuality?: true
    communicationQuality?: true
    skillMatchQuality?: true
  }

  export type CollaborationFeedbackSumAggregateInputType = {
    rating?: true
    collaborationQuality?: true
    communicationQuality?: true
    skillMatchQuality?: true
  }

  export type CollaborationFeedbackMinAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    reviewedId?: true
    rating?: true
    feedback?: true
    collaborationQuality?: true
    communicationQuality?: true
    skillMatchQuality?: true
    wouldCollaborateAgain?: true
    createdAt?: true
  }

  export type CollaborationFeedbackMaxAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    reviewedId?: true
    rating?: true
    feedback?: true
    collaborationQuality?: true
    communicationQuality?: true
    skillMatchQuality?: true
    wouldCollaborateAgain?: true
    createdAt?: true
  }

  export type CollaborationFeedbackCountAggregateInputType = {
    id?: true
    matchId?: true
    reviewerId?: true
    reviewedId?: true
    rating?: true
    feedback?: true
    collaborationQuality?: true
    communicationQuality?: true
    skillMatchQuality?: true
    wouldCollaborateAgain?: true
    createdAt?: true
    _all?: true
  }

  export type CollaborationFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationFeedback to aggregate.
     */
    where?: CollaborationFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationFeedbacks to fetch.
     */
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollaborationFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CollaborationFeedbacks
    **/
    _count?: true | CollaborationFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollaborationFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollaborationFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollaborationFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollaborationFeedbackMaxAggregateInputType
  }

  export type GetCollaborationFeedbackAggregateType<T extends CollaborationFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateCollaborationFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollaborationFeedback[P]>
      : GetScalarType<T[P], AggregateCollaborationFeedback[P]>
  }




  export type CollaborationFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollaborationFeedbackWhereInput
    orderBy?: CollaborationFeedbackOrderByWithAggregationInput | CollaborationFeedbackOrderByWithAggregationInput[]
    by: CollaborationFeedbackScalarFieldEnum[] | CollaborationFeedbackScalarFieldEnum
    having?: CollaborationFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollaborationFeedbackCountAggregateInputType | true
    _avg?: CollaborationFeedbackAvgAggregateInputType
    _sum?: CollaborationFeedbackSumAggregateInputType
    _min?: CollaborationFeedbackMinAggregateInputType
    _max?: CollaborationFeedbackMaxAggregateInputType
  }

  export type CollaborationFeedbackGroupByOutputType = {
    id: string
    matchId: string
    reviewerId: string
    reviewedId: string
    rating: number
    feedback: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain: boolean | null
    createdAt: Date
    _count: CollaborationFeedbackCountAggregateOutputType | null
    _avg: CollaborationFeedbackAvgAggregateOutputType | null
    _sum: CollaborationFeedbackSumAggregateOutputType | null
    _min: CollaborationFeedbackMinAggregateOutputType | null
    _max: CollaborationFeedbackMaxAggregateOutputType | null
  }

  type GetCollaborationFeedbackGroupByPayload<T extends CollaborationFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollaborationFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollaborationFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollaborationFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], CollaborationFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type CollaborationFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    reviewerId?: boolean
    reviewedId?: boolean
    rating?: boolean
    feedback?: boolean
    collaborationQuality?: boolean
    communicationQuality?: boolean
    skillMatchQuality?: boolean
    wouldCollaborateAgain?: boolean
    createdAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewed?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationFeedback"]>

  export type CollaborationFeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matchId?: boolean
    reviewerId?: boolean
    reviewedId?: boolean
    rating?: boolean
    feedback?: boolean
    collaborationQuality?: boolean
    communicationQuality?: boolean
    skillMatchQuality?: boolean
    wouldCollaborateAgain?: boolean
    createdAt?: boolean
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewed?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["collaborationFeedback"]>

  export type CollaborationFeedbackSelectScalar = {
    id?: boolean
    matchId?: boolean
    reviewerId?: boolean
    reviewedId?: boolean
    rating?: boolean
    feedback?: boolean
    collaborationQuality?: boolean
    communicationQuality?: boolean
    skillMatchQuality?: boolean
    wouldCollaborateAgain?: boolean
    createdAt?: boolean
  }

  export type CollaborationFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewed?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CollaborationFeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    match?: boolean | MatchDefaultArgs<ExtArgs>
    reviewer?: boolean | UserDefaultArgs<ExtArgs>
    reviewed?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CollaborationFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CollaborationFeedback"
    objects: {
      match: Prisma.$MatchPayload<ExtArgs>
      reviewer: Prisma.$UserPayload<ExtArgs>
      reviewed: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      matchId: string
      reviewerId: string
      reviewedId: string
      rating: number
      feedback: string | null
      collaborationQuality: number
      communicationQuality: number
      skillMatchQuality: number
      wouldCollaborateAgain: boolean | null
      createdAt: Date
    }, ExtArgs["result"]["collaborationFeedback"]>
    composites: {}
  }

  type CollaborationFeedbackGetPayload<S extends boolean | null | undefined | CollaborationFeedbackDefaultArgs> = $Result.GetResult<Prisma.$CollaborationFeedbackPayload, S>

  type CollaborationFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollaborationFeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollaborationFeedbackCountAggregateInputType | true
    }

  export interface CollaborationFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CollaborationFeedback'], meta: { name: 'CollaborationFeedback' } }
    /**
     * Find zero or one CollaborationFeedback that matches the filter.
     * @param {CollaborationFeedbackFindUniqueArgs} args - Arguments to find a CollaborationFeedback
     * @example
     * // Get one CollaborationFeedback
     * const collaborationFeedback = await prisma.collaborationFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollaborationFeedbackFindUniqueArgs>(args: SelectSubset<T, CollaborationFeedbackFindUniqueArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CollaborationFeedback that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollaborationFeedbackFindUniqueOrThrowArgs} args - Arguments to find a CollaborationFeedback
     * @example
     * // Get one CollaborationFeedback
     * const collaborationFeedback = await prisma.collaborationFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollaborationFeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, CollaborationFeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CollaborationFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackFindFirstArgs} args - Arguments to find a CollaborationFeedback
     * @example
     * // Get one CollaborationFeedback
     * const collaborationFeedback = await prisma.collaborationFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollaborationFeedbackFindFirstArgs>(args?: SelectSubset<T, CollaborationFeedbackFindFirstArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CollaborationFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackFindFirstOrThrowArgs} args - Arguments to find a CollaborationFeedback
     * @example
     * // Get one CollaborationFeedback
     * const collaborationFeedback = await prisma.collaborationFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollaborationFeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, CollaborationFeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CollaborationFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CollaborationFeedbacks
     * const collaborationFeedbacks = await prisma.collaborationFeedback.findMany()
     * 
     * // Get first 10 CollaborationFeedbacks
     * const collaborationFeedbacks = await prisma.collaborationFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collaborationFeedbackWithIdOnly = await prisma.collaborationFeedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollaborationFeedbackFindManyArgs>(args?: SelectSubset<T, CollaborationFeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CollaborationFeedback.
     * @param {CollaborationFeedbackCreateArgs} args - Arguments to create a CollaborationFeedback.
     * @example
     * // Create one CollaborationFeedback
     * const CollaborationFeedback = await prisma.collaborationFeedback.create({
     *   data: {
     *     // ... data to create a CollaborationFeedback
     *   }
     * })
     * 
     */
    create<T extends CollaborationFeedbackCreateArgs>(args: SelectSubset<T, CollaborationFeedbackCreateArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CollaborationFeedbacks.
     * @param {CollaborationFeedbackCreateManyArgs} args - Arguments to create many CollaborationFeedbacks.
     * @example
     * // Create many CollaborationFeedbacks
     * const collaborationFeedback = await prisma.collaborationFeedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollaborationFeedbackCreateManyArgs>(args?: SelectSubset<T, CollaborationFeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CollaborationFeedbacks and returns the data saved in the database.
     * @param {CollaborationFeedbackCreateManyAndReturnArgs} args - Arguments to create many CollaborationFeedbacks.
     * @example
     * // Create many CollaborationFeedbacks
     * const collaborationFeedback = await prisma.collaborationFeedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CollaborationFeedbacks and only return the `id`
     * const collaborationFeedbackWithIdOnly = await prisma.collaborationFeedback.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollaborationFeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, CollaborationFeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CollaborationFeedback.
     * @param {CollaborationFeedbackDeleteArgs} args - Arguments to delete one CollaborationFeedback.
     * @example
     * // Delete one CollaborationFeedback
     * const CollaborationFeedback = await prisma.collaborationFeedback.delete({
     *   where: {
     *     // ... filter to delete one CollaborationFeedback
     *   }
     * })
     * 
     */
    delete<T extends CollaborationFeedbackDeleteArgs>(args: SelectSubset<T, CollaborationFeedbackDeleteArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CollaborationFeedback.
     * @param {CollaborationFeedbackUpdateArgs} args - Arguments to update one CollaborationFeedback.
     * @example
     * // Update one CollaborationFeedback
     * const collaborationFeedback = await prisma.collaborationFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollaborationFeedbackUpdateArgs>(args: SelectSubset<T, CollaborationFeedbackUpdateArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CollaborationFeedbacks.
     * @param {CollaborationFeedbackDeleteManyArgs} args - Arguments to filter CollaborationFeedbacks to delete.
     * @example
     * // Delete a few CollaborationFeedbacks
     * const { count } = await prisma.collaborationFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollaborationFeedbackDeleteManyArgs>(args?: SelectSubset<T, CollaborationFeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CollaborationFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CollaborationFeedbacks
     * const collaborationFeedback = await prisma.collaborationFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollaborationFeedbackUpdateManyArgs>(args: SelectSubset<T, CollaborationFeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CollaborationFeedback.
     * @param {CollaborationFeedbackUpsertArgs} args - Arguments to update or create a CollaborationFeedback.
     * @example
     * // Update or create a CollaborationFeedback
     * const collaborationFeedback = await prisma.collaborationFeedback.upsert({
     *   create: {
     *     // ... data to create a CollaborationFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CollaborationFeedback we want to update
     *   }
     * })
     */
    upsert<T extends CollaborationFeedbackUpsertArgs>(args: SelectSubset<T, CollaborationFeedbackUpsertArgs<ExtArgs>>): Prisma__CollaborationFeedbackClient<$Result.GetResult<Prisma.$CollaborationFeedbackPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CollaborationFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackCountArgs} args - Arguments to filter CollaborationFeedbacks to count.
     * @example
     * // Count the number of CollaborationFeedbacks
     * const count = await prisma.collaborationFeedback.count({
     *   where: {
     *     // ... the filter for the CollaborationFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends CollaborationFeedbackCountArgs>(
      args?: Subset<T, CollaborationFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollaborationFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CollaborationFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollaborationFeedbackAggregateArgs>(args: Subset<T, CollaborationFeedbackAggregateArgs>): Prisma.PrismaPromise<GetCollaborationFeedbackAggregateType<T>>

    /**
     * Group by CollaborationFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollaborationFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollaborationFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollaborationFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: CollaborationFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollaborationFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollaborationFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CollaborationFeedback model
   */
  readonly fields: CollaborationFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CollaborationFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollaborationFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    match<T extends MatchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MatchDefaultArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewed<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CollaborationFeedback model
   */ 
  interface CollaborationFeedbackFieldRefs {
    readonly id: FieldRef<"CollaborationFeedback", 'String'>
    readonly matchId: FieldRef<"CollaborationFeedback", 'String'>
    readonly reviewerId: FieldRef<"CollaborationFeedback", 'String'>
    readonly reviewedId: FieldRef<"CollaborationFeedback", 'String'>
    readonly rating: FieldRef<"CollaborationFeedback", 'Int'>
    readonly feedback: FieldRef<"CollaborationFeedback", 'String'>
    readonly collaborationQuality: FieldRef<"CollaborationFeedback", 'Int'>
    readonly communicationQuality: FieldRef<"CollaborationFeedback", 'Int'>
    readonly skillMatchQuality: FieldRef<"CollaborationFeedback", 'Int'>
    readonly wouldCollaborateAgain: FieldRef<"CollaborationFeedback", 'Boolean'>
    readonly createdAt: FieldRef<"CollaborationFeedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CollaborationFeedback findUnique
   */
  export type CollaborationFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationFeedback to fetch.
     */
    where: CollaborationFeedbackWhereUniqueInput
  }

  /**
   * CollaborationFeedback findUniqueOrThrow
   */
  export type CollaborationFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationFeedback to fetch.
     */
    where: CollaborationFeedbackWhereUniqueInput
  }

  /**
   * CollaborationFeedback findFirst
   */
  export type CollaborationFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationFeedback to fetch.
     */
    where?: CollaborationFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationFeedbacks to fetch.
     */
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationFeedbacks.
     */
    cursor?: CollaborationFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationFeedbacks.
     */
    distinct?: CollaborationFeedbackScalarFieldEnum | CollaborationFeedbackScalarFieldEnum[]
  }

  /**
   * CollaborationFeedback findFirstOrThrow
   */
  export type CollaborationFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationFeedback to fetch.
     */
    where?: CollaborationFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationFeedbacks to fetch.
     */
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CollaborationFeedbacks.
     */
    cursor?: CollaborationFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CollaborationFeedbacks.
     */
    distinct?: CollaborationFeedbackScalarFieldEnum | CollaborationFeedbackScalarFieldEnum[]
  }

  /**
   * CollaborationFeedback findMany
   */
  export type CollaborationFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which CollaborationFeedbacks to fetch.
     */
    where?: CollaborationFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CollaborationFeedbacks to fetch.
     */
    orderBy?: CollaborationFeedbackOrderByWithRelationInput | CollaborationFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CollaborationFeedbacks.
     */
    cursor?: CollaborationFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CollaborationFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CollaborationFeedbacks.
     */
    skip?: number
    distinct?: CollaborationFeedbackScalarFieldEnum | CollaborationFeedbackScalarFieldEnum[]
  }

  /**
   * CollaborationFeedback create
   */
  export type CollaborationFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a CollaborationFeedback.
     */
    data: XOR<CollaborationFeedbackCreateInput, CollaborationFeedbackUncheckedCreateInput>
  }

  /**
   * CollaborationFeedback createMany
   */
  export type CollaborationFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CollaborationFeedbacks.
     */
    data: CollaborationFeedbackCreateManyInput | CollaborationFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CollaborationFeedback createManyAndReturn
   */
  export type CollaborationFeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CollaborationFeedbacks.
     */
    data: CollaborationFeedbackCreateManyInput | CollaborationFeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CollaborationFeedback update
   */
  export type CollaborationFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a CollaborationFeedback.
     */
    data: XOR<CollaborationFeedbackUpdateInput, CollaborationFeedbackUncheckedUpdateInput>
    /**
     * Choose, which CollaborationFeedback to update.
     */
    where: CollaborationFeedbackWhereUniqueInput
  }

  /**
   * CollaborationFeedback updateMany
   */
  export type CollaborationFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CollaborationFeedbacks.
     */
    data: XOR<CollaborationFeedbackUpdateManyMutationInput, CollaborationFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which CollaborationFeedbacks to update
     */
    where?: CollaborationFeedbackWhereInput
  }

  /**
   * CollaborationFeedback upsert
   */
  export type CollaborationFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the CollaborationFeedback to update in case it exists.
     */
    where: CollaborationFeedbackWhereUniqueInput
    /**
     * In case the CollaborationFeedback found by the `where` argument doesn't exist, create a new CollaborationFeedback with this data.
     */
    create: XOR<CollaborationFeedbackCreateInput, CollaborationFeedbackUncheckedCreateInput>
    /**
     * In case the CollaborationFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollaborationFeedbackUpdateInput, CollaborationFeedbackUncheckedUpdateInput>
  }

  /**
   * CollaborationFeedback delete
   */
  export type CollaborationFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
    /**
     * Filter which CollaborationFeedback to delete.
     */
    where: CollaborationFeedbackWhereUniqueInput
  }

  /**
   * CollaborationFeedback deleteMany
   */
  export type CollaborationFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CollaborationFeedbacks to delete
     */
    where?: CollaborationFeedbackWhereInput
  }

  /**
   * CollaborationFeedback without action
   */
  export type CollaborationFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollaborationFeedback
     */
    select?: CollaborationFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollaborationFeedbackInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    bio: 'bio',
    avatarUrl: 'avatarUrl',
    githubUrl: 'githubUrl',
    linkedinUrl: 'linkedinUrl',
    portfolioUrl: 'portfolioUrl',
    experienceLevel: 'experienceLevel',
    timezone: 'timezone',
    availabilityHours: 'availabilityHours',
    workStyle: 'workStyle',
    commsPref: 'commsPref',
    values: 'values',
    isOnboarded: 'isOnboarded',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SkillScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    createdAt: 'createdAt'
  };

  export type SkillScalarFieldEnum = (typeof SkillScalarFieldEnum)[keyof typeof SkillScalarFieldEnum]


  export const UserOfferScalarFieldEnum: {
    userId: 'userId',
    skillId: 'skillId',
    proficiency: 'proficiency',
    createdAt: 'createdAt'
  };

  export type UserOfferScalarFieldEnum = (typeof UserOfferScalarFieldEnum)[keyof typeof UserOfferScalarFieldEnum]


  export const UserNeedScalarFieldEnum: {
    userId: 'userId',
    skillId: 'skillId',
    mustHave: 'mustHave',
    priority: 'priority',
    createdAt: 'createdAt'
  };

  export type UserNeedScalarFieldEnum = (typeof UserNeedScalarFieldEnum)[keyof typeof UserNeedScalarFieldEnum]


  export const MatchPreferencesScalarFieldEnum: {
    userId: 'userId',
    skillWeight: 'skillWeight',
    availabilityWeight: 'availabilityWeight',
    timezoneWeight: 'timezoneWeight',
    collabStyleWeight: 'collabStyleWeight',
    personalityWeight: 'personalityWeight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchPreferencesScalarFieldEnum = (typeof MatchPreferencesScalarFieldEnum)[keyof typeof MatchPreferencesScalarFieldEnum]


  export const ProjectInterestScalarFieldEnum: {
    userId: 'userId',
    interest: 'interest',
    createdAt: 'createdAt'
  };

  export type ProjectInterestScalarFieldEnum = (typeof ProjectInterestScalarFieldEnum)[keyof typeof ProjectInterestScalarFieldEnum]


  export const CollaborationPreferencesScalarFieldEnum: {
    userId: 'userId',
    preferredTools: 'preferredTools',
    projectStageInterest: 'projectStageInterest',
    teamSizePreference: 'teamSizePreference',
    commitmentLevel: 'commitmentLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CollaborationPreferencesScalarFieldEnum = (typeof CollaborationPreferencesScalarFieldEnum)[keyof typeof CollaborationPreferencesScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    userAId: 'userAId',
    userBId: 'userBId',
    matchScore: 'matchScore',
    status: 'status',
    userALiked: 'userALiked',
    userBLiked: 'userBLiked',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const MatchInteractionScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    userId: 'userId',
    action: 'action',
    createdAt: 'createdAt'
  };

  export type MatchInteractionScalarFieldEnum = (typeof MatchInteractionScalarFieldEnum)[keyof typeof MatchInteractionScalarFieldEnum]


  export const BadgeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    icon: 'icon',
    criteria: 'criteria',
    createdAt: 'createdAt'
  };

  export type BadgeScalarFieldEnum = (typeof BadgeScalarFieldEnum)[keyof typeof BadgeScalarFieldEnum]


  export const UserBadgeScalarFieldEnum: {
    userId: 'userId',
    badgeId: 'badgeId',
    earnedAt: 'earnedAt'
  };

  export type UserBadgeScalarFieldEnum = (typeof UserBadgeScalarFieldEnum)[keyof typeof UserBadgeScalarFieldEnum]


  export const CollaborationFeedbackScalarFieldEnum: {
    id: 'id',
    matchId: 'matchId',
    reviewerId: 'reviewerId',
    reviewedId: 'reviewedId',
    rating: 'rating',
    feedback: 'feedback',
    collaborationQuality: 'collaborationQuality',
    communicationQuality: 'communicationQuality',
    skillMatchQuality: 'skillMatchQuality',
    wouldCollaborateAgain: 'wouldCollaborateAgain',
    createdAt: 'createdAt'
  };

  export type CollaborationFeedbackScalarFieldEnum = (typeof CollaborationFeedbackScalarFieldEnum)[keyof typeof CollaborationFeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    githubUrl?: StringNullableFilter<"User"> | string | null
    linkedinUrl?: StringNullableFilter<"User"> | string | null
    portfolioUrl?: StringNullableFilter<"User"> | string | null
    experienceLevel?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    availabilityHours?: IntNullableFilter<"User"> | number | null
    workStyle?: StringNullableFilter<"User"> | string | null
    commsPref?: StringNullableFilter<"User"> | string | null
    values?: StringNullableListFilter<"User">
    isOnboarded?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    offers?: UserOfferListRelationFilter
    needs?: UserNeedListRelationFilter
    matchPreferences?: XOR<MatchPreferencesNullableRelationFilter, MatchPreferencesWhereInput> | null
    projectInterests?: ProjectInterestListRelationFilter
    collaborationPrefs?: XOR<CollaborationPreferencesNullableRelationFilter, CollaborationPreferencesWhereInput> | null
    matchesAsA?: MatchListRelationFilter
    matchesAsB?: MatchListRelationFilter
    matchInteractions?: MatchInteractionListRelationFilter
    badges?: UserBadgeListRelationFilter
    feedbackGiven?: CollaborationFeedbackListRelationFilter
    feedbackReceived?: CollaborationFeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    githubUrl?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    portfolioUrl?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    availabilityHours?: SortOrderInput | SortOrder
    workStyle?: SortOrderInput | SortOrder
    commsPref?: SortOrderInput | SortOrder
    values?: SortOrder
    isOnboarded?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    offers?: UserOfferOrderByRelationAggregateInput
    needs?: UserNeedOrderByRelationAggregateInput
    matchPreferences?: MatchPreferencesOrderByWithRelationInput
    projectInterests?: ProjectInterestOrderByRelationAggregateInput
    collaborationPrefs?: CollaborationPreferencesOrderByWithRelationInput
    matchesAsA?: MatchOrderByRelationAggregateInput
    matchesAsB?: MatchOrderByRelationAggregateInput
    matchInteractions?: MatchInteractionOrderByRelationAggregateInput
    badges?: UserBadgeOrderByRelationAggregateInput
    feedbackGiven?: CollaborationFeedbackOrderByRelationAggregateInput
    feedbackReceived?: CollaborationFeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    bio?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    githubUrl?: StringNullableFilter<"User"> | string | null
    linkedinUrl?: StringNullableFilter<"User"> | string | null
    portfolioUrl?: StringNullableFilter<"User"> | string | null
    experienceLevel?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    availabilityHours?: IntNullableFilter<"User"> | number | null
    workStyle?: StringNullableFilter<"User"> | string | null
    commsPref?: StringNullableFilter<"User"> | string | null
    values?: StringNullableListFilter<"User">
    isOnboarded?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    offers?: UserOfferListRelationFilter
    needs?: UserNeedListRelationFilter
    matchPreferences?: XOR<MatchPreferencesNullableRelationFilter, MatchPreferencesWhereInput> | null
    projectInterests?: ProjectInterestListRelationFilter
    collaborationPrefs?: XOR<CollaborationPreferencesNullableRelationFilter, CollaborationPreferencesWhereInput> | null
    matchesAsA?: MatchListRelationFilter
    matchesAsB?: MatchListRelationFilter
    matchInteractions?: MatchInteractionListRelationFilter
    badges?: UserBadgeListRelationFilter
    feedbackGiven?: CollaborationFeedbackListRelationFilter
    feedbackReceived?: CollaborationFeedbackListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    githubUrl?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    portfolioUrl?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    availabilityHours?: SortOrderInput | SortOrder
    workStyle?: SortOrderInput | SortOrder
    commsPref?: SortOrderInput | SortOrder
    values?: SortOrder
    isOnboarded?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    githubUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    linkedinUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    portfolioUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    experienceLevel?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    availabilityHours?: IntNullableWithAggregatesFilter<"User"> | number | null
    workStyle?: StringNullableWithAggregatesFilter<"User"> | string | null
    commsPref?: StringNullableWithAggregatesFilter<"User"> | string | null
    values?: StringNullableListFilter<"User">
    isOnboarded?: BoolWithAggregatesFilter<"User"> | boolean
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SkillWhereInput = {
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    id?: IntFilter<"Skill"> | number
    name?: StringFilter<"Skill"> | string
    category?: StringFilter<"Skill"> | string
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    offers?: UserOfferListRelationFilter
    needs?: UserNeedListRelationFilter
  }

  export type SkillOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    offers?: UserOfferOrderByRelationAggregateInput
    needs?: UserNeedOrderByRelationAggregateInput
  }

  export type SkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SkillWhereInput | SkillWhereInput[]
    OR?: SkillWhereInput[]
    NOT?: SkillWhereInput | SkillWhereInput[]
    category?: StringFilter<"Skill"> | string
    createdAt?: DateTimeFilter<"Skill"> | Date | string
    offers?: UserOfferListRelationFilter
    needs?: UserNeedListRelationFilter
  }, "id" | "name">

  export type SkillOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    _count?: SkillCountOrderByAggregateInput
    _avg?: SkillAvgOrderByAggregateInput
    _max?: SkillMaxOrderByAggregateInput
    _min?: SkillMinOrderByAggregateInput
    _sum?: SkillSumOrderByAggregateInput
  }

  export type SkillScalarWhereWithAggregatesInput = {
    AND?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    OR?: SkillScalarWhereWithAggregatesInput[]
    NOT?: SkillScalarWhereWithAggregatesInput | SkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Skill"> | number
    name?: StringWithAggregatesFilter<"Skill"> | string
    category?: StringWithAggregatesFilter<"Skill"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Skill"> | Date | string
  }

  export type UserOfferWhereInput = {
    AND?: UserOfferWhereInput | UserOfferWhereInput[]
    OR?: UserOfferWhereInput[]
    NOT?: UserOfferWhereInput | UserOfferWhereInput[]
    userId?: StringFilter<"UserOffer"> | string
    skillId?: IntFilter<"UserOffer"> | number
    proficiency?: IntFilter<"UserOffer"> | number
    createdAt?: DateTimeFilter<"UserOffer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    skill?: XOR<SkillRelationFilter, SkillWhereInput>
  }

  export type UserOfferOrderByWithRelationInput = {
    userId?: SortOrder
    skillId?: SortOrder
    proficiency?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    skill?: SkillOrderByWithRelationInput
  }

  export type UserOfferWhereUniqueInput = Prisma.AtLeast<{
    userId_skillId?: UserOfferUserIdSkillIdCompoundUniqueInput
    AND?: UserOfferWhereInput | UserOfferWhereInput[]
    OR?: UserOfferWhereInput[]
    NOT?: UserOfferWhereInput | UserOfferWhereInput[]
    userId?: StringFilter<"UserOffer"> | string
    skillId?: IntFilter<"UserOffer"> | number
    proficiency?: IntFilter<"UserOffer"> | number
    createdAt?: DateTimeFilter<"UserOffer"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    skill?: XOR<SkillRelationFilter, SkillWhereInput>
  }, "userId_skillId">

  export type UserOfferOrderByWithAggregationInput = {
    userId?: SortOrder
    skillId?: SortOrder
    proficiency?: SortOrder
    createdAt?: SortOrder
    _count?: UserOfferCountOrderByAggregateInput
    _avg?: UserOfferAvgOrderByAggregateInput
    _max?: UserOfferMaxOrderByAggregateInput
    _min?: UserOfferMinOrderByAggregateInput
    _sum?: UserOfferSumOrderByAggregateInput
  }

  export type UserOfferScalarWhereWithAggregatesInput = {
    AND?: UserOfferScalarWhereWithAggregatesInput | UserOfferScalarWhereWithAggregatesInput[]
    OR?: UserOfferScalarWhereWithAggregatesInput[]
    NOT?: UserOfferScalarWhereWithAggregatesInput | UserOfferScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserOffer"> | string
    skillId?: IntWithAggregatesFilter<"UserOffer"> | number
    proficiency?: IntWithAggregatesFilter<"UserOffer"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserOffer"> | Date | string
  }

  export type UserNeedWhereInput = {
    AND?: UserNeedWhereInput | UserNeedWhereInput[]
    OR?: UserNeedWhereInput[]
    NOT?: UserNeedWhereInput | UserNeedWhereInput[]
    userId?: StringFilter<"UserNeed"> | string
    skillId?: IntFilter<"UserNeed"> | number
    mustHave?: BoolFilter<"UserNeed"> | boolean
    priority?: IntFilter<"UserNeed"> | number
    createdAt?: DateTimeFilter<"UserNeed"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    skill?: XOR<SkillRelationFilter, SkillWhereInput>
  }

  export type UserNeedOrderByWithRelationInput = {
    userId?: SortOrder
    skillId?: SortOrder
    mustHave?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    skill?: SkillOrderByWithRelationInput
  }

  export type UserNeedWhereUniqueInput = Prisma.AtLeast<{
    userId_skillId?: UserNeedUserIdSkillIdCompoundUniqueInput
    AND?: UserNeedWhereInput | UserNeedWhereInput[]
    OR?: UserNeedWhereInput[]
    NOT?: UserNeedWhereInput | UserNeedWhereInput[]
    userId?: StringFilter<"UserNeed"> | string
    skillId?: IntFilter<"UserNeed"> | number
    mustHave?: BoolFilter<"UserNeed"> | boolean
    priority?: IntFilter<"UserNeed"> | number
    createdAt?: DateTimeFilter<"UserNeed"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    skill?: XOR<SkillRelationFilter, SkillWhereInput>
  }, "userId_skillId">

  export type UserNeedOrderByWithAggregationInput = {
    userId?: SortOrder
    skillId?: SortOrder
    mustHave?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    _count?: UserNeedCountOrderByAggregateInput
    _avg?: UserNeedAvgOrderByAggregateInput
    _max?: UserNeedMaxOrderByAggregateInput
    _min?: UserNeedMinOrderByAggregateInput
    _sum?: UserNeedSumOrderByAggregateInput
  }

  export type UserNeedScalarWhereWithAggregatesInput = {
    AND?: UserNeedScalarWhereWithAggregatesInput | UserNeedScalarWhereWithAggregatesInput[]
    OR?: UserNeedScalarWhereWithAggregatesInput[]
    NOT?: UserNeedScalarWhereWithAggregatesInput | UserNeedScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserNeed"> | string
    skillId?: IntWithAggregatesFilter<"UserNeed"> | number
    mustHave?: BoolWithAggregatesFilter<"UserNeed"> | boolean
    priority?: IntWithAggregatesFilter<"UserNeed"> | number
    createdAt?: DateTimeWithAggregatesFilter<"UserNeed"> | Date | string
  }

  export type MatchPreferencesWhereInput = {
    AND?: MatchPreferencesWhereInput | MatchPreferencesWhereInput[]
    OR?: MatchPreferencesWhereInput[]
    NOT?: MatchPreferencesWhereInput | MatchPreferencesWhereInput[]
    userId?: StringFilter<"MatchPreferences"> | string
    skillWeight?: IntFilter<"MatchPreferences"> | number
    availabilityWeight?: IntFilter<"MatchPreferences"> | number
    timezoneWeight?: IntFilter<"MatchPreferences"> | number
    collabStyleWeight?: IntFilter<"MatchPreferences"> | number
    personalityWeight?: IntFilter<"MatchPreferences"> | number
    createdAt?: DateTimeFilter<"MatchPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"MatchPreferences"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MatchPreferencesOrderByWithRelationInput = {
    userId?: SortOrder
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MatchPreferencesWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: MatchPreferencesWhereInput | MatchPreferencesWhereInput[]
    OR?: MatchPreferencesWhereInput[]
    NOT?: MatchPreferencesWhereInput | MatchPreferencesWhereInput[]
    skillWeight?: IntFilter<"MatchPreferences"> | number
    availabilityWeight?: IntFilter<"MatchPreferences"> | number
    timezoneWeight?: IntFilter<"MatchPreferences"> | number
    collabStyleWeight?: IntFilter<"MatchPreferences"> | number
    personalityWeight?: IntFilter<"MatchPreferences"> | number
    createdAt?: DateTimeFilter<"MatchPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"MatchPreferences"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId">

  export type MatchPreferencesOrderByWithAggregationInput = {
    userId?: SortOrder
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchPreferencesCountOrderByAggregateInput
    _avg?: MatchPreferencesAvgOrderByAggregateInput
    _max?: MatchPreferencesMaxOrderByAggregateInput
    _min?: MatchPreferencesMinOrderByAggregateInput
    _sum?: MatchPreferencesSumOrderByAggregateInput
  }

  export type MatchPreferencesScalarWhereWithAggregatesInput = {
    AND?: MatchPreferencesScalarWhereWithAggregatesInput | MatchPreferencesScalarWhereWithAggregatesInput[]
    OR?: MatchPreferencesScalarWhereWithAggregatesInput[]
    NOT?: MatchPreferencesScalarWhereWithAggregatesInput | MatchPreferencesScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"MatchPreferences"> | string
    skillWeight?: IntWithAggregatesFilter<"MatchPreferences"> | number
    availabilityWeight?: IntWithAggregatesFilter<"MatchPreferences"> | number
    timezoneWeight?: IntWithAggregatesFilter<"MatchPreferences"> | number
    collabStyleWeight?: IntWithAggregatesFilter<"MatchPreferences"> | number
    personalityWeight?: IntWithAggregatesFilter<"MatchPreferences"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MatchPreferences"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MatchPreferences"> | Date | string
  }

  export type ProjectInterestWhereInput = {
    AND?: ProjectInterestWhereInput | ProjectInterestWhereInput[]
    OR?: ProjectInterestWhereInput[]
    NOT?: ProjectInterestWhereInput | ProjectInterestWhereInput[]
    userId?: StringFilter<"ProjectInterest"> | string
    interest?: StringFilter<"ProjectInterest"> | string
    createdAt?: DateTimeFilter<"ProjectInterest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProjectInterestOrderByWithRelationInput = {
    userId?: SortOrder
    interest?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProjectInterestWhereUniqueInput = Prisma.AtLeast<{
    userId_interest?: ProjectInterestUserIdInterestCompoundUniqueInput
    AND?: ProjectInterestWhereInput | ProjectInterestWhereInput[]
    OR?: ProjectInterestWhereInput[]
    NOT?: ProjectInterestWhereInput | ProjectInterestWhereInput[]
    userId?: StringFilter<"ProjectInterest"> | string
    interest?: StringFilter<"ProjectInterest"> | string
    createdAt?: DateTimeFilter<"ProjectInterest"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId_interest">

  export type ProjectInterestOrderByWithAggregationInput = {
    userId?: SortOrder
    interest?: SortOrder
    createdAt?: SortOrder
    _count?: ProjectInterestCountOrderByAggregateInput
    _max?: ProjectInterestMaxOrderByAggregateInput
    _min?: ProjectInterestMinOrderByAggregateInput
  }

  export type ProjectInterestScalarWhereWithAggregatesInput = {
    AND?: ProjectInterestScalarWhereWithAggregatesInput | ProjectInterestScalarWhereWithAggregatesInput[]
    OR?: ProjectInterestScalarWhereWithAggregatesInput[]
    NOT?: ProjectInterestScalarWhereWithAggregatesInput | ProjectInterestScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"ProjectInterest"> | string
    interest?: StringWithAggregatesFilter<"ProjectInterest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProjectInterest"> | Date | string
  }

  export type CollaborationPreferencesWhereInput = {
    AND?: CollaborationPreferencesWhereInput | CollaborationPreferencesWhereInput[]
    OR?: CollaborationPreferencesWhereInput[]
    NOT?: CollaborationPreferencesWhereInput | CollaborationPreferencesWhereInput[]
    userId?: StringFilter<"CollaborationPreferences"> | string
    preferredTools?: StringNullableListFilter<"CollaborationPreferences">
    projectStageInterest?: StringNullableListFilter<"CollaborationPreferences">
    teamSizePreference?: StringNullableFilter<"CollaborationPreferences"> | string | null
    commitmentLevel?: StringNullableFilter<"CollaborationPreferences"> | string | null
    createdAt?: DateTimeFilter<"CollaborationPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"CollaborationPreferences"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CollaborationPreferencesOrderByWithRelationInput = {
    userId?: SortOrder
    preferredTools?: SortOrder
    projectStageInterest?: SortOrder
    teamSizePreference?: SortOrderInput | SortOrder
    commitmentLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CollaborationPreferencesWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: CollaborationPreferencesWhereInput | CollaborationPreferencesWhereInput[]
    OR?: CollaborationPreferencesWhereInput[]
    NOT?: CollaborationPreferencesWhereInput | CollaborationPreferencesWhereInput[]
    preferredTools?: StringNullableListFilter<"CollaborationPreferences">
    projectStageInterest?: StringNullableListFilter<"CollaborationPreferences">
    teamSizePreference?: StringNullableFilter<"CollaborationPreferences"> | string | null
    commitmentLevel?: StringNullableFilter<"CollaborationPreferences"> | string | null
    createdAt?: DateTimeFilter<"CollaborationPreferences"> | Date | string
    updatedAt?: DateTimeFilter<"CollaborationPreferences"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId">

  export type CollaborationPreferencesOrderByWithAggregationInput = {
    userId?: SortOrder
    preferredTools?: SortOrder
    projectStageInterest?: SortOrder
    teamSizePreference?: SortOrderInput | SortOrder
    commitmentLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CollaborationPreferencesCountOrderByAggregateInput
    _max?: CollaborationPreferencesMaxOrderByAggregateInput
    _min?: CollaborationPreferencesMinOrderByAggregateInput
  }

  export type CollaborationPreferencesScalarWhereWithAggregatesInput = {
    AND?: CollaborationPreferencesScalarWhereWithAggregatesInput | CollaborationPreferencesScalarWhereWithAggregatesInput[]
    OR?: CollaborationPreferencesScalarWhereWithAggregatesInput[]
    NOT?: CollaborationPreferencesScalarWhereWithAggregatesInput | CollaborationPreferencesScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"CollaborationPreferences"> | string
    preferredTools?: StringNullableListFilter<"CollaborationPreferences">
    projectStageInterest?: StringNullableListFilter<"CollaborationPreferences">
    teamSizePreference?: StringNullableWithAggregatesFilter<"CollaborationPreferences"> | string | null
    commitmentLevel?: StringNullableWithAggregatesFilter<"CollaborationPreferences"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CollaborationPreferences"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CollaborationPreferences"> | Date | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    userAId?: StringFilter<"Match"> | string
    userBId?: StringFilter<"Match"> | string
    matchScore?: DecimalNullableFilter<"Match"> | Decimal | DecimalJsLike | number | string | null
    status?: StringFilter<"Match"> | string
    userALiked?: BoolFilter<"Match"> | boolean
    userBLiked?: BoolFilter<"Match"> | boolean
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    userA?: XOR<UserRelationFilter, UserWhereInput>
    userB?: XOR<UserRelationFilter, UserWhereInput>
    interactions?: MatchInteractionListRelationFilter
    feedback?: CollaborationFeedbackListRelationFilter
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    userAId?: SortOrder
    userBId?: SortOrder
    matchScore?: SortOrderInput | SortOrder
    status?: SortOrder
    userALiked?: SortOrder
    userBLiked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userA?: UserOrderByWithRelationInput
    userB?: UserOrderByWithRelationInput
    interactions?: MatchInteractionOrderByRelationAggregateInput
    feedback?: CollaborationFeedbackOrderByRelationAggregateInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userAId_userBId?: MatchUserAIdUserBIdCompoundUniqueInput
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    userAId?: StringFilter<"Match"> | string
    userBId?: StringFilter<"Match"> | string
    matchScore?: DecimalNullableFilter<"Match"> | Decimal | DecimalJsLike | number | string | null
    status?: StringFilter<"Match"> | string
    userALiked?: BoolFilter<"Match"> | boolean
    userBLiked?: BoolFilter<"Match"> | boolean
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
    userA?: XOR<UserRelationFilter, UserWhereInput>
    userB?: XOR<UserRelationFilter, UserWhereInput>
    interactions?: MatchInteractionListRelationFilter
    feedback?: CollaborationFeedbackListRelationFilter
  }, "id" | "userAId_userBId">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    userAId?: SortOrder
    userBId?: SortOrder
    matchScore?: SortOrderInput | SortOrder
    status?: SortOrder
    userALiked?: SortOrder
    userBLiked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _avg?: MatchAvgOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
    _sum?: MatchSumOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    userAId?: StringWithAggregatesFilter<"Match"> | string
    userBId?: StringWithAggregatesFilter<"Match"> | string
    matchScore?: DecimalNullableWithAggregatesFilter<"Match"> | Decimal | DecimalJsLike | number | string | null
    status?: StringWithAggregatesFilter<"Match"> | string
    userALiked?: BoolWithAggregatesFilter<"Match"> | boolean
    userBLiked?: BoolWithAggregatesFilter<"Match"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Match"> | Date | string
  }

  export type MatchInteractionWhereInput = {
    AND?: MatchInteractionWhereInput | MatchInteractionWhereInput[]
    OR?: MatchInteractionWhereInput[]
    NOT?: MatchInteractionWhereInput | MatchInteractionWhereInput[]
    id?: StringFilter<"MatchInteraction"> | string
    matchId?: StringFilter<"MatchInteraction"> | string
    userId?: StringFilter<"MatchInteraction"> | string
    action?: StringFilter<"MatchInteraction"> | string
    createdAt?: DateTimeFilter<"MatchInteraction"> | Date | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MatchInteractionOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MatchInteractionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MatchInteractionWhereInput | MatchInteractionWhereInput[]
    OR?: MatchInteractionWhereInput[]
    NOT?: MatchInteractionWhereInput | MatchInteractionWhereInput[]
    matchId?: StringFilter<"MatchInteraction"> | string
    userId?: StringFilter<"MatchInteraction"> | string
    action?: StringFilter<"MatchInteraction"> | string
    createdAt?: DateTimeFilter<"MatchInteraction"> | Date | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MatchInteractionOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
    _count?: MatchInteractionCountOrderByAggregateInput
    _max?: MatchInteractionMaxOrderByAggregateInput
    _min?: MatchInteractionMinOrderByAggregateInput
  }

  export type MatchInteractionScalarWhereWithAggregatesInput = {
    AND?: MatchInteractionScalarWhereWithAggregatesInput | MatchInteractionScalarWhereWithAggregatesInput[]
    OR?: MatchInteractionScalarWhereWithAggregatesInput[]
    NOT?: MatchInteractionScalarWhereWithAggregatesInput | MatchInteractionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MatchInteraction"> | string
    matchId?: StringWithAggregatesFilter<"MatchInteraction"> | string
    userId?: StringWithAggregatesFilter<"MatchInteraction"> | string
    action?: StringWithAggregatesFilter<"MatchInteraction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MatchInteraction"> | Date | string
  }

  export type BadgeWhereInput = {
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    id?: IntFilter<"Badge"> | number
    name?: StringFilter<"Badge"> | string
    description?: StringNullableFilter<"Badge"> | string | null
    icon?: StringNullableFilter<"Badge"> | string | null
    criteria?: StringNullableFilter<"Badge"> | string | null
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    users?: UserBadgeListRelationFilter
  }

  export type BadgeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    criteria?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    users?: UserBadgeOrderByRelationAggregateInput
  }

  export type BadgeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: BadgeWhereInput | BadgeWhereInput[]
    OR?: BadgeWhereInput[]
    NOT?: BadgeWhereInput | BadgeWhereInput[]
    description?: StringNullableFilter<"Badge"> | string | null
    icon?: StringNullableFilter<"Badge"> | string | null
    criteria?: StringNullableFilter<"Badge"> | string | null
    createdAt?: DateTimeFilter<"Badge"> | Date | string
    users?: UserBadgeListRelationFilter
  }, "id" | "name">

  export type BadgeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    criteria?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: BadgeCountOrderByAggregateInput
    _avg?: BadgeAvgOrderByAggregateInput
    _max?: BadgeMaxOrderByAggregateInput
    _min?: BadgeMinOrderByAggregateInput
    _sum?: BadgeSumOrderByAggregateInput
  }

  export type BadgeScalarWhereWithAggregatesInput = {
    AND?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    OR?: BadgeScalarWhereWithAggregatesInput[]
    NOT?: BadgeScalarWhereWithAggregatesInput | BadgeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Badge"> | number
    name?: StringWithAggregatesFilter<"Badge"> | string
    description?: StringNullableWithAggregatesFilter<"Badge"> | string | null
    icon?: StringNullableWithAggregatesFilter<"Badge"> | string | null
    criteria?: StringNullableWithAggregatesFilter<"Badge"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Badge"> | Date | string
  }

  export type UserBadgeWhereInput = {
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: IntFilter<"UserBadge"> | number
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    badge?: XOR<BadgeRelationFilter, BadgeWhereInput>
  }

  export type UserBadgeOrderByWithRelationInput = {
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    badge?: BadgeOrderByWithRelationInput
  }

  export type UserBadgeWhereUniqueInput = Prisma.AtLeast<{
    userId_badgeId?: UserBadgeUserIdBadgeIdCompoundUniqueInput
    AND?: UserBadgeWhereInput | UserBadgeWhereInput[]
    OR?: UserBadgeWhereInput[]
    NOT?: UserBadgeWhereInput | UserBadgeWhereInput[]
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: IntFilter<"UserBadge"> | number
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    badge?: XOR<BadgeRelationFilter, BadgeWhereInput>
  }, "userId_badgeId">

  export type UserBadgeOrderByWithAggregationInput = {
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
    _count?: UserBadgeCountOrderByAggregateInput
    _avg?: UserBadgeAvgOrderByAggregateInput
    _max?: UserBadgeMaxOrderByAggregateInput
    _min?: UserBadgeMinOrderByAggregateInput
    _sum?: UserBadgeSumOrderByAggregateInput
  }

  export type UserBadgeScalarWhereWithAggregatesInput = {
    AND?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    OR?: UserBadgeScalarWhereWithAggregatesInput[]
    NOT?: UserBadgeScalarWhereWithAggregatesInput | UserBadgeScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserBadge"> | string
    badgeId?: IntWithAggregatesFilter<"UserBadge"> | number
    earnedAt?: DateTimeWithAggregatesFilter<"UserBadge"> | Date | string
  }

  export type CollaborationFeedbackWhereInput = {
    AND?: CollaborationFeedbackWhereInput | CollaborationFeedbackWhereInput[]
    OR?: CollaborationFeedbackWhereInput[]
    NOT?: CollaborationFeedbackWhereInput | CollaborationFeedbackWhereInput[]
    id?: StringFilter<"CollaborationFeedback"> | string
    matchId?: StringFilter<"CollaborationFeedback"> | string
    reviewerId?: StringFilter<"CollaborationFeedback"> | string
    reviewedId?: StringFilter<"CollaborationFeedback"> | string
    rating?: IntFilter<"CollaborationFeedback"> | number
    feedback?: StringNullableFilter<"CollaborationFeedback"> | string | null
    collaborationQuality?: IntFilter<"CollaborationFeedback"> | number
    communicationQuality?: IntFilter<"CollaborationFeedback"> | number
    skillMatchQuality?: IntFilter<"CollaborationFeedback"> | number
    wouldCollaborateAgain?: BoolNullableFilter<"CollaborationFeedback"> | boolean | null
    createdAt?: DateTimeFilter<"CollaborationFeedback"> | Date | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
    reviewed?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CollaborationFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    reviewedId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrderInput | SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
    wouldCollaborateAgain?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    match?: MatchOrderByWithRelationInput
    reviewer?: UserOrderByWithRelationInput
    reviewed?: UserOrderByWithRelationInput
  }

  export type CollaborationFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    matchId_reviewerId?: CollaborationFeedbackMatchIdReviewerIdCompoundUniqueInput
    AND?: CollaborationFeedbackWhereInput | CollaborationFeedbackWhereInput[]
    OR?: CollaborationFeedbackWhereInput[]
    NOT?: CollaborationFeedbackWhereInput | CollaborationFeedbackWhereInput[]
    matchId?: StringFilter<"CollaborationFeedback"> | string
    reviewerId?: StringFilter<"CollaborationFeedback"> | string
    reviewedId?: StringFilter<"CollaborationFeedback"> | string
    rating?: IntFilter<"CollaborationFeedback"> | number
    feedback?: StringNullableFilter<"CollaborationFeedback"> | string | null
    collaborationQuality?: IntFilter<"CollaborationFeedback"> | number
    communicationQuality?: IntFilter<"CollaborationFeedback"> | number
    skillMatchQuality?: IntFilter<"CollaborationFeedback"> | number
    wouldCollaborateAgain?: BoolNullableFilter<"CollaborationFeedback"> | boolean | null
    createdAt?: DateTimeFilter<"CollaborationFeedback"> | Date | string
    match?: XOR<MatchRelationFilter, MatchWhereInput>
    reviewer?: XOR<UserRelationFilter, UserWhereInput>
    reviewed?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "matchId_reviewerId">

  export type CollaborationFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    reviewedId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrderInput | SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
    wouldCollaborateAgain?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CollaborationFeedbackCountOrderByAggregateInput
    _avg?: CollaborationFeedbackAvgOrderByAggregateInput
    _max?: CollaborationFeedbackMaxOrderByAggregateInput
    _min?: CollaborationFeedbackMinOrderByAggregateInput
    _sum?: CollaborationFeedbackSumOrderByAggregateInput
  }

  export type CollaborationFeedbackScalarWhereWithAggregatesInput = {
    AND?: CollaborationFeedbackScalarWhereWithAggregatesInput | CollaborationFeedbackScalarWhereWithAggregatesInput[]
    OR?: CollaborationFeedbackScalarWhereWithAggregatesInput[]
    NOT?: CollaborationFeedbackScalarWhereWithAggregatesInput | CollaborationFeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CollaborationFeedback"> | string
    matchId?: StringWithAggregatesFilter<"CollaborationFeedback"> | string
    reviewerId?: StringWithAggregatesFilter<"CollaborationFeedback"> | string
    reviewedId?: StringWithAggregatesFilter<"CollaborationFeedback"> | string
    rating?: IntWithAggregatesFilter<"CollaborationFeedback"> | number
    feedback?: StringNullableWithAggregatesFilter<"CollaborationFeedback"> | string | null
    collaborationQuality?: IntWithAggregatesFilter<"CollaborationFeedback"> | number
    communicationQuality?: IntWithAggregatesFilter<"CollaborationFeedback"> | number
    skillMatchQuality?: IntWithAggregatesFilter<"CollaborationFeedback"> | number
    wouldCollaborateAgain?: BoolNullableWithAggregatesFilter<"CollaborationFeedback"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"CollaborationFeedback"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillCreateInput = {
    name: string
    category: string
    createdAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutSkillInput
    needs?: UserNeedCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateInput = {
    id?: number
    name: string
    category: string
    createdAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutSkillInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutSkillNestedInput
    needs?: UserNeedUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutSkillNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type SkillCreateManyInput = {
    id?: number
    name: string
    category: string
    createdAt?: Date | string
  }

  export type SkillUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferCreateInput = {
    proficiency: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOffersInput
    skill: SkillCreateNestedOneWithoutOffersInput
  }

  export type UserOfferUncheckedCreateInput = {
    userId: string
    skillId: number
    proficiency: number
    createdAt?: Date | string
  }

  export type UserOfferUpdateInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOffersNestedInput
    skill?: SkillUpdateOneRequiredWithoutOffersNestedInput
  }

  export type UserOfferUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferCreateManyInput = {
    userId: string
    skillId: number
    proficiency: number
    createdAt?: Date | string
  }

  export type UserOfferUpdateManyMutationInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedCreateInput = {
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNeedsInput
    skill: SkillCreateNestedOneWithoutNeedsInput
  }

  export type UserNeedUncheckedCreateInput = {
    userId: string
    skillId: number
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
  }

  export type UserNeedUpdateInput = {
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNeedsNestedInput
    skill?: SkillUpdateOneRequiredWithoutNeedsNestedInput
  }

  export type UserNeedUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: IntFieldUpdateOperationsInput | number
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedCreateManyInput = {
    userId: string
    skillId: number
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
  }

  export type UserNeedUpdateManyMutationInput = {
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    skillId?: IntFieldUpdateOperationsInput | number
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchPreferencesCreateInput = {
    skillWeight?: number
    availabilityWeight?: number
    timezoneWeight?: number
    collabStyleWeight?: number
    personalityWeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMatchPreferencesInput
  }

  export type MatchPreferencesUncheckedCreateInput = {
    userId: string
    skillWeight?: number
    availabilityWeight?: number
    timezoneWeight?: number
    collabStyleWeight?: number
    personalityWeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchPreferencesUpdateInput = {
    skillWeight?: IntFieldUpdateOperationsInput | number
    availabilityWeight?: IntFieldUpdateOperationsInput | number
    timezoneWeight?: IntFieldUpdateOperationsInput | number
    collabStyleWeight?: IntFieldUpdateOperationsInput | number
    personalityWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMatchPreferencesNestedInput
  }

  export type MatchPreferencesUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    skillWeight?: IntFieldUpdateOperationsInput | number
    availabilityWeight?: IntFieldUpdateOperationsInput | number
    timezoneWeight?: IntFieldUpdateOperationsInput | number
    collabStyleWeight?: IntFieldUpdateOperationsInput | number
    personalityWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchPreferencesCreateManyInput = {
    userId: string
    skillWeight?: number
    availabilityWeight?: number
    timezoneWeight?: number
    collabStyleWeight?: number
    personalityWeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchPreferencesUpdateManyMutationInput = {
    skillWeight?: IntFieldUpdateOperationsInput | number
    availabilityWeight?: IntFieldUpdateOperationsInput | number
    timezoneWeight?: IntFieldUpdateOperationsInput | number
    collabStyleWeight?: IntFieldUpdateOperationsInput | number
    personalityWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchPreferencesUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    skillWeight?: IntFieldUpdateOperationsInput | number
    availabilityWeight?: IntFieldUpdateOperationsInput | number
    timezoneWeight?: IntFieldUpdateOperationsInput | number
    collabStyleWeight?: IntFieldUpdateOperationsInput | number
    personalityWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestCreateInput = {
    interest: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutProjectInterestsInput
  }

  export type ProjectInterestUncheckedCreateInput = {
    userId: string
    interest: string
    createdAt?: Date | string
  }

  export type ProjectInterestUpdateInput = {
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProjectInterestsNestedInput
  }

  export type ProjectInterestUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestCreateManyInput = {
    userId: string
    interest: string
    createdAt?: Date | string
  }

  export type ProjectInterestUpdateManyMutationInput = {
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationPreferencesCreateInput = {
    preferredTools?: CollaborationPreferencesCreatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesCreateprojectStageInterestInput | string[]
    teamSizePreference?: string | null
    commitmentLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCollaborationPrefsInput
  }

  export type CollaborationPreferencesUncheckedCreateInput = {
    userId: string
    preferredTools?: CollaborationPreferencesCreatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesCreateprojectStageInterestInput | string[]
    teamSizePreference?: string | null
    commitmentLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollaborationPreferencesUpdateInput = {
    preferredTools?: CollaborationPreferencesUpdatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesUpdateprojectStageInterestInput | string[]
    teamSizePreference?: NullableStringFieldUpdateOperationsInput | string | null
    commitmentLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCollaborationPrefsNestedInput
  }

  export type CollaborationPreferencesUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    preferredTools?: CollaborationPreferencesUpdatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesUpdateprojectStageInterestInput | string[]
    teamSizePreference?: NullableStringFieldUpdateOperationsInput | string | null
    commitmentLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationPreferencesCreateManyInput = {
    userId: string
    preferredTools?: CollaborationPreferencesCreatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesCreateprojectStageInterestInput | string[]
    teamSizePreference?: string | null
    commitmentLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollaborationPreferencesUpdateManyMutationInput = {
    preferredTools?: CollaborationPreferencesUpdatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesUpdateprojectStageInterestInput | string[]
    teamSizePreference?: NullableStringFieldUpdateOperationsInput | string | null
    commitmentLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationPreferencesUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    preferredTools?: CollaborationPreferencesUpdatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesUpdateprojectStageInterestInput | string[]
    teamSizePreference?: NullableStringFieldUpdateOperationsInput | string | null
    commitmentLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateInput = {
    id?: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userA: UserCreateNestedOneWithoutMatchesAsAInput
    userB: UserCreateNestedOneWithoutMatchesAsBInput
    interactions?: MatchInteractionCreateNestedManyWithoutMatchInput
    feedback?: CollaborationFeedbackCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    userAId: string
    userBId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: MatchInteractionUncheckedCreateNestedManyWithoutMatchInput
    feedback?: CollaborationFeedbackUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userA?: UserUpdateOneRequiredWithoutMatchesAsANestedInput
    userB?: UserUpdateOneRequiredWithoutMatchesAsBNestedInput
    interactions?: MatchInteractionUpdateManyWithoutMatchNestedInput
    feedback?: CollaborationFeedbackUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userAId?: StringFieldUpdateOperationsInput | string
    userBId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: MatchInteractionUncheckedUpdateManyWithoutMatchNestedInput
    feedback?: CollaborationFeedbackUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchCreateManyInput = {
    id?: string
    userAId: string
    userBId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userAId?: StringFieldUpdateOperationsInput | string
    userBId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionCreateInput = {
    id?: string
    action: string
    createdAt?: Date | string
    match: MatchCreateNestedOneWithoutInteractionsInput
    user: UserCreateNestedOneWithoutMatchInteractionsInput
  }

  export type MatchInteractionUncheckedCreateInput = {
    id?: string
    matchId: string
    userId: string
    action: string
    createdAt?: Date | string
  }

  export type MatchInteractionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutInteractionsNestedInput
    user?: UserUpdateOneRequiredWithoutMatchInteractionsNestedInput
  }

  export type MatchInteractionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionCreateManyInput = {
    id?: string
    matchId: string
    userId: string
    action: string
    createdAt?: Date | string
  }

  export type MatchInteractionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeCreateInput = {
    name: string
    description?: string | null
    icon?: string | null
    criteria?: string | null
    createdAt?: Date | string
    users?: UserBadgeCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    icon?: string | null
    criteria?: string | null
    createdAt?: Date | string
    users?: UserBadgeUncheckedCreateNestedManyWithoutBadgeInput
  }

  export type BadgeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserBadgeUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput
  }

  export type BadgeCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    icon?: string | null
    criteria?: string | null
    createdAt?: Date | string
  }

  export type BadgeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateInput = {
    earnedAt?: Date | string
    user: UserCreateNestedOneWithoutBadgesInput
    badge: BadgeCreateNestedOneWithoutUsersInput
  }

  export type UserBadgeUncheckedCreateInput = {
    userId: string
    badgeId: number
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateInput = {
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBadgesNestedInput
    badge?: BadgeUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserBadgeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyInput = {
    userId: string
    badgeId: number
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateManyMutationInput = {
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    badgeId?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackCreateInput = {
    id?: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
    match: MatchCreateNestedOneWithoutFeedbackInput
    reviewer: UserCreateNestedOneWithoutFeedbackGivenInput
    reviewed: UserCreateNestedOneWithoutFeedbackReceivedInput
  }

  export type CollaborationFeedbackUncheckedCreateInput = {
    id?: string
    matchId: string
    reviewerId: string
    reviewedId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type CollaborationFeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutFeedbackNestedInput
    reviewer?: UserUpdateOneRequiredWithoutFeedbackGivenNestedInput
    reviewed?: UserUpdateOneRequiredWithoutFeedbackReceivedNestedInput
  }

  export type CollaborationFeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    reviewedId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackCreateManyInput = {
    id?: string
    matchId: string
    reviewerId: string
    reviewedId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type CollaborationFeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    reviewedId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserOfferListRelationFilter = {
    every?: UserOfferWhereInput
    some?: UserOfferWhereInput
    none?: UserOfferWhereInput
  }

  export type UserNeedListRelationFilter = {
    every?: UserNeedWhereInput
    some?: UserNeedWhereInput
    none?: UserNeedWhereInput
  }

  export type MatchPreferencesNullableRelationFilter = {
    is?: MatchPreferencesWhereInput | null
    isNot?: MatchPreferencesWhereInput | null
  }

  export type ProjectInterestListRelationFilter = {
    every?: ProjectInterestWhereInput
    some?: ProjectInterestWhereInput
    none?: ProjectInterestWhereInput
  }

  export type CollaborationPreferencesNullableRelationFilter = {
    is?: CollaborationPreferencesWhereInput | null
    isNot?: CollaborationPreferencesWhereInput | null
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type MatchInteractionListRelationFilter = {
    every?: MatchInteractionWhereInput
    some?: MatchInteractionWhereInput
    none?: MatchInteractionWhereInput
  }

  export type UserBadgeListRelationFilter = {
    every?: UserBadgeWhereInput
    some?: UserBadgeWhereInput
    none?: UserBadgeWhereInput
  }

  export type CollaborationFeedbackListRelationFilter = {
    every?: CollaborationFeedbackWhereInput
    some?: CollaborationFeedbackWhereInput
    none?: CollaborationFeedbackWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOfferOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserNeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectInterestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchInteractionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBadgeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollaborationFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    avatarUrl?: SortOrder
    githubUrl?: SortOrder
    linkedinUrl?: SortOrder
    portfolioUrl?: SortOrder
    experienceLevel?: SortOrder
    timezone?: SortOrder
    availabilityHours?: SortOrder
    workStyle?: SortOrder
    commsPref?: SortOrder
    values?: SortOrder
    isOnboarded?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    availabilityHours?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    avatarUrl?: SortOrder
    githubUrl?: SortOrder
    linkedinUrl?: SortOrder
    portfolioUrl?: SortOrder
    experienceLevel?: SortOrder
    timezone?: SortOrder
    availabilityHours?: SortOrder
    workStyle?: SortOrder
    commsPref?: SortOrder
    isOnboarded?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    bio?: SortOrder
    avatarUrl?: SortOrder
    githubUrl?: SortOrder
    linkedinUrl?: SortOrder
    portfolioUrl?: SortOrder
    experienceLevel?: SortOrder
    timezone?: SortOrder
    availabilityHours?: SortOrder
    workStyle?: SortOrder
    commsPref?: SortOrder
    isOnboarded?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    availabilityHours?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SkillCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SkillRelationFilter = {
    is?: SkillWhereInput
    isNot?: SkillWhereInput
  }

  export type UserOfferUserIdSkillIdCompoundUniqueInput = {
    userId: string
    skillId: number
  }

  export type UserOfferCountOrderByAggregateInput = {
    userId?: SortOrder
    skillId?: SortOrder
    proficiency?: SortOrder
    createdAt?: SortOrder
  }

  export type UserOfferAvgOrderByAggregateInput = {
    skillId?: SortOrder
    proficiency?: SortOrder
  }

  export type UserOfferMaxOrderByAggregateInput = {
    userId?: SortOrder
    skillId?: SortOrder
    proficiency?: SortOrder
    createdAt?: SortOrder
  }

  export type UserOfferMinOrderByAggregateInput = {
    userId?: SortOrder
    skillId?: SortOrder
    proficiency?: SortOrder
    createdAt?: SortOrder
  }

  export type UserOfferSumOrderByAggregateInput = {
    skillId?: SortOrder
    proficiency?: SortOrder
  }

  export type UserNeedUserIdSkillIdCompoundUniqueInput = {
    userId: string
    skillId: number
  }

  export type UserNeedCountOrderByAggregateInput = {
    userId?: SortOrder
    skillId?: SortOrder
    mustHave?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNeedAvgOrderByAggregateInput = {
    skillId?: SortOrder
    priority?: SortOrder
  }

  export type UserNeedMaxOrderByAggregateInput = {
    userId?: SortOrder
    skillId?: SortOrder
    mustHave?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNeedMinOrderByAggregateInput = {
    userId?: SortOrder
    skillId?: SortOrder
    mustHave?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
  }

  export type UserNeedSumOrderByAggregateInput = {
    skillId?: SortOrder
    priority?: SortOrder
  }

  export type MatchPreferencesCountOrderByAggregateInput = {
    userId?: SortOrder
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchPreferencesAvgOrderByAggregateInput = {
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
  }

  export type MatchPreferencesMaxOrderByAggregateInput = {
    userId?: SortOrder
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchPreferencesMinOrderByAggregateInput = {
    userId?: SortOrder
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchPreferencesSumOrderByAggregateInput = {
    skillWeight?: SortOrder
    availabilityWeight?: SortOrder
    timezoneWeight?: SortOrder
    collabStyleWeight?: SortOrder
    personalityWeight?: SortOrder
  }

  export type ProjectInterestUserIdInterestCompoundUniqueInput = {
    userId: string
    interest: string
  }

  export type ProjectInterestCountOrderByAggregateInput = {
    userId?: SortOrder
    interest?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectInterestMaxOrderByAggregateInput = {
    userId?: SortOrder
    interest?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectInterestMinOrderByAggregateInput = {
    userId?: SortOrder
    interest?: SortOrder
    createdAt?: SortOrder
  }

  export type CollaborationPreferencesCountOrderByAggregateInput = {
    userId?: SortOrder
    preferredTools?: SortOrder
    projectStageInterest?: SortOrder
    teamSizePreference?: SortOrder
    commitmentLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollaborationPreferencesMaxOrderByAggregateInput = {
    userId?: SortOrder
    teamSizePreference?: SortOrder
    commitmentLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CollaborationPreferencesMinOrderByAggregateInput = {
    userId?: SortOrder
    teamSizePreference?: SortOrder
    commitmentLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type MatchUserAIdUserBIdCompoundUniqueInput = {
    userAId: string
    userBId: string
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    userAId?: SortOrder
    userBId?: SortOrder
    matchScore?: SortOrder
    status?: SortOrder
    userALiked?: SortOrder
    userBLiked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchAvgOrderByAggregateInput = {
    matchScore?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    userAId?: SortOrder
    userBId?: SortOrder
    matchScore?: SortOrder
    status?: SortOrder
    userALiked?: SortOrder
    userBLiked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    userAId?: SortOrder
    userBId?: SortOrder
    matchScore?: SortOrder
    status?: SortOrder
    userALiked?: SortOrder
    userBLiked?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MatchSumOrderByAggregateInput = {
    matchScore?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type MatchRelationFilter = {
    is?: MatchWhereInput
    isNot?: MatchWhereInput
  }

  export type MatchInteractionCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchInteractionMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type MatchInteractionMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BadgeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
  }

  export type BadgeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BadgeRelationFilter = {
    is?: BadgeWhereInput
    isNot?: BadgeWhereInput
  }

  export type UserBadgeUserIdBadgeIdCompoundUniqueInput = {
    userId: string
    badgeId: number
  }

  export type UserBadgeCountOrderByAggregateInput = {
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeAvgOrderByAggregateInput = {
    badgeId?: SortOrder
  }

  export type UserBadgeMaxOrderByAggregateInput = {
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeMinOrderByAggregateInput = {
    userId?: SortOrder
    badgeId?: SortOrder
    earnedAt?: SortOrder
  }

  export type UserBadgeSumOrderByAggregateInput = {
    badgeId?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type CollaborationFeedbackMatchIdReviewerIdCompoundUniqueInput = {
    matchId: string
    reviewerId: string
  }

  export type CollaborationFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    reviewedId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
    wouldCollaborateAgain?: SortOrder
    createdAt?: SortOrder
  }

  export type CollaborationFeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
  }

  export type CollaborationFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    reviewedId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
    wouldCollaborateAgain?: SortOrder
    createdAt?: SortOrder
  }

  export type CollaborationFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    matchId?: SortOrder
    reviewerId?: SortOrder
    reviewedId?: SortOrder
    rating?: SortOrder
    feedback?: SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
    wouldCollaborateAgain?: SortOrder
    createdAt?: SortOrder
  }

  export type CollaborationFeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
    collaborationQuality?: SortOrder
    communicationQuality?: SortOrder
    skillMatchQuality?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type UserCreatevaluesInput = {
    set: string[]
  }

  export type UserOfferCreateNestedManyWithoutUserInput = {
    create?: XOR<UserOfferCreateWithoutUserInput, UserOfferUncheckedCreateWithoutUserInput> | UserOfferCreateWithoutUserInput[] | UserOfferUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutUserInput | UserOfferCreateOrConnectWithoutUserInput[]
    createMany?: UserOfferCreateManyUserInputEnvelope
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
  }

  export type UserNeedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNeedCreateWithoutUserInput, UserNeedUncheckedCreateWithoutUserInput> | UserNeedCreateWithoutUserInput[] | UserNeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutUserInput | UserNeedCreateOrConnectWithoutUserInput[]
    createMany?: UserNeedCreateManyUserInputEnvelope
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
  }

  export type MatchPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<MatchPreferencesCreateWithoutUserInput, MatchPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: MatchPreferencesCreateOrConnectWithoutUserInput
    connect?: MatchPreferencesWhereUniqueInput
  }

  export type ProjectInterestCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectInterestCreateWithoutUserInput, ProjectInterestUncheckedCreateWithoutUserInput> | ProjectInterestCreateWithoutUserInput[] | ProjectInterestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectInterestCreateOrConnectWithoutUserInput | ProjectInterestCreateOrConnectWithoutUserInput[]
    createMany?: ProjectInterestCreateManyUserInputEnvelope
    connect?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
  }

  export type CollaborationPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<CollaborationPreferencesCreateWithoutUserInput, CollaborationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: CollaborationPreferencesCreateOrConnectWithoutUserInput
    connect?: CollaborationPreferencesWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutUserAInput = {
    create?: XOR<MatchCreateWithoutUserAInput, MatchUncheckedCreateWithoutUserAInput> | MatchCreateWithoutUserAInput[] | MatchUncheckedCreateWithoutUserAInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserAInput | MatchCreateOrConnectWithoutUserAInput[]
    createMany?: MatchCreateManyUserAInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutUserBInput = {
    create?: XOR<MatchCreateWithoutUserBInput, MatchUncheckedCreateWithoutUserBInput> | MatchCreateWithoutUserBInput[] | MatchUncheckedCreateWithoutUserBInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserBInput | MatchCreateOrConnectWithoutUserBInput[]
    createMany?: MatchCreateManyUserBInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchInteractionCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchInteractionCreateWithoutUserInput, MatchInteractionUncheckedCreateWithoutUserInput> | MatchInteractionCreateWithoutUserInput[] | MatchInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutUserInput | MatchInteractionCreateOrConnectWithoutUserInput[]
    createMany?: MatchInteractionCreateManyUserInputEnvelope
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
  }

  export type UserBadgeCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type CollaborationFeedbackCreateNestedManyWithoutReviewerInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewerInput, CollaborationFeedbackUncheckedCreateWithoutReviewerInput> | CollaborationFeedbackCreateWithoutReviewerInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewerInput | CollaborationFeedbackCreateOrConnectWithoutReviewerInput[]
    createMany?: CollaborationFeedbackCreateManyReviewerInputEnvelope
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
  }

  export type CollaborationFeedbackCreateNestedManyWithoutReviewedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewedInput, CollaborationFeedbackUncheckedCreateWithoutReviewedInput> | CollaborationFeedbackCreateWithoutReviewedInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewedInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewedInput | CollaborationFeedbackCreateOrConnectWithoutReviewedInput[]
    createMany?: CollaborationFeedbackCreateManyReviewedInputEnvelope
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
  }

  export type UserOfferUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserOfferCreateWithoutUserInput, UserOfferUncheckedCreateWithoutUserInput> | UserOfferCreateWithoutUserInput[] | UserOfferUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutUserInput | UserOfferCreateOrConnectWithoutUserInput[]
    createMany?: UserOfferCreateManyUserInputEnvelope
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
  }

  export type UserNeedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserNeedCreateWithoutUserInput, UserNeedUncheckedCreateWithoutUserInput> | UserNeedCreateWithoutUserInput[] | UserNeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutUserInput | UserNeedCreateOrConnectWithoutUserInput[]
    createMany?: UserNeedCreateManyUserInputEnvelope
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
  }

  export type MatchPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<MatchPreferencesCreateWithoutUserInput, MatchPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: MatchPreferencesCreateOrConnectWithoutUserInput
    connect?: MatchPreferencesWhereUniqueInput
  }

  export type ProjectInterestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProjectInterestCreateWithoutUserInput, ProjectInterestUncheckedCreateWithoutUserInput> | ProjectInterestCreateWithoutUserInput[] | ProjectInterestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectInterestCreateOrConnectWithoutUserInput | ProjectInterestCreateOrConnectWithoutUserInput[]
    createMany?: ProjectInterestCreateManyUserInputEnvelope
    connect?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
  }

  export type CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CollaborationPreferencesCreateWithoutUserInput, CollaborationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: CollaborationPreferencesCreateOrConnectWithoutUserInput
    connect?: CollaborationPreferencesWhereUniqueInput
  }

  export type MatchUncheckedCreateNestedManyWithoutUserAInput = {
    create?: XOR<MatchCreateWithoutUserAInput, MatchUncheckedCreateWithoutUserAInput> | MatchCreateWithoutUserAInput[] | MatchUncheckedCreateWithoutUserAInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserAInput | MatchCreateOrConnectWithoutUserAInput[]
    createMany?: MatchCreateManyUserAInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutUserBInput = {
    create?: XOR<MatchCreateWithoutUserBInput, MatchUncheckedCreateWithoutUserBInput> | MatchCreateWithoutUserBInput[] | MatchUncheckedCreateWithoutUserBInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserBInput | MatchCreateOrConnectWithoutUserBInput[]
    createMany?: MatchCreateManyUserBInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchInteractionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MatchInteractionCreateWithoutUserInput, MatchInteractionUncheckedCreateWithoutUserInput> | MatchInteractionCreateWithoutUserInput[] | MatchInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutUserInput | MatchInteractionCreateOrConnectWithoutUserInput[]
    createMany?: MatchInteractionCreateManyUserInputEnvelope
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewerInput, CollaborationFeedbackUncheckedCreateWithoutReviewerInput> | CollaborationFeedbackCreateWithoutReviewerInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewerInput | CollaborationFeedbackCreateOrConnectWithoutReviewerInput[]
    createMany?: CollaborationFeedbackCreateManyReviewerInputEnvelope
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
  }

  export type CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewedInput, CollaborationFeedbackUncheckedCreateWithoutReviewedInput> | CollaborationFeedbackCreateWithoutReviewedInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewedInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewedInput | CollaborationFeedbackCreateOrConnectWithoutReviewedInput[]
    createMany?: CollaborationFeedbackCreateManyReviewedInputEnvelope
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdatevaluesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserOfferUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserOfferCreateWithoutUserInput, UserOfferUncheckedCreateWithoutUserInput> | UserOfferCreateWithoutUserInput[] | UserOfferUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutUserInput | UserOfferCreateOrConnectWithoutUserInput[]
    upsert?: UserOfferUpsertWithWhereUniqueWithoutUserInput | UserOfferUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserOfferCreateManyUserInputEnvelope
    set?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    disconnect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    delete?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    update?: UserOfferUpdateWithWhereUniqueWithoutUserInput | UserOfferUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserOfferUpdateManyWithWhereWithoutUserInput | UserOfferUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserOfferScalarWhereInput | UserOfferScalarWhereInput[]
  }

  export type UserNeedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNeedCreateWithoutUserInput, UserNeedUncheckedCreateWithoutUserInput> | UserNeedCreateWithoutUserInput[] | UserNeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutUserInput | UserNeedCreateOrConnectWithoutUserInput[]
    upsert?: UserNeedUpsertWithWhereUniqueWithoutUserInput | UserNeedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNeedCreateManyUserInputEnvelope
    set?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    disconnect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    delete?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    update?: UserNeedUpdateWithWhereUniqueWithoutUserInput | UserNeedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNeedUpdateManyWithWhereWithoutUserInput | UserNeedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNeedScalarWhereInput | UserNeedScalarWhereInput[]
  }

  export type MatchPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<MatchPreferencesCreateWithoutUserInput, MatchPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: MatchPreferencesCreateOrConnectWithoutUserInput
    upsert?: MatchPreferencesUpsertWithoutUserInput
    disconnect?: MatchPreferencesWhereInput | boolean
    delete?: MatchPreferencesWhereInput | boolean
    connect?: MatchPreferencesWhereUniqueInput
    update?: XOR<XOR<MatchPreferencesUpdateToOneWithWhereWithoutUserInput, MatchPreferencesUpdateWithoutUserInput>, MatchPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type ProjectInterestUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectInterestCreateWithoutUserInput, ProjectInterestUncheckedCreateWithoutUserInput> | ProjectInterestCreateWithoutUserInput[] | ProjectInterestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectInterestCreateOrConnectWithoutUserInput | ProjectInterestCreateOrConnectWithoutUserInput[]
    upsert?: ProjectInterestUpsertWithWhereUniqueWithoutUserInput | ProjectInterestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectInterestCreateManyUserInputEnvelope
    set?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    disconnect?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    delete?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    connect?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    update?: ProjectInterestUpdateWithWhereUniqueWithoutUserInput | ProjectInterestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectInterestUpdateManyWithWhereWithoutUserInput | ProjectInterestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectInterestScalarWhereInput | ProjectInterestScalarWhereInput[]
  }

  export type CollaborationPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<CollaborationPreferencesCreateWithoutUserInput, CollaborationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: CollaborationPreferencesCreateOrConnectWithoutUserInput
    upsert?: CollaborationPreferencesUpsertWithoutUserInput
    disconnect?: CollaborationPreferencesWhereInput | boolean
    delete?: CollaborationPreferencesWhereInput | boolean
    connect?: CollaborationPreferencesWhereUniqueInput
    update?: XOR<XOR<CollaborationPreferencesUpdateToOneWithWhereWithoutUserInput, CollaborationPreferencesUpdateWithoutUserInput>, CollaborationPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type MatchUpdateManyWithoutUserANestedInput = {
    create?: XOR<MatchCreateWithoutUserAInput, MatchUncheckedCreateWithoutUserAInput> | MatchCreateWithoutUserAInput[] | MatchUncheckedCreateWithoutUserAInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserAInput | MatchCreateOrConnectWithoutUserAInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutUserAInput | MatchUpsertWithWhereUniqueWithoutUserAInput[]
    createMany?: MatchCreateManyUserAInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutUserAInput | MatchUpdateWithWhereUniqueWithoutUserAInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutUserAInput | MatchUpdateManyWithWhereWithoutUserAInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutUserBNestedInput = {
    create?: XOR<MatchCreateWithoutUserBInput, MatchUncheckedCreateWithoutUserBInput> | MatchCreateWithoutUserBInput[] | MatchUncheckedCreateWithoutUserBInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserBInput | MatchCreateOrConnectWithoutUserBInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutUserBInput | MatchUpsertWithWhereUniqueWithoutUserBInput[]
    createMany?: MatchCreateManyUserBInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutUserBInput | MatchUpdateWithWhereUniqueWithoutUserBInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutUserBInput | MatchUpdateManyWithWhereWithoutUserBInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchInteractionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchInteractionCreateWithoutUserInput, MatchInteractionUncheckedCreateWithoutUserInput> | MatchInteractionCreateWithoutUserInput[] | MatchInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutUserInput | MatchInteractionCreateOrConnectWithoutUserInput[]
    upsert?: MatchInteractionUpsertWithWhereUniqueWithoutUserInput | MatchInteractionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchInteractionCreateManyUserInputEnvelope
    set?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    disconnect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    delete?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    update?: MatchInteractionUpdateWithWhereUniqueWithoutUserInput | MatchInteractionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchInteractionUpdateManyWithWhereWithoutUserInput | MatchInteractionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchInteractionScalarWhereInput | MatchInteractionScalarWhereInput[]
  }

  export type UserBadgeUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type CollaborationFeedbackUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewerInput, CollaborationFeedbackUncheckedCreateWithoutReviewerInput> | CollaborationFeedbackCreateWithoutReviewerInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewerInput | CollaborationFeedbackCreateOrConnectWithoutReviewerInput[]
    upsert?: CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewerInput | CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: CollaborationFeedbackCreateManyReviewerInputEnvelope
    set?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    disconnect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    delete?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    update?: CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewerInput | CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: CollaborationFeedbackUpdateManyWithWhereWithoutReviewerInput | CollaborationFeedbackUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
  }

  export type CollaborationFeedbackUpdateManyWithoutReviewedNestedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewedInput, CollaborationFeedbackUncheckedCreateWithoutReviewedInput> | CollaborationFeedbackCreateWithoutReviewedInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewedInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewedInput | CollaborationFeedbackCreateOrConnectWithoutReviewedInput[]
    upsert?: CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewedInput | CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewedInput[]
    createMany?: CollaborationFeedbackCreateManyReviewedInputEnvelope
    set?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    disconnect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    delete?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    update?: CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewedInput | CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewedInput[]
    updateMany?: CollaborationFeedbackUpdateManyWithWhereWithoutReviewedInput | CollaborationFeedbackUpdateManyWithWhereWithoutReviewedInput[]
    deleteMany?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
  }

  export type UserOfferUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserOfferCreateWithoutUserInput, UserOfferUncheckedCreateWithoutUserInput> | UserOfferCreateWithoutUserInput[] | UserOfferUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutUserInput | UserOfferCreateOrConnectWithoutUserInput[]
    upsert?: UserOfferUpsertWithWhereUniqueWithoutUserInput | UserOfferUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserOfferCreateManyUserInputEnvelope
    set?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    disconnect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    delete?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    update?: UserOfferUpdateWithWhereUniqueWithoutUserInput | UserOfferUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserOfferUpdateManyWithWhereWithoutUserInput | UserOfferUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserOfferScalarWhereInput | UserOfferScalarWhereInput[]
  }

  export type UserNeedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserNeedCreateWithoutUserInput, UserNeedUncheckedCreateWithoutUserInput> | UserNeedCreateWithoutUserInput[] | UserNeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutUserInput | UserNeedCreateOrConnectWithoutUserInput[]
    upsert?: UserNeedUpsertWithWhereUniqueWithoutUserInput | UserNeedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserNeedCreateManyUserInputEnvelope
    set?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    disconnect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    delete?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    update?: UserNeedUpdateWithWhereUniqueWithoutUserInput | UserNeedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserNeedUpdateManyWithWhereWithoutUserInput | UserNeedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserNeedScalarWhereInput | UserNeedScalarWhereInput[]
  }

  export type MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<MatchPreferencesCreateWithoutUserInput, MatchPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: MatchPreferencesCreateOrConnectWithoutUserInput
    upsert?: MatchPreferencesUpsertWithoutUserInput
    disconnect?: MatchPreferencesWhereInput | boolean
    delete?: MatchPreferencesWhereInput | boolean
    connect?: MatchPreferencesWhereUniqueInput
    update?: XOR<XOR<MatchPreferencesUpdateToOneWithWhereWithoutUserInput, MatchPreferencesUpdateWithoutUserInput>, MatchPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type ProjectInterestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProjectInterestCreateWithoutUserInput, ProjectInterestUncheckedCreateWithoutUserInput> | ProjectInterestCreateWithoutUserInput[] | ProjectInterestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProjectInterestCreateOrConnectWithoutUserInput | ProjectInterestCreateOrConnectWithoutUserInput[]
    upsert?: ProjectInterestUpsertWithWhereUniqueWithoutUserInput | ProjectInterestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProjectInterestCreateManyUserInputEnvelope
    set?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    disconnect?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    delete?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    connect?: ProjectInterestWhereUniqueInput | ProjectInterestWhereUniqueInput[]
    update?: ProjectInterestUpdateWithWhereUniqueWithoutUserInput | ProjectInterestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProjectInterestUpdateManyWithWhereWithoutUserInput | ProjectInterestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProjectInterestScalarWhereInput | ProjectInterestScalarWhereInput[]
  }

  export type CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CollaborationPreferencesCreateWithoutUserInput, CollaborationPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: CollaborationPreferencesCreateOrConnectWithoutUserInput
    upsert?: CollaborationPreferencesUpsertWithoutUserInput
    disconnect?: CollaborationPreferencesWhereInput | boolean
    delete?: CollaborationPreferencesWhereInput | boolean
    connect?: CollaborationPreferencesWhereUniqueInput
    update?: XOR<XOR<CollaborationPreferencesUpdateToOneWithWhereWithoutUserInput, CollaborationPreferencesUpdateWithoutUserInput>, CollaborationPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type MatchUncheckedUpdateManyWithoutUserANestedInput = {
    create?: XOR<MatchCreateWithoutUserAInput, MatchUncheckedCreateWithoutUserAInput> | MatchCreateWithoutUserAInput[] | MatchUncheckedCreateWithoutUserAInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserAInput | MatchCreateOrConnectWithoutUserAInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutUserAInput | MatchUpsertWithWhereUniqueWithoutUserAInput[]
    createMany?: MatchCreateManyUserAInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutUserAInput | MatchUpdateWithWhereUniqueWithoutUserAInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutUserAInput | MatchUpdateManyWithWhereWithoutUserAInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutUserBNestedInput = {
    create?: XOR<MatchCreateWithoutUserBInput, MatchUncheckedCreateWithoutUserBInput> | MatchCreateWithoutUserBInput[] | MatchUncheckedCreateWithoutUserBInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutUserBInput | MatchCreateOrConnectWithoutUserBInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutUserBInput | MatchUpsertWithWhereUniqueWithoutUserBInput[]
    createMany?: MatchCreateManyUserBInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutUserBInput | MatchUpdateWithWhereUniqueWithoutUserBInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutUserBInput | MatchUpdateManyWithWhereWithoutUserBInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchInteractionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MatchInteractionCreateWithoutUserInput, MatchInteractionUncheckedCreateWithoutUserInput> | MatchInteractionCreateWithoutUserInput[] | MatchInteractionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutUserInput | MatchInteractionCreateOrConnectWithoutUserInput[]
    upsert?: MatchInteractionUpsertWithWhereUniqueWithoutUserInput | MatchInteractionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MatchInteractionCreateManyUserInputEnvelope
    set?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    disconnect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    delete?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    update?: MatchInteractionUpdateWithWhereUniqueWithoutUserInput | MatchInteractionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MatchInteractionUpdateManyWithWhereWithoutUserInput | MatchInteractionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MatchInteractionScalarWhereInput | MatchInteractionScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput> | UserBadgeCreateWithoutUserInput[] | UserBadgeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutUserInput | UserBadgeCreateOrConnectWithoutUserInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutUserInput | UserBadgeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserBadgeCreateManyUserInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutUserInput | UserBadgeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutUserInput | UserBadgeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewerInput, CollaborationFeedbackUncheckedCreateWithoutReviewerInput> | CollaborationFeedbackCreateWithoutReviewerInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewerInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewerInput | CollaborationFeedbackCreateOrConnectWithoutReviewerInput[]
    upsert?: CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewerInput | CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewerInput[]
    createMany?: CollaborationFeedbackCreateManyReviewerInputEnvelope
    set?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    disconnect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    delete?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    update?: CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewerInput | CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewerInput[]
    updateMany?: CollaborationFeedbackUpdateManyWithWhereWithoutReviewerInput | CollaborationFeedbackUpdateManyWithWhereWithoutReviewerInput[]
    deleteMany?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
  }

  export type CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutReviewedInput, CollaborationFeedbackUncheckedCreateWithoutReviewedInput> | CollaborationFeedbackCreateWithoutReviewedInput[] | CollaborationFeedbackUncheckedCreateWithoutReviewedInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutReviewedInput | CollaborationFeedbackCreateOrConnectWithoutReviewedInput[]
    upsert?: CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewedInput | CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewedInput[]
    createMany?: CollaborationFeedbackCreateManyReviewedInputEnvelope
    set?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    disconnect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    delete?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    update?: CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewedInput | CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewedInput[]
    updateMany?: CollaborationFeedbackUpdateManyWithWhereWithoutReviewedInput | CollaborationFeedbackUpdateManyWithWhereWithoutReviewedInput[]
    deleteMany?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
  }

  export type UserOfferCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserOfferCreateWithoutSkillInput, UserOfferUncheckedCreateWithoutSkillInput> | UserOfferCreateWithoutSkillInput[] | UserOfferUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutSkillInput | UserOfferCreateOrConnectWithoutSkillInput[]
    createMany?: UserOfferCreateManySkillInputEnvelope
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
  }

  export type UserNeedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserNeedCreateWithoutSkillInput, UserNeedUncheckedCreateWithoutSkillInput> | UserNeedCreateWithoutSkillInput[] | UserNeedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutSkillInput | UserNeedCreateOrConnectWithoutSkillInput[]
    createMany?: UserNeedCreateManySkillInputEnvelope
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
  }

  export type UserOfferUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserOfferCreateWithoutSkillInput, UserOfferUncheckedCreateWithoutSkillInput> | UserOfferCreateWithoutSkillInput[] | UserOfferUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutSkillInput | UserOfferCreateOrConnectWithoutSkillInput[]
    createMany?: UserOfferCreateManySkillInputEnvelope
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
  }

  export type UserNeedUncheckedCreateNestedManyWithoutSkillInput = {
    create?: XOR<UserNeedCreateWithoutSkillInput, UserNeedUncheckedCreateWithoutSkillInput> | UserNeedCreateWithoutSkillInput[] | UserNeedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutSkillInput | UserNeedCreateOrConnectWithoutSkillInput[]
    createMany?: UserNeedCreateManySkillInputEnvelope
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
  }

  export type UserOfferUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserOfferCreateWithoutSkillInput, UserOfferUncheckedCreateWithoutSkillInput> | UserOfferCreateWithoutSkillInput[] | UserOfferUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutSkillInput | UserOfferCreateOrConnectWithoutSkillInput[]
    upsert?: UserOfferUpsertWithWhereUniqueWithoutSkillInput | UserOfferUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserOfferCreateManySkillInputEnvelope
    set?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    disconnect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    delete?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    update?: UserOfferUpdateWithWhereUniqueWithoutSkillInput | UserOfferUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserOfferUpdateManyWithWhereWithoutSkillInput | UserOfferUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserOfferScalarWhereInput | UserOfferScalarWhereInput[]
  }

  export type UserNeedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserNeedCreateWithoutSkillInput, UserNeedUncheckedCreateWithoutSkillInput> | UserNeedCreateWithoutSkillInput[] | UserNeedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutSkillInput | UserNeedCreateOrConnectWithoutSkillInput[]
    upsert?: UserNeedUpsertWithWhereUniqueWithoutSkillInput | UserNeedUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserNeedCreateManySkillInputEnvelope
    set?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    disconnect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    delete?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    update?: UserNeedUpdateWithWhereUniqueWithoutSkillInput | UserNeedUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserNeedUpdateManyWithWhereWithoutSkillInput | UserNeedUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserNeedScalarWhereInput | UserNeedScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserOfferUncheckedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserOfferCreateWithoutSkillInput, UserOfferUncheckedCreateWithoutSkillInput> | UserOfferCreateWithoutSkillInput[] | UserOfferUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserOfferCreateOrConnectWithoutSkillInput | UserOfferCreateOrConnectWithoutSkillInput[]
    upsert?: UserOfferUpsertWithWhereUniqueWithoutSkillInput | UserOfferUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserOfferCreateManySkillInputEnvelope
    set?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    disconnect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    delete?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    connect?: UserOfferWhereUniqueInput | UserOfferWhereUniqueInput[]
    update?: UserOfferUpdateWithWhereUniqueWithoutSkillInput | UserOfferUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserOfferUpdateManyWithWhereWithoutSkillInput | UserOfferUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserOfferScalarWhereInput | UserOfferScalarWhereInput[]
  }

  export type UserNeedUncheckedUpdateManyWithoutSkillNestedInput = {
    create?: XOR<UserNeedCreateWithoutSkillInput, UserNeedUncheckedCreateWithoutSkillInput> | UserNeedCreateWithoutSkillInput[] | UserNeedUncheckedCreateWithoutSkillInput[]
    connectOrCreate?: UserNeedCreateOrConnectWithoutSkillInput | UserNeedCreateOrConnectWithoutSkillInput[]
    upsert?: UserNeedUpsertWithWhereUniqueWithoutSkillInput | UserNeedUpsertWithWhereUniqueWithoutSkillInput[]
    createMany?: UserNeedCreateManySkillInputEnvelope
    set?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    disconnect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    delete?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    connect?: UserNeedWhereUniqueInput | UserNeedWhereUniqueInput[]
    update?: UserNeedUpdateWithWhereUniqueWithoutSkillInput | UserNeedUpdateWithWhereUniqueWithoutSkillInput[]
    updateMany?: UserNeedUpdateManyWithWhereWithoutSkillInput | UserNeedUpdateManyWithWhereWithoutSkillInput[]
    deleteMany?: UserNeedScalarWhereInput | UserNeedScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOffersInput = {
    create?: XOR<UserCreateWithoutOffersInput, UserUncheckedCreateWithoutOffersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOffersInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedOneWithoutOffersInput = {
    create?: XOR<SkillCreateWithoutOffersInput, SkillUncheckedCreateWithoutOffersInput>
    connectOrCreate?: SkillCreateOrConnectWithoutOffersInput
    connect?: SkillWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutOffersNestedInput = {
    create?: XOR<UserCreateWithoutOffersInput, UserUncheckedCreateWithoutOffersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOffersInput
    upsert?: UserUpsertWithoutOffersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOffersInput, UserUpdateWithoutOffersInput>, UserUncheckedUpdateWithoutOffersInput>
  }

  export type SkillUpdateOneRequiredWithoutOffersNestedInput = {
    create?: XOR<SkillCreateWithoutOffersInput, SkillUncheckedCreateWithoutOffersInput>
    connectOrCreate?: SkillCreateOrConnectWithoutOffersInput
    upsert?: SkillUpsertWithoutOffersInput
    connect?: SkillWhereUniqueInput
    update?: XOR<XOR<SkillUpdateToOneWithWhereWithoutOffersInput, SkillUpdateWithoutOffersInput>, SkillUncheckedUpdateWithoutOffersInput>
  }

  export type UserCreateNestedOneWithoutNeedsInput = {
    create?: XOR<UserCreateWithoutNeedsInput, UserUncheckedCreateWithoutNeedsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNeedsInput
    connect?: UserWhereUniqueInput
  }

  export type SkillCreateNestedOneWithoutNeedsInput = {
    create?: XOR<SkillCreateWithoutNeedsInput, SkillUncheckedCreateWithoutNeedsInput>
    connectOrCreate?: SkillCreateOrConnectWithoutNeedsInput
    connect?: SkillWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNeedsNestedInput = {
    create?: XOR<UserCreateWithoutNeedsInput, UserUncheckedCreateWithoutNeedsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNeedsInput
    upsert?: UserUpsertWithoutNeedsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNeedsInput, UserUpdateWithoutNeedsInput>, UserUncheckedUpdateWithoutNeedsInput>
  }

  export type SkillUpdateOneRequiredWithoutNeedsNestedInput = {
    create?: XOR<SkillCreateWithoutNeedsInput, SkillUncheckedCreateWithoutNeedsInput>
    connectOrCreate?: SkillCreateOrConnectWithoutNeedsInput
    upsert?: SkillUpsertWithoutNeedsInput
    connect?: SkillWhereUniqueInput
    update?: XOR<XOR<SkillUpdateToOneWithWhereWithoutNeedsInput, SkillUpdateWithoutNeedsInput>, SkillUncheckedUpdateWithoutNeedsInput>
  }

  export type UserCreateNestedOneWithoutMatchPreferencesInput = {
    create?: XOR<UserCreateWithoutMatchPreferencesInput, UserUncheckedCreateWithoutMatchPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMatchPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutMatchPreferencesInput, UserUncheckedCreateWithoutMatchPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchPreferencesInput
    upsert?: UserUpsertWithoutMatchPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchPreferencesInput, UserUpdateWithoutMatchPreferencesInput>, UserUncheckedUpdateWithoutMatchPreferencesInput>
  }

  export type UserCreateNestedOneWithoutProjectInterestsInput = {
    create?: XOR<UserCreateWithoutProjectInterestsInput, UserUncheckedCreateWithoutProjectInterestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInterestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProjectInterestsNestedInput = {
    create?: XOR<UserCreateWithoutProjectInterestsInput, UserUncheckedCreateWithoutProjectInterestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProjectInterestsInput
    upsert?: UserUpsertWithoutProjectInterestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProjectInterestsInput, UserUpdateWithoutProjectInterestsInput>, UserUncheckedUpdateWithoutProjectInterestsInput>
  }

  export type CollaborationPreferencesCreatepreferredToolsInput = {
    set: string[]
  }

  export type CollaborationPreferencesCreateprojectStageInterestInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCollaborationPrefsInput = {
    create?: XOR<UserCreateWithoutCollaborationPrefsInput, UserUncheckedCreateWithoutCollaborationPrefsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollaborationPrefsInput
    connect?: UserWhereUniqueInput
  }

  export type CollaborationPreferencesUpdatepreferredToolsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CollaborationPreferencesUpdateprojectStageInterestInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutCollaborationPrefsNestedInput = {
    create?: XOR<UserCreateWithoutCollaborationPrefsInput, UserUncheckedCreateWithoutCollaborationPrefsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCollaborationPrefsInput
    upsert?: UserUpsertWithoutCollaborationPrefsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCollaborationPrefsInput, UserUpdateWithoutCollaborationPrefsInput>, UserUncheckedUpdateWithoutCollaborationPrefsInput>
  }

  export type UserCreateNestedOneWithoutMatchesAsAInput = {
    create?: XOR<UserCreateWithoutMatchesAsAInput, UserUncheckedCreateWithoutMatchesAsAInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesAsAInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchesAsBInput = {
    create?: XOR<UserCreateWithoutMatchesAsBInput, UserUncheckedCreateWithoutMatchesAsBInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesAsBInput
    connect?: UserWhereUniqueInput
  }

  export type MatchInteractionCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchInteractionCreateWithoutMatchInput, MatchInteractionUncheckedCreateWithoutMatchInput> | MatchInteractionCreateWithoutMatchInput[] | MatchInteractionUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutMatchInput | MatchInteractionCreateOrConnectWithoutMatchInput[]
    createMany?: MatchInteractionCreateManyMatchInputEnvelope
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
  }

  export type CollaborationFeedbackCreateNestedManyWithoutMatchInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutMatchInput, CollaborationFeedbackUncheckedCreateWithoutMatchInput> | CollaborationFeedbackCreateWithoutMatchInput[] | CollaborationFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutMatchInput | CollaborationFeedbackCreateOrConnectWithoutMatchInput[]
    createMany?: CollaborationFeedbackCreateManyMatchInputEnvelope
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
  }

  export type MatchInteractionUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<MatchInteractionCreateWithoutMatchInput, MatchInteractionUncheckedCreateWithoutMatchInput> | MatchInteractionCreateWithoutMatchInput[] | MatchInteractionUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutMatchInput | MatchInteractionCreateOrConnectWithoutMatchInput[]
    createMany?: MatchInteractionCreateManyMatchInputEnvelope
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
  }

  export type CollaborationFeedbackUncheckedCreateNestedManyWithoutMatchInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutMatchInput, CollaborationFeedbackUncheckedCreateWithoutMatchInput> | CollaborationFeedbackCreateWithoutMatchInput[] | CollaborationFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutMatchInput | CollaborationFeedbackCreateOrConnectWithoutMatchInput[]
    createMany?: CollaborationFeedbackCreateManyMatchInputEnvelope
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutMatchesAsANestedInput = {
    create?: XOR<UserCreateWithoutMatchesAsAInput, UserUncheckedCreateWithoutMatchesAsAInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesAsAInput
    upsert?: UserUpsertWithoutMatchesAsAInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchesAsAInput, UserUpdateWithoutMatchesAsAInput>, UserUncheckedUpdateWithoutMatchesAsAInput>
  }

  export type UserUpdateOneRequiredWithoutMatchesAsBNestedInput = {
    create?: XOR<UserCreateWithoutMatchesAsBInput, UserUncheckedCreateWithoutMatchesAsBInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchesAsBInput
    upsert?: UserUpsertWithoutMatchesAsBInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchesAsBInput, UserUpdateWithoutMatchesAsBInput>, UserUncheckedUpdateWithoutMatchesAsBInput>
  }

  export type MatchInteractionUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchInteractionCreateWithoutMatchInput, MatchInteractionUncheckedCreateWithoutMatchInput> | MatchInteractionCreateWithoutMatchInput[] | MatchInteractionUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutMatchInput | MatchInteractionCreateOrConnectWithoutMatchInput[]
    upsert?: MatchInteractionUpsertWithWhereUniqueWithoutMatchInput | MatchInteractionUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchInteractionCreateManyMatchInputEnvelope
    set?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    disconnect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    delete?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    update?: MatchInteractionUpdateWithWhereUniqueWithoutMatchInput | MatchInteractionUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchInteractionUpdateManyWithWhereWithoutMatchInput | MatchInteractionUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchInteractionScalarWhereInput | MatchInteractionScalarWhereInput[]
  }

  export type CollaborationFeedbackUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutMatchInput, CollaborationFeedbackUncheckedCreateWithoutMatchInput> | CollaborationFeedbackCreateWithoutMatchInput[] | CollaborationFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutMatchInput | CollaborationFeedbackCreateOrConnectWithoutMatchInput[]
    upsert?: CollaborationFeedbackUpsertWithWhereUniqueWithoutMatchInput | CollaborationFeedbackUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CollaborationFeedbackCreateManyMatchInputEnvelope
    set?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    disconnect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    delete?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    update?: CollaborationFeedbackUpdateWithWhereUniqueWithoutMatchInput | CollaborationFeedbackUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CollaborationFeedbackUpdateManyWithWhereWithoutMatchInput | CollaborationFeedbackUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
  }

  export type MatchInteractionUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<MatchInteractionCreateWithoutMatchInput, MatchInteractionUncheckedCreateWithoutMatchInput> | MatchInteractionCreateWithoutMatchInput[] | MatchInteractionUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: MatchInteractionCreateOrConnectWithoutMatchInput | MatchInteractionCreateOrConnectWithoutMatchInput[]
    upsert?: MatchInteractionUpsertWithWhereUniqueWithoutMatchInput | MatchInteractionUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: MatchInteractionCreateManyMatchInputEnvelope
    set?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    disconnect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    delete?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    connect?: MatchInteractionWhereUniqueInput | MatchInteractionWhereUniqueInput[]
    update?: MatchInteractionUpdateWithWhereUniqueWithoutMatchInput | MatchInteractionUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: MatchInteractionUpdateManyWithWhereWithoutMatchInput | MatchInteractionUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: MatchInteractionScalarWhereInput | MatchInteractionScalarWhereInput[]
  }

  export type CollaborationFeedbackUncheckedUpdateManyWithoutMatchNestedInput = {
    create?: XOR<CollaborationFeedbackCreateWithoutMatchInput, CollaborationFeedbackUncheckedCreateWithoutMatchInput> | CollaborationFeedbackCreateWithoutMatchInput[] | CollaborationFeedbackUncheckedCreateWithoutMatchInput[]
    connectOrCreate?: CollaborationFeedbackCreateOrConnectWithoutMatchInput | CollaborationFeedbackCreateOrConnectWithoutMatchInput[]
    upsert?: CollaborationFeedbackUpsertWithWhereUniqueWithoutMatchInput | CollaborationFeedbackUpsertWithWhereUniqueWithoutMatchInput[]
    createMany?: CollaborationFeedbackCreateManyMatchInputEnvelope
    set?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    disconnect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    delete?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    connect?: CollaborationFeedbackWhereUniqueInput | CollaborationFeedbackWhereUniqueInput[]
    update?: CollaborationFeedbackUpdateWithWhereUniqueWithoutMatchInput | CollaborationFeedbackUpdateWithWhereUniqueWithoutMatchInput[]
    updateMany?: CollaborationFeedbackUpdateManyWithWhereWithoutMatchInput | CollaborationFeedbackUpdateManyWithWhereWithoutMatchInput[]
    deleteMany?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
  }

  export type MatchCreateNestedOneWithoutInteractionsInput = {
    create?: XOR<MatchCreateWithoutInteractionsInput, MatchUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInteractionsInput
    connect?: MatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMatchInteractionsInput = {
    create?: XOR<UserCreateWithoutMatchInteractionsInput, UserUncheckedCreateWithoutMatchInteractionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchInteractionsInput
    connect?: UserWhereUniqueInput
  }

  export type MatchUpdateOneRequiredWithoutInteractionsNestedInput = {
    create?: XOR<MatchCreateWithoutInteractionsInput, MatchUncheckedCreateWithoutInteractionsInput>
    connectOrCreate?: MatchCreateOrConnectWithoutInteractionsInput
    upsert?: MatchUpsertWithoutInteractionsInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutInteractionsInput, MatchUpdateWithoutInteractionsInput>, MatchUncheckedUpdateWithoutInteractionsInput>
  }

  export type UserUpdateOneRequiredWithoutMatchInteractionsNestedInput = {
    create?: XOR<UserCreateWithoutMatchInteractionsInput, UserUncheckedCreateWithoutMatchInteractionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMatchInteractionsInput
    upsert?: UserUpsertWithoutMatchInteractionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMatchInteractionsInput, UserUpdateWithoutMatchInteractionsInput>, UserUncheckedUpdateWithoutMatchInteractionsInput>
  }

  export type UserBadgeCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserBadgeUncheckedCreateNestedManyWithoutBadgeInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
  }

  export type UserBadgeUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeNestedInput = {
    create?: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput> | UserBadgeCreateWithoutBadgeInput[] | UserBadgeUncheckedCreateWithoutBadgeInput[]
    connectOrCreate?: UserBadgeCreateOrConnectWithoutBadgeInput | UserBadgeCreateOrConnectWithoutBadgeInput[]
    upsert?: UserBadgeUpsertWithWhereUniqueWithoutBadgeInput | UserBadgeUpsertWithWhereUniqueWithoutBadgeInput[]
    createMany?: UserBadgeCreateManyBadgeInputEnvelope
    set?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    disconnect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    delete?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    connect?: UserBadgeWhereUniqueInput | UserBadgeWhereUniqueInput[]
    update?: UserBadgeUpdateWithWhereUniqueWithoutBadgeInput | UserBadgeUpdateWithWhereUniqueWithoutBadgeInput[]
    updateMany?: UserBadgeUpdateManyWithWhereWithoutBadgeInput | UserBadgeUpdateManyWithWhereWithoutBadgeInput[]
    deleteMany?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBadgesInput = {
    create?: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBadgesInput
    connect?: UserWhereUniqueInput
  }

  export type BadgeCreateNestedOneWithoutUsersInput = {
    create?: XOR<BadgeCreateWithoutUsersInput, BadgeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUsersInput
    connect?: BadgeWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBadgesNestedInput = {
    create?: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBadgesInput
    upsert?: UserUpsertWithoutBadgesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBadgesInput, UserUpdateWithoutBadgesInput>, UserUncheckedUpdateWithoutBadgesInput>
  }

  export type BadgeUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<BadgeCreateWithoutUsersInput, BadgeUncheckedCreateWithoutUsersInput>
    connectOrCreate?: BadgeCreateOrConnectWithoutUsersInput
    upsert?: BadgeUpsertWithoutUsersInput
    connect?: BadgeWhereUniqueInput
    update?: XOR<XOR<BadgeUpdateToOneWithWhereWithoutUsersInput, BadgeUpdateWithoutUsersInput>, BadgeUncheckedUpdateWithoutUsersInput>
  }

  export type MatchCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<MatchCreateWithoutFeedbackInput, MatchUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: MatchCreateOrConnectWithoutFeedbackInput
    connect?: MatchWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbackGivenInput = {
    create?: XOR<UserCreateWithoutFeedbackGivenInput, UserUncheckedCreateWithoutFeedbackGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackGivenInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbackReceivedInput = {
    create?: XOR<UserCreateWithoutFeedbackReceivedInput, UserUncheckedCreateWithoutFeedbackReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type MatchUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<MatchCreateWithoutFeedbackInput, MatchUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: MatchCreateOrConnectWithoutFeedbackInput
    upsert?: MatchUpsertWithoutFeedbackInput
    connect?: MatchWhereUniqueInput
    update?: XOR<XOR<MatchUpdateToOneWithWhereWithoutFeedbackInput, MatchUpdateWithoutFeedbackInput>, MatchUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserUpdateOneRequiredWithoutFeedbackGivenNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackGivenInput, UserUncheckedCreateWithoutFeedbackGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackGivenInput
    upsert?: UserUpsertWithoutFeedbackGivenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackGivenInput, UserUpdateWithoutFeedbackGivenInput>, UserUncheckedUpdateWithoutFeedbackGivenInput>
  }

  export type UserUpdateOneRequiredWithoutFeedbackReceivedNestedInput = {
    create?: XOR<UserCreateWithoutFeedbackReceivedInput, UserUncheckedCreateWithoutFeedbackReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackReceivedInput
    upsert?: UserUpsertWithoutFeedbackReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbackReceivedInput, UserUpdateWithoutFeedbackReceivedInput>, UserUncheckedUpdateWithoutFeedbackReceivedInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type UserOfferCreateWithoutUserInput = {
    proficiency: number
    createdAt?: Date | string
    skill: SkillCreateNestedOneWithoutOffersInput
  }

  export type UserOfferUncheckedCreateWithoutUserInput = {
    skillId: number
    proficiency: number
    createdAt?: Date | string
  }

  export type UserOfferCreateOrConnectWithoutUserInput = {
    where: UserOfferWhereUniqueInput
    create: XOR<UserOfferCreateWithoutUserInput, UserOfferUncheckedCreateWithoutUserInput>
  }

  export type UserOfferCreateManyUserInputEnvelope = {
    data: UserOfferCreateManyUserInput | UserOfferCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserNeedCreateWithoutUserInput = {
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
    skill: SkillCreateNestedOneWithoutNeedsInput
  }

  export type UserNeedUncheckedCreateWithoutUserInput = {
    skillId: number
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
  }

  export type UserNeedCreateOrConnectWithoutUserInput = {
    where: UserNeedWhereUniqueInput
    create: XOR<UserNeedCreateWithoutUserInput, UserNeedUncheckedCreateWithoutUserInput>
  }

  export type UserNeedCreateManyUserInputEnvelope = {
    data: UserNeedCreateManyUserInput | UserNeedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MatchPreferencesCreateWithoutUserInput = {
    skillWeight?: number
    availabilityWeight?: number
    timezoneWeight?: number
    collabStyleWeight?: number
    personalityWeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchPreferencesUncheckedCreateWithoutUserInput = {
    skillWeight?: number
    availabilityWeight?: number
    timezoneWeight?: number
    collabStyleWeight?: number
    personalityWeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchPreferencesCreateOrConnectWithoutUserInput = {
    where: MatchPreferencesWhereUniqueInput
    create: XOR<MatchPreferencesCreateWithoutUserInput, MatchPreferencesUncheckedCreateWithoutUserInput>
  }

  export type ProjectInterestCreateWithoutUserInput = {
    interest: string
    createdAt?: Date | string
  }

  export type ProjectInterestUncheckedCreateWithoutUserInput = {
    interest: string
    createdAt?: Date | string
  }

  export type ProjectInterestCreateOrConnectWithoutUserInput = {
    where: ProjectInterestWhereUniqueInput
    create: XOR<ProjectInterestCreateWithoutUserInput, ProjectInterestUncheckedCreateWithoutUserInput>
  }

  export type ProjectInterestCreateManyUserInputEnvelope = {
    data: ProjectInterestCreateManyUserInput | ProjectInterestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CollaborationPreferencesCreateWithoutUserInput = {
    preferredTools?: CollaborationPreferencesCreatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesCreateprojectStageInterestInput | string[]
    teamSizePreference?: string | null
    commitmentLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollaborationPreferencesUncheckedCreateWithoutUserInput = {
    preferredTools?: CollaborationPreferencesCreatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesCreateprojectStageInterestInput | string[]
    teamSizePreference?: string | null
    commitmentLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CollaborationPreferencesCreateOrConnectWithoutUserInput = {
    where: CollaborationPreferencesWhereUniqueInput
    create: XOR<CollaborationPreferencesCreateWithoutUserInput, CollaborationPreferencesUncheckedCreateWithoutUserInput>
  }

  export type MatchCreateWithoutUserAInput = {
    id?: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userB: UserCreateNestedOneWithoutMatchesAsBInput
    interactions?: MatchInteractionCreateNestedManyWithoutMatchInput
    feedback?: CollaborationFeedbackCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutUserAInput = {
    id?: string
    userBId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: MatchInteractionUncheckedCreateNestedManyWithoutMatchInput
    feedback?: CollaborationFeedbackUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutUserAInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutUserAInput, MatchUncheckedCreateWithoutUserAInput>
  }

  export type MatchCreateManyUserAInputEnvelope = {
    data: MatchCreateManyUserAInput | MatchCreateManyUserAInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutUserBInput = {
    id?: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userA: UserCreateNestedOneWithoutMatchesAsAInput
    interactions?: MatchInteractionCreateNestedManyWithoutMatchInput
    feedback?: CollaborationFeedbackCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutUserBInput = {
    id?: string
    userAId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: MatchInteractionUncheckedCreateNestedManyWithoutMatchInput
    feedback?: CollaborationFeedbackUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutUserBInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutUserBInput, MatchUncheckedCreateWithoutUserBInput>
  }

  export type MatchCreateManyUserBInputEnvelope = {
    data: MatchCreateManyUserBInput | MatchCreateManyUserBInput[]
    skipDuplicates?: boolean
  }

  export type MatchInteractionCreateWithoutUserInput = {
    id?: string
    action: string
    createdAt?: Date | string
    match: MatchCreateNestedOneWithoutInteractionsInput
  }

  export type MatchInteractionUncheckedCreateWithoutUserInput = {
    id?: string
    matchId: string
    action: string
    createdAt?: Date | string
  }

  export type MatchInteractionCreateOrConnectWithoutUserInput = {
    where: MatchInteractionWhereUniqueInput
    create: XOR<MatchInteractionCreateWithoutUserInput, MatchInteractionUncheckedCreateWithoutUserInput>
  }

  export type MatchInteractionCreateManyUserInputEnvelope = {
    data: MatchInteractionCreateManyUserInput | MatchInteractionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeCreateWithoutUserInput = {
    earnedAt?: Date | string
    badge: BadgeCreateNestedOneWithoutUsersInput
  }

  export type UserBadgeUncheckedCreateWithoutUserInput = {
    badgeId: number
    earnedAt?: Date | string
  }

  export type UserBadgeCreateOrConnectWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeCreateManyUserInputEnvelope = {
    data: UserBadgeCreateManyUserInput | UserBadgeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CollaborationFeedbackCreateWithoutReviewerInput = {
    id?: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
    match: MatchCreateNestedOneWithoutFeedbackInput
    reviewed: UserCreateNestedOneWithoutFeedbackReceivedInput
  }

  export type CollaborationFeedbackUncheckedCreateWithoutReviewerInput = {
    id?: string
    matchId: string
    reviewedId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type CollaborationFeedbackCreateOrConnectWithoutReviewerInput = {
    where: CollaborationFeedbackWhereUniqueInput
    create: XOR<CollaborationFeedbackCreateWithoutReviewerInput, CollaborationFeedbackUncheckedCreateWithoutReviewerInput>
  }

  export type CollaborationFeedbackCreateManyReviewerInputEnvelope = {
    data: CollaborationFeedbackCreateManyReviewerInput | CollaborationFeedbackCreateManyReviewerInput[]
    skipDuplicates?: boolean
  }

  export type CollaborationFeedbackCreateWithoutReviewedInput = {
    id?: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
    match: MatchCreateNestedOneWithoutFeedbackInput
    reviewer: UserCreateNestedOneWithoutFeedbackGivenInput
  }

  export type CollaborationFeedbackUncheckedCreateWithoutReviewedInput = {
    id?: string
    matchId: string
    reviewerId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type CollaborationFeedbackCreateOrConnectWithoutReviewedInput = {
    where: CollaborationFeedbackWhereUniqueInput
    create: XOR<CollaborationFeedbackCreateWithoutReviewedInput, CollaborationFeedbackUncheckedCreateWithoutReviewedInput>
  }

  export type CollaborationFeedbackCreateManyReviewedInputEnvelope = {
    data: CollaborationFeedbackCreateManyReviewedInput | CollaborationFeedbackCreateManyReviewedInput[]
    skipDuplicates?: boolean
  }

  export type UserOfferUpsertWithWhereUniqueWithoutUserInput = {
    where: UserOfferWhereUniqueInput
    update: XOR<UserOfferUpdateWithoutUserInput, UserOfferUncheckedUpdateWithoutUserInput>
    create: XOR<UserOfferCreateWithoutUserInput, UserOfferUncheckedCreateWithoutUserInput>
  }

  export type UserOfferUpdateWithWhereUniqueWithoutUserInput = {
    where: UserOfferWhereUniqueInput
    data: XOR<UserOfferUpdateWithoutUserInput, UserOfferUncheckedUpdateWithoutUserInput>
  }

  export type UserOfferUpdateManyWithWhereWithoutUserInput = {
    where: UserOfferScalarWhereInput
    data: XOR<UserOfferUpdateManyMutationInput, UserOfferUncheckedUpdateManyWithoutUserInput>
  }

  export type UserOfferScalarWhereInput = {
    AND?: UserOfferScalarWhereInput | UserOfferScalarWhereInput[]
    OR?: UserOfferScalarWhereInput[]
    NOT?: UserOfferScalarWhereInput | UserOfferScalarWhereInput[]
    userId?: StringFilter<"UserOffer"> | string
    skillId?: IntFilter<"UserOffer"> | number
    proficiency?: IntFilter<"UserOffer"> | number
    createdAt?: DateTimeFilter<"UserOffer"> | Date | string
  }

  export type UserNeedUpsertWithWhereUniqueWithoutUserInput = {
    where: UserNeedWhereUniqueInput
    update: XOR<UserNeedUpdateWithoutUserInput, UserNeedUncheckedUpdateWithoutUserInput>
    create: XOR<UserNeedCreateWithoutUserInput, UserNeedUncheckedCreateWithoutUserInput>
  }

  export type UserNeedUpdateWithWhereUniqueWithoutUserInput = {
    where: UserNeedWhereUniqueInput
    data: XOR<UserNeedUpdateWithoutUserInput, UserNeedUncheckedUpdateWithoutUserInput>
  }

  export type UserNeedUpdateManyWithWhereWithoutUserInput = {
    where: UserNeedScalarWhereInput
    data: XOR<UserNeedUpdateManyMutationInput, UserNeedUncheckedUpdateManyWithoutUserInput>
  }

  export type UserNeedScalarWhereInput = {
    AND?: UserNeedScalarWhereInput | UserNeedScalarWhereInput[]
    OR?: UserNeedScalarWhereInput[]
    NOT?: UserNeedScalarWhereInput | UserNeedScalarWhereInput[]
    userId?: StringFilter<"UserNeed"> | string
    skillId?: IntFilter<"UserNeed"> | number
    mustHave?: BoolFilter<"UserNeed"> | boolean
    priority?: IntFilter<"UserNeed"> | number
    createdAt?: DateTimeFilter<"UserNeed"> | Date | string
  }

  export type MatchPreferencesUpsertWithoutUserInput = {
    update: XOR<MatchPreferencesUpdateWithoutUserInput, MatchPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<MatchPreferencesCreateWithoutUserInput, MatchPreferencesUncheckedCreateWithoutUserInput>
    where?: MatchPreferencesWhereInput
  }

  export type MatchPreferencesUpdateToOneWithWhereWithoutUserInput = {
    where?: MatchPreferencesWhereInput
    data: XOR<MatchPreferencesUpdateWithoutUserInput, MatchPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type MatchPreferencesUpdateWithoutUserInput = {
    skillWeight?: IntFieldUpdateOperationsInput | number
    availabilityWeight?: IntFieldUpdateOperationsInput | number
    timezoneWeight?: IntFieldUpdateOperationsInput | number
    collabStyleWeight?: IntFieldUpdateOperationsInput | number
    personalityWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchPreferencesUncheckedUpdateWithoutUserInput = {
    skillWeight?: IntFieldUpdateOperationsInput | number
    availabilityWeight?: IntFieldUpdateOperationsInput | number
    timezoneWeight?: IntFieldUpdateOperationsInput | number
    collabStyleWeight?: IntFieldUpdateOperationsInput | number
    personalityWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestUpsertWithWhereUniqueWithoutUserInput = {
    where: ProjectInterestWhereUniqueInput
    update: XOR<ProjectInterestUpdateWithoutUserInput, ProjectInterestUncheckedUpdateWithoutUserInput>
    create: XOR<ProjectInterestCreateWithoutUserInput, ProjectInterestUncheckedCreateWithoutUserInput>
  }

  export type ProjectInterestUpdateWithWhereUniqueWithoutUserInput = {
    where: ProjectInterestWhereUniqueInput
    data: XOR<ProjectInterestUpdateWithoutUserInput, ProjectInterestUncheckedUpdateWithoutUserInput>
  }

  export type ProjectInterestUpdateManyWithWhereWithoutUserInput = {
    where: ProjectInterestScalarWhereInput
    data: XOR<ProjectInterestUpdateManyMutationInput, ProjectInterestUncheckedUpdateManyWithoutUserInput>
  }

  export type ProjectInterestScalarWhereInput = {
    AND?: ProjectInterestScalarWhereInput | ProjectInterestScalarWhereInput[]
    OR?: ProjectInterestScalarWhereInput[]
    NOT?: ProjectInterestScalarWhereInput | ProjectInterestScalarWhereInput[]
    userId?: StringFilter<"ProjectInterest"> | string
    interest?: StringFilter<"ProjectInterest"> | string
    createdAt?: DateTimeFilter<"ProjectInterest"> | Date | string
  }

  export type CollaborationPreferencesUpsertWithoutUserInput = {
    update: XOR<CollaborationPreferencesUpdateWithoutUserInput, CollaborationPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<CollaborationPreferencesCreateWithoutUserInput, CollaborationPreferencesUncheckedCreateWithoutUserInput>
    where?: CollaborationPreferencesWhereInput
  }

  export type CollaborationPreferencesUpdateToOneWithWhereWithoutUserInput = {
    where?: CollaborationPreferencesWhereInput
    data: XOR<CollaborationPreferencesUpdateWithoutUserInput, CollaborationPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type CollaborationPreferencesUpdateWithoutUserInput = {
    preferredTools?: CollaborationPreferencesUpdatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesUpdateprojectStageInterestInput | string[]
    teamSizePreference?: NullableStringFieldUpdateOperationsInput | string | null
    commitmentLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationPreferencesUncheckedUpdateWithoutUserInput = {
    preferredTools?: CollaborationPreferencesUpdatepreferredToolsInput | string[]
    projectStageInterest?: CollaborationPreferencesUpdateprojectStageInterestInput | string[]
    teamSizePreference?: NullableStringFieldUpdateOperationsInput | string | null
    commitmentLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpsertWithWhereUniqueWithoutUserAInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutUserAInput, MatchUncheckedUpdateWithoutUserAInput>
    create: XOR<MatchCreateWithoutUserAInput, MatchUncheckedCreateWithoutUserAInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutUserAInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutUserAInput, MatchUncheckedUpdateWithoutUserAInput>
  }

  export type MatchUpdateManyWithWhereWithoutUserAInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutUserAInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    userAId?: StringFilter<"Match"> | string
    userBId?: StringFilter<"Match"> | string
    matchScore?: DecimalNullableFilter<"Match"> | Decimal | DecimalJsLike | number | string | null
    status?: StringFilter<"Match"> | string
    userALiked?: BoolFilter<"Match"> | boolean
    userBLiked?: BoolFilter<"Match"> | boolean
    createdAt?: DateTimeFilter<"Match"> | Date | string
    updatedAt?: DateTimeFilter<"Match"> | Date | string
  }

  export type MatchUpsertWithWhereUniqueWithoutUserBInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutUserBInput, MatchUncheckedUpdateWithoutUserBInput>
    create: XOR<MatchCreateWithoutUserBInput, MatchUncheckedCreateWithoutUserBInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutUserBInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutUserBInput, MatchUncheckedUpdateWithoutUserBInput>
  }

  export type MatchUpdateManyWithWhereWithoutUserBInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutUserBInput>
  }

  export type MatchInteractionUpsertWithWhereUniqueWithoutUserInput = {
    where: MatchInteractionWhereUniqueInput
    update: XOR<MatchInteractionUpdateWithoutUserInput, MatchInteractionUncheckedUpdateWithoutUserInput>
    create: XOR<MatchInteractionCreateWithoutUserInput, MatchInteractionUncheckedCreateWithoutUserInput>
  }

  export type MatchInteractionUpdateWithWhereUniqueWithoutUserInput = {
    where: MatchInteractionWhereUniqueInput
    data: XOR<MatchInteractionUpdateWithoutUserInput, MatchInteractionUncheckedUpdateWithoutUserInput>
  }

  export type MatchInteractionUpdateManyWithWhereWithoutUserInput = {
    where: MatchInteractionScalarWhereInput
    data: XOR<MatchInteractionUpdateManyMutationInput, MatchInteractionUncheckedUpdateManyWithoutUserInput>
  }

  export type MatchInteractionScalarWhereInput = {
    AND?: MatchInteractionScalarWhereInput | MatchInteractionScalarWhereInput[]
    OR?: MatchInteractionScalarWhereInput[]
    NOT?: MatchInteractionScalarWhereInput | MatchInteractionScalarWhereInput[]
    id?: StringFilter<"MatchInteraction"> | string
    matchId?: StringFilter<"MatchInteraction"> | string
    userId?: StringFilter<"MatchInteraction"> | string
    action?: StringFilter<"MatchInteraction"> | string
    createdAt?: DateTimeFilter<"MatchInteraction"> | Date | string
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
    create: XOR<UserBadgeCreateWithoutUserInput, UserBadgeUncheckedCreateWithoutUserInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutUserInput, UserBadgeUncheckedUpdateWithoutUserInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutUserInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutUserInput>
  }

  export type UserBadgeScalarWhereInput = {
    AND?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    OR?: UserBadgeScalarWhereInput[]
    NOT?: UserBadgeScalarWhereInput | UserBadgeScalarWhereInput[]
    userId?: StringFilter<"UserBadge"> | string
    badgeId?: IntFilter<"UserBadge"> | number
    earnedAt?: DateTimeFilter<"UserBadge"> | Date | string
  }

  export type CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewerInput = {
    where: CollaborationFeedbackWhereUniqueInput
    update: XOR<CollaborationFeedbackUpdateWithoutReviewerInput, CollaborationFeedbackUncheckedUpdateWithoutReviewerInput>
    create: XOR<CollaborationFeedbackCreateWithoutReviewerInput, CollaborationFeedbackUncheckedCreateWithoutReviewerInput>
  }

  export type CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewerInput = {
    where: CollaborationFeedbackWhereUniqueInput
    data: XOR<CollaborationFeedbackUpdateWithoutReviewerInput, CollaborationFeedbackUncheckedUpdateWithoutReviewerInput>
  }

  export type CollaborationFeedbackUpdateManyWithWhereWithoutReviewerInput = {
    where: CollaborationFeedbackScalarWhereInput
    data: XOR<CollaborationFeedbackUpdateManyMutationInput, CollaborationFeedbackUncheckedUpdateManyWithoutReviewerInput>
  }

  export type CollaborationFeedbackScalarWhereInput = {
    AND?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
    OR?: CollaborationFeedbackScalarWhereInput[]
    NOT?: CollaborationFeedbackScalarWhereInput | CollaborationFeedbackScalarWhereInput[]
    id?: StringFilter<"CollaborationFeedback"> | string
    matchId?: StringFilter<"CollaborationFeedback"> | string
    reviewerId?: StringFilter<"CollaborationFeedback"> | string
    reviewedId?: StringFilter<"CollaborationFeedback"> | string
    rating?: IntFilter<"CollaborationFeedback"> | number
    feedback?: StringNullableFilter<"CollaborationFeedback"> | string | null
    collaborationQuality?: IntFilter<"CollaborationFeedback"> | number
    communicationQuality?: IntFilter<"CollaborationFeedback"> | number
    skillMatchQuality?: IntFilter<"CollaborationFeedback"> | number
    wouldCollaborateAgain?: BoolNullableFilter<"CollaborationFeedback"> | boolean | null
    createdAt?: DateTimeFilter<"CollaborationFeedback"> | Date | string
  }

  export type CollaborationFeedbackUpsertWithWhereUniqueWithoutReviewedInput = {
    where: CollaborationFeedbackWhereUniqueInput
    update: XOR<CollaborationFeedbackUpdateWithoutReviewedInput, CollaborationFeedbackUncheckedUpdateWithoutReviewedInput>
    create: XOR<CollaborationFeedbackCreateWithoutReviewedInput, CollaborationFeedbackUncheckedCreateWithoutReviewedInput>
  }

  export type CollaborationFeedbackUpdateWithWhereUniqueWithoutReviewedInput = {
    where: CollaborationFeedbackWhereUniqueInput
    data: XOR<CollaborationFeedbackUpdateWithoutReviewedInput, CollaborationFeedbackUncheckedUpdateWithoutReviewedInput>
  }

  export type CollaborationFeedbackUpdateManyWithWhereWithoutReviewedInput = {
    where: CollaborationFeedbackScalarWhereInput
    data: XOR<CollaborationFeedbackUpdateManyMutationInput, CollaborationFeedbackUncheckedUpdateManyWithoutReviewedInput>
  }

  export type UserOfferCreateWithoutSkillInput = {
    proficiency: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutOffersInput
  }

  export type UserOfferUncheckedCreateWithoutSkillInput = {
    userId: string
    proficiency: number
    createdAt?: Date | string
  }

  export type UserOfferCreateOrConnectWithoutSkillInput = {
    where: UserOfferWhereUniqueInput
    create: XOR<UserOfferCreateWithoutSkillInput, UserOfferUncheckedCreateWithoutSkillInput>
  }

  export type UserOfferCreateManySkillInputEnvelope = {
    data: UserOfferCreateManySkillInput | UserOfferCreateManySkillInput[]
    skipDuplicates?: boolean
  }

  export type UserNeedCreateWithoutSkillInput = {
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNeedsInput
  }

  export type UserNeedUncheckedCreateWithoutSkillInput = {
    userId: string
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
  }

  export type UserNeedCreateOrConnectWithoutSkillInput = {
    where: UserNeedWhereUniqueInput
    create: XOR<UserNeedCreateWithoutSkillInput, UserNeedUncheckedCreateWithoutSkillInput>
  }

  export type UserNeedCreateManySkillInputEnvelope = {
    data: UserNeedCreateManySkillInput | UserNeedCreateManySkillInput[]
    skipDuplicates?: boolean
  }

  export type UserOfferUpsertWithWhereUniqueWithoutSkillInput = {
    where: UserOfferWhereUniqueInput
    update: XOR<UserOfferUpdateWithoutSkillInput, UserOfferUncheckedUpdateWithoutSkillInput>
    create: XOR<UserOfferCreateWithoutSkillInput, UserOfferUncheckedCreateWithoutSkillInput>
  }

  export type UserOfferUpdateWithWhereUniqueWithoutSkillInput = {
    where: UserOfferWhereUniqueInput
    data: XOR<UserOfferUpdateWithoutSkillInput, UserOfferUncheckedUpdateWithoutSkillInput>
  }

  export type UserOfferUpdateManyWithWhereWithoutSkillInput = {
    where: UserOfferScalarWhereInput
    data: XOR<UserOfferUpdateManyMutationInput, UserOfferUncheckedUpdateManyWithoutSkillInput>
  }

  export type UserNeedUpsertWithWhereUniqueWithoutSkillInput = {
    where: UserNeedWhereUniqueInput
    update: XOR<UserNeedUpdateWithoutSkillInput, UserNeedUncheckedUpdateWithoutSkillInput>
    create: XOR<UserNeedCreateWithoutSkillInput, UserNeedUncheckedCreateWithoutSkillInput>
  }

  export type UserNeedUpdateWithWhereUniqueWithoutSkillInput = {
    where: UserNeedWhereUniqueInput
    data: XOR<UserNeedUpdateWithoutSkillInput, UserNeedUncheckedUpdateWithoutSkillInput>
  }

  export type UserNeedUpdateManyWithWhereWithoutSkillInput = {
    where: UserNeedScalarWhereInput
    data: XOR<UserNeedUpdateManyMutationInput, UserNeedUncheckedUpdateManyWithoutSkillInput>
  }

  export type UserCreateWithoutOffersInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutOffersInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutOffersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOffersInput, UserUncheckedCreateWithoutOffersInput>
  }

  export type SkillCreateWithoutOffersInput = {
    name: string
    category: string
    createdAt?: Date | string
    needs?: UserNeedCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateWithoutOffersInput = {
    id?: number
    name: string
    category: string
    createdAt?: Date | string
    needs?: UserNeedUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillCreateOrConnectWithoutOffersInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutOffersInput, SkillUncheckedCreateWithoutOffersInput>
  }

  export type UserUpsertWithoutOffersInput = {
    update: XOR<UserUpdateWithoutOffersInput, UserUncheckedUpdateWithoutOffersInput>
    create: XOR<UserCreateWithoutOffersInput, UserUncheckedCreateWithoutOffersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOffersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOffersInput, UserUncheckedUpdateWithoutOffersInput>
  }

  export type UserUpdateWithoutOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutOffersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type SkillUpsertWithoutOffersInput = {
    update: XOR<SkillUpdateWithoutOffersInput, SkillUncheckedUpdateWithoutOffersInput>
    create: XOR<SkillCreateWithoutOffersInput, SkillUncheckedCreateWithoutOffersInput>
    where?: SkillWhereInput
  }

  export type SkillUpdateToOneWithWhereWithoutOffersInput = {
    where?: SkillWhereInput
    data: XOR<SkillUpdateWithoutOffersInput, SkillUncheckedUpdateWithoutOffersInput>
  }

  export type SkillUpdateWithoutOffersInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    needs?: UserNeedUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateWithoutOffersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    needs?: UserNeedUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type UserCreateWithoutNeedsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutNeedsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutNeedsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNeedsInput, UserUncheckedCreateWithoutNeedsInput>
  }

  export type SkillCreateWithoutNeedsInput = {
    name: string
    category: string
    createdAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutSkillInput
  }

  export type SkillUncheckedCreateWithoutNeedsInput = {
    id?: number
    name: string
    category: string
    createdAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutSkillInput
  }

  export type SkillCreateOrConnectWithoutNeedsInput = {
    where: SkillWhereUniqueInput
    create: XOR<SkillCreateWithoutNeedsInput, SkillUncheckedCreateWithoutNeedsInput>
  }

  export type UserUpsertWithoutNeedsInput = {
    update: XOR<UserUpdateWithoutNeedsInput, UserUncheckedUpdateWithoutNeedsInput>
    create: XOR<UserCreateWithoutNeedsInput, UserUncheckedCreateWithoutNeedsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNeedsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNeedsInput, UserUncheckedUpdateWithoutNeedsInput>
  }

  export type UserUpdateWithoutNeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutNeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type SkillUpsertWithoutNeedsInput = {
    update: XOR<SkillUpdateWithoutNeedsInput, SkillUncheckedUpdateWithoutNeedsInput>
    create: XOR<SkillCreateWithoutNeedsInput, SkillUncheckedCreateWithoutNeedsInput>
    where?: SkillWhereInput
  }

  export type SkillUpdateToOneWithWhereWithoutNeedsInput = {
    where?: SkillWhereInput
    data: XOR<SkillUpdateWithoutNeedsInput, SkillUncheckedUpdateWithoutNeedsInput>
  }

  export type SkillUpdateWithoutNeedsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutSkillNestedInput
  }

  export type SkillUncheckedUpdateWithoutNeedsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutSkillNestedInput
  }

  export type UserCreateWithoutMatchPreferencesInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutMatchPreferencesInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutMatchPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchPreferencesInput, UserUncheckedCreateWithoutMatchPreferencesInput>
  }

  export type UserUpsertWithoutMatchPreferencesInput = {
    update: XOR<UserUpdateWithoutMatchPreferencesInput, UserUncheckedUpdateWithoutMatchPreferencesInput>
    create: XOR<UserCreateWithoutMatchPreferencesInput, UserUncheckedCreateWithoutMatchPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchPreferencesInput, UserUncheckedUpdateWithoutMatchPreferencesInput>
  }

  export type UserUpdateWithoutMatchPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserCreateWithoutProjectInterestsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutProjectInterestsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutProjectInterestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProjectInterestsInput, UserUncheckedCreateWithoutProjectInterestsInput>
  }

  export type UserUpsertWithoutProjectInterestsInput = {
    update: XOR<UserUpdateWithoutProjectInterestsInput, UserUncheckedUpdateWithoutProjectInterestsInput>
    create: XOR<UserCreateWithoutProjectInterestsInput, UserUncheckedCreateWithoutProjectInterestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProjectInterestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProjectInterestsInput, UserUncheckedUpdateWithoutProjectInterestsInput>
  }

  export type UserUpdateWithoutProjectInterestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutProjectInterestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserCreateWithoutCollaborationPrefsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutCollaborationPrefsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutCollaborationPrefsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCollaborationPrefsInput, UserUncheckedCreateWithoutCollaborationPrefsInput>
  }

  export type UserUpsertWithoutCollaborationPrefsInput = {
    update: XOR<UserUpdateWithoutCollaborationPrefsInput, UserUncheckedUpdateWithoutCollaborationPrefsInput>
    create: XOR<UserCreateWithoutCollaborationPrefsInput, UserUncheckedCreateWithoutCollaborationPrefsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCollaborationPrefsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCollaborationPrefsInput, UserUncheckedUpdateWithoutCollaborationPrefsInput>
  }

  export type UserUpdateWithoutCollaborationPrefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutCollaborationPrefsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserCreateWithoutMatchesAsAInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutMatchesAsAInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutMatchesAsAInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchesAsAInput, UserUncheckedCreateWithoutMatchesAsAInput>
  }

  export type UserCreateWithoutMatchesAsBInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutMatchesAsBInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutMatchesAsBInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchesAsBInput, UserUncheckedCreateWithoutMatchesAsBInput>
  }

  export type MatchInteractionCreateWithoutMatchInput = {
    id?: string
    action: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMatchInteractionsInput
  }

  export type MatchInteractionUncheckedCreateWithoutMatchInput = {
    id?: string
    userId: string
    action: string
    createdAt?: Date | string
  }

  export type MatchInteractionCreateOrConnectWithoutMatchInput = {
    where: MatchInteractionWhereUniqueInput
    create: XOR<MatchInteractionCreateWithoutMatchInput, MatchInteractionUncheckedCreateWithoutMatchInput>
  }

  export type MatchInteractionCreateManyMatchInputEnvelope = {
    data: MatchInteractionCreateManyMatchInput | MatchInteractionCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type CollaborationFeedbackCreateWithoutMatchInput = {
    id?: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
    reviewer: UserCreateNestedOneWithoutFeedbackGivenInput
    reviewed: UserCreateNestedOneWithoutFeedbackReceivedInput
  }

  export type CollaborationFeedbackUncheckedCreateWithoutMatchInput = {
    id?: string
    reviewerId: string
    reviewedId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type CollaborationFeedbackCreateOrConnectWithoutMatchInput = {
    where: CollaborationFeedbackWhereUniqueInput
    create: XOR<CollaborationFeedbackCreateWithoutMatchInput, CollaborationFeedbackUncheckedCreateWithoutMatchInput>
  }

  export type CollaborationFeedbackCreateManyMatchInputEnvelope = {
    data: CollaborationFeedbackCreateManyMatchInput | CollaborationFeedbackCreateManyMatchInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMatchesAsAInput = {
    update: XOR<UserUpdateWithoutMatchesAsAInput, UserUncheckedUpdateWithoutMatchesAsAInput>
    create: XOR<UserCreateWithoutMatchesAsAInput, UserUncheckedCreateWithoutMatchesAsAInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchesAsAInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchesAsAInput, UserUncheckedUpdateWithoutMatchesAsAInput>
  }

  export type UserUpdateWithoutMatchesAsAInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchesAsAInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserUpsertWithoutMatchesAsBInput = {
    update: XOR<UserUpdateWithoutMatchesAsBInput, UserUncheckedUpdateWithoutMatchesAsBInput>
    create: XOR<UserCreateWithoutMatchesAsBInput, UserUncheckedCreateWithoutMatchesAsBInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchesAsBInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchesAsBInput, UserUncheckedUpdateWithoutMatchesAsBInput>
  }

  export type UserUpdateWithoutMatchesAsBInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchesAsBInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type MatchInteractionUpsertWithWhereUniqueWithoutMatchInput = {
    where: MatchInteractionWhereUniqueInput
    update: XOR<MatchInteractionUpdateWithoutMatchInput, MatchInteractionUncheckedUpdateWithoutMatchInput>
    create: XOR<MatchInteractionCreateWithoutMatchInput, MatchInteractionUncheckedCreateWithoutMatchInput>
  }

  export type MatchInteractionUpdateWithWhereUniqueWithoutMatchInput = {
    where: MatchInteractionWhereUniqueInput
    data: XOR<MatchInteractionUpdateWithoutMatchInput, MatchInteractionUncheckedUpdateWithoutMatchInput>
  }

  export type MatchInteractionUpdateManyWithWhereWithoutMatchInput = {
    where: MatchInteractionScalarWhereInput
    data: XOR<MatchInteractionUpdateManyMutationInput, MatchInteractionUncheckedUpdateManyWithoutMatchInput>
  }

  export type CollaborationFeedbackUpsertWithWhereUniqueWithoutMatchInput = {
    where: CollaborationFeedbackWhereUniqueInput
    update: XOR<CollaborationFeedbackUpdateWithoutMatchInput, CollaborationFeedbackUncheckedUpdateWithoutMatchInput>
    create: XOR<CollaborationFeedbackCreateWithoutMatchInput, CollaborationFeedbackUncheckedCreateWithoutMatchInput>
  }

  export type CollaborationFeedbackUpdateWithWhereUniqueWithoutMatchInput = {
    where: CollaborationFeedbackWhereUniqueInput
    data: XOR<CollaborationFeedbackUpdateWithoutMatchInput, CollaborationFeedbackUncheckedUpdateWithoutMatchInput>
  }

  export type CollaborationFeedbackUpdateManyWithWhereWithoutMatchInput = {
    where: CollaborationFeedbackScalarWhereInput
    data: XOR<CollaborationFeedbackUpdateManyMutationInput, CollaborationFeedbackUncheckedUpdateManyWithoutMatchInput>
  }

  export type MatchCreateWithoutInteractionsInput = {
    id?: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userA: UserCreateNestedOneWithoutMatchesAsAInput
    userB: UserCreateNestedOneWithoutMatchesAsBInput
    feedback?: CollaborationFeedbackCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutInteractionsInput = {
    id?: string
    userAId: string
    userBId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    feedback?: CollaborationFeedbackUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutInteractionsInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutInteractionsInput, MatchUncheckedCreateWithoutInteractionsInput>
  }

  export type UserCreateWithoutMatchInteractionsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutMatchInteractionsInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutMatchInteractionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMatchInteractionsInput, UserUncheckedCreateWithoutMatchInteractionsInput>
  }

  export type MatchUpsertWithoutInteractionsInput = {
    update: XOR<MatchUpdateWithoutInteractionsInput, MatchUncheckedUpdateWithoutInteractionsInput>
    create: XOR<MatchCreateWithoutInteractionsInput, MatchUncheckedCreateWithoutInteractionsInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutInteractionsInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutInteractionsInput, MatchUncheckedUpdateWithoutInteractionsInput>
  }

  export type MatchUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userA?: UserUpdateOneRequiredWithoutMatchesAsANestedInput
    userB?: UserUpdateOneRequiredWithoutMatchesAsBNestedInput
    feedback?: CollaborationFeedbackUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userAId?: StringFieldUpdateOperationsInput | string
    userBId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    feedback?: CollaborationFeedbackUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type UserUpsertWithoutMatchInteractionsInput = {
    update: XOR<UserUpdateWithoutMatchInteractionsInput, UserUncheckedUpdateWithoutMatchInteractionsInput>
    create: XOR<UserCreateWithoutMatchInteractionsInput, UserUncheckedCreateWithoutMatchInteractionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMatchInteractionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMatchInteractionsInput, UserUncheckedUpdateWithoutMatchInteractionsInput>
  }

  export type UserUpdateWithoutMatchInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutMatchInteractionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserBadgeCreateWithoutBadgeInput = {
    earnedAt?: Date | string
    user: UserCreateNestedOneWithoutBadgesInput
  }

  export type UserBadgeUncheckedCreateWithoutBadgeInput = {
    userId: string
    earnedAt?: Date | string
  }

  export type UserBadgeCreateOrConnectWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeCreateManyBadgeInputEnvelope = {
    data: UserBadgeCreateManyBadgeInput | UserBadgeCreateManyBadgeInput[]
    skipDuplicates?: boolean
  }

  export type UserBadgeUpsertWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    update: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
    create: XOR<UserBadgeCreateWithoutBadgeInput, UserBadgeUncheckedCreateWithoutBadgeInput>
  }

  export type UserBadgeUpdateWithWhereUniqueWithoutBadgeInput = {
    where: UserBadgeWhereUniqueInput
    data: XOR<UserBadgeUpdateWithoutBadgeInput, UserBadgeUncheckedUpdateWithoutBadgeInput>
  }

  export type UserBadgeUpdateManyWithWhereWithoutBadgeInput = {
    where: UserBadgeScalarWhereInput
    data: XOR<UserBadgeUpdateManyMutationInput, UserBadgeUncheckedUpdateManyWithoutBadgeInput>
  }

  export type UserCreateWithoutBadgesInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutBadgesInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutBadgesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
  }

  export type BadgeCreateWithoutUsersInput = {
    name: string
    description?: string | null
    icon?: string | null
    criteria?: string | null
    createdAt?: Date | string
  }

  export type BadgeUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    description?: string | null
    icon?: string | null
    criteria?: string | null
    createdAt?: Date | string
  }

  export type BadgeCreateOrConnectWithoutUsersInput = {
    where: BadgeWhereUniqueInput
    create: XOR<BadgeCreateWithoutUsersInput, BadgeUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutBadgesInput = {
    update: XOR<UserUpdateWithoutBadgesInput, UserUncheckedUpdateWithoutBadgesInput>
    create: XOR<UserCreateWithoutBadgesInput, UserUncheckedCreateWithoutBadgesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBadgesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBadgesInput, UserUncheckedUpdateWithoutBadgesInput>
  }

  export type UserUpdateWithoutBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutBadgesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type BadgeUpsertWithoutUsersInput = {
    update: XOR<BadgeUpdateWithoutUsersInput, BadgeUncheckedUpdateWithoutUsersInput>
    create: XOR<BadgeCreateWithoutUsersInput, BadgeUncheckedCreateWithoutUsersInput>
    where?: BadgeWhereInput
  }

  export type BadgeUpdateToOneWithWhereWithoutUsersInput = {
    where?: BadgeWhereInput
    data: XOR<BadgeUpdateWithoutUsersInput, BadgeUncheckedUpdateWithoutUsersInput>
  }

  export type BadgeUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BadgeUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    criteria?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchCreateWithoutFeedbackInput = {
    id?: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userA: UserCreateNestedOneWithoutMatchesAsAInput
    userB: UserCreateNestedOneWithoutMatchesAsBInput
    interactions?: MatchInteractionCreateNestedManyWithoutMatchInput
  }

  export type MatchUncheckedCreateWithoutFeedbackInput = {
    id?: string
    userAId: string
    userBId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    interactions?: MatchInteractionUncheckedCreateNestedManyWithoutMatchInput
  }

  export type MatchCreateOrConnectWithoutFeedbackInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutFeedbackInput, MatchUncheckedCreateWithoutFeedbackInput>
  }

  export type UserCreateWithoutFeedbackGivenInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackReceived?: CollaborationFeedbackCreateNestedManyWithoutReviewedInput
  }

  export type UserUncheckedCreateWithoutFeedbackGivenInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackReceived?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewedInput
  }

  export type UserCreateOrConnectWithoutFeedbackGivenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackGivenInput, UserUncheckedCreateWithoutFeedbackGivenInput>
  }

  export type UserCreateWithoutFeedbackReceivedInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferCreateNestedManyWithoutUserInput
    needs?: UserNeedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesCreateNestedOneWithoutUserInput
    matchesAsA?: MatchCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionCreateNestedManyWithoutUserInput
    badges?: UserBadgeCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackCreateNestedManyWithoutReviewerInput
  }

  export type UserUncheckedCreateWithoutFeedbackReceivedInput = {
    id?: string
    email: string
    password: string
    name?: string | null
    bio?: string | null
    avatarUrl?: string | null
    githubUrl?: string | null
    linkedinUrl?: string | null
    portfolioUrl?: string | null
    experienceLevel?: string | null
    timezone?: string | null
    availabilityHours?: number | null
    workStyle?: string | null
    commsPref?: string | null
    values?: UserCreatevaluesInput | string[]
    isOnboarded?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    offers?: UserOfferUncheckedCreateNestedManyWithoutUserInput
    needs?: UserNeedUncheckedCreateNestedManyWithoutUserInput
    matchPreferences?: MatchPreferencesUncheckedCreateNestedOneWithoutUserInput
    projectInterests?: ProjectInterestUncheckedCreateNestedManyWithoutUserInput
    collaborationPrefs?: CollaborationPreferencesUncheckedCreateNestedOneWithoutUserInput
    matchesAsA?: MatchUncheckedCreateNestedManyWithoutUserAInput
    matchesAsB?: MatchUncheckedCreateNestedManyWithoutUserBInput
    matchInteractions?: MatchInteractionUncheckedCreateNestedManyWithoutUserInput
    badges?: UserBadgeUncheckedCreateNestedManyWithoutUserInput
    feedbackGiven?: CollaborationFeedbackUncheckedCreateNestedManyWithoutReviewerInput
  }

  export type UserCreateOrConnectWithoutFeedbackReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackReceivedInput, UserUncheckedCreateWithoutFeedbackReceivedInput>
  }

  export type MatchUpsertWithoutFeedbackInput = {
    update: XOR<MatchUpdateWithoutFeedbackInput, MatchUncheckedUpdateWithoutFeedbackInput>
    create: XOR<MatchCreateWithoutFeedbackInput, MatchUncheckedCreateWithoutFeedbackInput>
    where?: MatchWhereInput
  }

  export type MatchUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: MatchWhereInput
    data: XOR<MatchUpdateWithoutFeedbackInput, MatchUncheckedUpdateWithoutFeedbackInput>
  }

  export type MatchUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userA?: UserUpdateOneRequiredWithoutMatchesAsANestedInput
    userB?: UserUpdateOneRequiredWithoutMatchesAsBNestedInput
    interactions?: MatchInteractionUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    userAId?: StringFieldUpdateOperationsInput | string
    userBId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: MatchInteractionUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type UserUpsertWithoutFeedbackGivenInput = {
    update: XOR<UserUpdateWithoutFeedbackGivenInput, UserUncheckedUpdateWithoutFeedbackGivenInput>
    create: XOR<UserCreateWithoutFeedbackGivenInput, UserUncheckedCreateWithoutFeedbackGivenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackGivenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackGivenInput, UserUncheckedUpdateWithoutFeedbackGivenInput>
  }

  export type UserUpdateWithoutFeedbackGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackReceived?: CollaborationFeedbackUpdateManyWithoutReviewedNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackReceived?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewedNestedInput
  }

  export type UserUpsertWithoutFeedbackReceivedInput = {
    update: XOR<UserUpdateWithoutFeedbackReceivedInput, UserUncheckedUpdateWithoutFeedbackReceivedInput>
    create: XOR<UserCreateWithoutFeedbackReceivedInput, UserUncheckedCreateWithoutFeedbackReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbackReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbackReceivedInput, UserUncheckedUpdateWithoutFeedbackReceivedInput>
  }

  export type UserUpdateWithoutFeedbackReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUpdateManyWithoutUserNestedInput
    needs?: UserNeedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUpdateManyWithoutReviewerNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbackReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    portfolioUrl?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    availabilityHours?: NullableIntFieldUpdateOperationsInput | number | null
    workStyle?: NullableStringFieldUpdateOperationsInput | string | null
    commsPref?: NullableStringFieldUpdateOperationsInput | string | null
    values?: UserUpdatevaluesInput | string[]
    isOnboarded?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    offers?: UserOfferUncheckedUpdateManyWithoutUserNestedInput
    needs?: UserNeedUncheckedUpdateManyWithoutUserNestedInput
    matchPreferences?: MatchPreferencesUncheckedUpdateOneWithoutUserNestedInput
    projectInterests?: ProjectInterestUncheckedUpdateManyWithoutUserNestedInput
    collaborationPrefs?: CollaborationPreferencesUncheckedUpdateOneWithoutUserNestedInput
    matchesAsA?: MatchUncheckedUpdateManyWithoutUserANestedInput
    matchesAsB?: MatchUncheckedUpdateManyWithoutUserBNestedInput
    matchInteractions?: MatchInteractionUncheckedUpdateManyWithoutUserNestedInput
    badges?: UserBadgeUncheckedUpdateManyWithoutUserNestedInput
    feedbackGiven?: CollaborationFeedbackUncheckedUpdateManyWithoutReviewerNestedInput
  }

  export type UserOfferCreateManyUserInput = {
    skillId: number
    proficiency: number
    createdAt?: Date | string
  }

  export type UserNeedCreateManyUserInput = {
    skillId: number
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
  }

  export type ProjectInterestCreateManyUserInput = {
    interest: string
    createdAt?: Date | string
  }

  export type MatchCreateManyUserAInput = {
    id?: string
    userBId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchCreateManyUserBInput = {
    id?: string
    userAId: string
    matchScore?: Decimal | DecimalJsLike | number | string | null
    status?: string
    userALiked?: boolean
    userBLiked?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MatchInteractionCreateManyUserInput = {
    id?: string
    matchId: string
    action: string
    createdAt?: Date | string
  }

  export type UserBadgeCreateManyUserInput = {
    badgeId: number
    earnedAt?: Date | string
  }

  export type CollaborationFeedbackCreateManyReviewerInput = {
    id?: string
    matchId: string
    reviewedId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type CollaborationFeedbackCreateManyReviewedInput = {
    id?: string
    matchId: string
    reviewerId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type UserOfferUpdateWithoutUserInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skill?: SkillUpdateOneRequiredWithoutOffersNestedInput
  }

  export type UserOfferUncheckedUpdateWithoutUserInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferUncheckedUpdateManyWithoutUserInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedUpdateWithoutUserInput = {
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skill?: SkillUpdateOneRequiredWithoutNeedsNestedInput
  }

  export type UserNeedUncheckedUpdateWithoutUserInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedUncheckedUpdateManyWithoutUserInput = {
    skillId?: IntFieldUpdateOperationsInput | number
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestUpdateWithoutUserInput = {
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestUncheckedUpdateWithoutUserInput = {
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectInterestUncheckedUpdateManyWithoutUserInput = {
    interest?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpdateWithoutUserAInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userB?: UserUpdateOneRequiredWithoutMatchesAsBNestedInput
    interactions?: MatchInteractionUpdateManyWithoutMatchNestedInput
    feedback?: CollaborationFeedbackUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutUserAInput = {
    id?: StringFieldUpdateOperationsInput | string
    userBId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: MatchInteractionUncheckedUpdateManyWithoutMatchNestedInput
    feedback?: CollaborationFeedbackUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutUserAInput = {
    id?: StringFieldUpdateOperationsInput | string
    userBId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchUpdateWithoutUserBInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userA?: UserUpdateOneRequiredWithoutMatchesAsANestedInput
    interactions?: MatchInteractionUpdateManyWithoutMatchNestedInput
    feedback?: CollaborationFeedbackUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateWithoutUserBInput = {
    id?: StringFieldUpdateOperationsInput | string
    userAId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interactions?: MatchInteractionUncheckedUpdateManyWithoutMatchNestedInput
    feedback?: CollaborationFeedbackUncheckedUpdateManyWithoutMatchNestedInput
  }

  export type MatchUncheckedUpdateManyWithoutUserBInput = {
    id?: StringFieldUpdateOperationsInput | string
    userAId?: StringFieldUpdateOperationsInput | string
    matchScore?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: StringFieldUpdateOperationsInput | string
    userALiked?: BoolFieldUpdateOperationsInput | boolean
    userBLiked?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutInteractionsNestedInput
  }

  export type MatchInteractionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUpdateWithoutUserInput = {
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    badge?: BadgeUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutUserInput = {
    badgeId?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyWithoutUserInput = {
    badgeId?: IntFieldUpdateOperationsInput | number
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutFeedbackNestedInput
    reviewed?: UserUpdateOneRequiredWithoutFeedbackReceivedNestedInput
  }

  export type CollaborationFeedbackUncheckedUpdateWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    reviewedId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUncheckedUpdateManyWithoutReviewerInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    reviewedId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUpdateWithoutReviewedInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    match?: MatchUpdateOneRequiredWithoutFeedbackNestedInput
    reviewer?: UserUpdateOneRequiredWithoutFeedbackGivenNestedInput
  }

  export type CollaborationFeedbackUncheckedUpdateWithoutReviewedInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUncheckedUpdateManyWithoutReviewedInput = {
    id?: StringFieldUpdateOperationsInput | string
    matchId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferCreateManySkillInput = {
    userId: string
    proficiency: number
    createdAt?: Date | string
  }

  export type UserNeedCreateManySkillInput = {
    userId: string
    mustHave?: boolean
    priority?: number
    createdAt?: Date | string
  }

  export type UserOfferUpdateWithoutSkillInput = {
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOffersNestedInput
  }

  export type UserOfferUncheckedUpdateWithoutSkillInput = {
    userId?: StringFieldUpdateOperationsInput | string
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserOfferUncheckedUpdateManyWithoutSkillInput = {
    userId?: StringFieldUpdateOperationsInput | string
    proficiency?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedUpdateWithoutSkillInput = {
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNeedsNestedInput
  }

  export type UserNeedUncheckedUpdateWithoutSkillInput = {
    userId?: StringFieldUpdateOperationsInput | string
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserNeedUncheckedUpdateManyWithoutSkillInput = {
    userId?: StringFieldUpdateOperationsInput | string
    mustHave?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionCreateManyMatchInput = {
    id?: string
    userId: string
    action: string
    createdAt?: Date | string
  }

  export type CollaborationFeedbackCreateManyMatchInput = {
    id?: string
    reviewerId: string
    reviewedId: string
    rating: number
    feedback?: string | null
    collaborationQuality: number
    communicationQuality: number
    skillMatchQuality: number
    wouldCollaborateAgain?: boolean | null
    createdAt?: Date | string
  }

  export type MatchInteractionUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMatchInteractionsNestedInput
  }

  export type MatchInteractionUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchInteractionUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewer?: UserUpdateOneRequiredWithoutFeedbackGivenNestedInput
    reviewed?: UserUpdateOneRequiredWithoutFeedbackReceivedNestedInput
  }

  export type CollaborationFeedbackUncheckedUpdateWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    reviewedId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollaborationFeedbackUncheckedUpdateManyWithoutMatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    reviewedId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    collaborationQuality?: IntFieldUpdateOperationsInput | number
    communicationQuality?: IntFieldUpdateOperationsInput | number
    skillMatchQuality?: IntFieldUpdateOperationsInput | number
    wouldCollaborateAgain?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeCreateManyBadgeInput = {
    userId: string
    earnedAt?: Date | string
  }

  export type UserBadgeUpdateWithoutBadgeInput = {
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBadgesNestedInput
  }

  export type UserBadgeUncheckedUpdateWithoutBadgeInput = {
    userId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBadgeUncheckedUpdateManyWithoutBadgeInput = {
    userId?: StringFieldUpdateOperationsInput | string
    earnedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillCountOutputTypeDefaultArgs instead
     */
    export type SkillCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchCountOutputTypeDefaultArgs instead
     */
    export type MatchCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BadgeCountOutputTypeDefaultArgs instead
     */
    export type BadgeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BadgeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SkillDefaultArgs instead
     */
    export type SkillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SkillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserOfferDefaultArgs instead
     */
    export type UserOfferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserOfferDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserNeedDefaultArgs instead
     */
    export type UserNeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserNeedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchPreferencesDefaultArgs instead
     */
    export type MatchPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchPreferencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectInterestDefaultArgs instead
     */
    export type ProjectInterestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectInterestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaborationPreferencesDefaultArgs instead
     */
    export type CollaborationPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaborationPreferencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchDefaultArgs instead
     */
    export type MatchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MatchInteractionDefaultArgs instead
     */
    export type MatchInteractionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MatchInteractionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BadgeDefaultArgs instead
     */
    export type BadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BadgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserBadgeDefaultArgs instead
     */
    export type UserBadgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserBadgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollaborationFeedbackDefaultArgs instead
     */
    export type CollaborationFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollaborationFeedbackDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}